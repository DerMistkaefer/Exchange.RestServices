namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using Microsoft.RestServices.Exchange;

    /// <summary>
    /// EntityObjectSchema
    /// </summary>
    public class EntityObjectSchema : ObjectSchema
    {

        /// <summary>
        /// Id
        /// </summary>
        public static PropertyDefinition Id = new PropertyDefinition(nameof(Id), typeof(string));

    }


    /// <summary>
    /// CommsApplicationObjectSchema
    /// </summary>
    public class CommsApplicationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OnlineMeetings
        /// </summary>
        public static PropertyDefinition OnlineMeetings = new PropertyDefinition(nameof(OnlineMeetings), typeof(IList<OnlineMeeting>));


        /// <summary>
        /// Calls
        /// </summary>
        public static PropertyDefinition Calls = new PropertyDefinition(nameof(Calls), typeof(IList<Call>));

    }


    /// <summary>
    /// OnlineMeetingObjectSchema
    /// </summary>
    public class OnlineMeetingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreationTime
        /// </summary>
        public static PropertyDefinition CreationTime = new PropertyDefinition(nameof(CreationTime), typeof(DateTimeOffset));


        /// <summary>
        /// StartTime
        /// </summary>
        public static PropertyDefinition StartTime = new PropertyDefinition(nameof(StartTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndTime
        /// </summary>
        public static PropertyDefinition EndTime = new PropertyDefinition(nameof(EndTime), typeof(DateTimeOffset));


        /// <summary>
        /// CanceledTime
        /// </summary>
        public static PropertyDefinition CanceledTime = new PropertyDefinition(nameof(CanceledTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExpirationTime
        /// </summary>
        public static PropertyDefinition ExpirationTime = new PropertyDefinition(nameof(ExpirationTime), typeof(DateTimeOffset));


        /// <summary>
        /// EntryExitAnnouncement
        /// </summary>
        public static PropertyDefinition EntryExitAnnouncement = new PropertyDefinition(nameof(EntryExitAnnouncement), typeof(bool));


        /// <summary>
        /// JoinUrl
        /// </summary>
        public static PropertyDefinition JoinUrl = new PropertyDefinition(nameof(JoinUrl), typeof(string));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// IsCancelled
        /// </summary>
        public static PropertyDefinition IsCancelled = new PropertyDefinition(nameof(IsCancelled), typeof(bool));


        /// <summary>
        /// Participants
        /// </summary>
        public static PropertyDefinition Participants = new PropertyDefinition(nameof(Participants), typeof(MeetingParticipants));


        /// <summary>
        /// MeetingType
        /// </summary>
        public static PropertyDefinition MeetingType = new PropertyDefinition(nameof(MeetingType), typeof(MeetingType));


        /// <summary>
        /// AccessLevel
        /// </summary>
        public static PropertyDefinition AccessLevel = new PropertyDefinition(nameof(AccessLevel), typeof(AccessLevel));


        /// <summary>
        /// AudioConferencing
        /// </summary>
        public static PropertyDefinition AudioConferencing = new PropertyDefinition(nameof(AudioConferencing), typeof(AudioConferencing));


        /// <summary>
        /// ChatInfo
        /// </summary>
        public static PropertyDefinition ChatInfo = new PropertyDefinition(nameof(ChatInfo), typeof(ChatInfo));


        /// <summary>
        /// MeetingInfo
        /// </summary>
        public static PropertyDefinition MeetingInfo = new PropertyDefinition(nameof(MeetingInfo), typeof(MeetingInfo));

    }


    /// <summary>
    /// CallObjectSchema
    /// </summary>
    public class CallObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(CallState));


        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(ResultInfo));


        /// <summary>
        /// TerminationReason
        /// </summary>
        public static PropertyDefinition TerminationReason = new PropertyDefinition(nameof(TerminationReason), typeof(string));


        /// <summary>
        /// Direction
        /// </summary>
        public static PropertyDefinition Direction = new PropertyDefinition(nameof(Direction), typeof(CallDirection));


        /// <summary>
        /// RingningTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition RingningTimeoutInSeconds = new PropertyDefinition(nameof(RingningTimeoutInSeconds), typeof(int));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// CallbackUri
        /// </summary>
        public static PropertyDefinition CallbackUri = new PropertyDefinition(nameof(CallbackUri), typeof(string));


        /// <summary>
        /// CallRoutes
        /// </summary>
        public static PropertyDefinition CallRoutes = new PropertyDefinition(nameof(CallRoutes), typeof(IList<CallRoute>));


        /// <summary>
        /// Source
        /// </summary>
        public static PropertyDefinition Source = new PropertyDefinition(nameof(Source), typeof(ParticipantInfo));


        /// <summary>
        /// Targets
        /// </summary>
        public static PropertyDefinition Targets = new PropertyDefinition(nameof(Targets), typeof(IList<ParticipantInfo>));


        /// <summary>
        /// AnsweredBy
        /// </summary>
        public static PropertyDefinition AnsweredBy = new PropertyDefinition(nameof(AnsweredBy), typeof(ParticipantInfo));


        /// <summary>
        /// RequestedModalities
        /// </summary>
        public static PropertyDefinition RequestedModalities = new PropertyDefinition(nameof(RequestedModalities), typeof(IList<Modality>));


        /// <summary>
        /// ActiveModalities
        /// </summary>
        public static PropertyDefinition ActiveModalities = new PropertyDefinition(nameof(ActiveModalities), typeof(IList<Modality>));


        /// <summary>
        /// MediaConfig
        /// </summary>
        public static PropertyDefinition MediaConfig = new PropertyDefinition(nameof(MediaConfig), typeof(MediaConfig));


        /// <summary>
        /// ChatInfo
        /// </summary>
        public static PropertyDefinition ChatInfo = new PropertyDefinition(nameof(ChatInfo), typeof(ChatInfo));


        /// <summary>
        /// MeetingInfo
        /// </summary>
        public static PropertyDefinition MeetingInfo = new PropertyDefinition(nameof(MeetingInfo), typeof(MeetingInfo));


        /// <summary>
        /// MeetingCapability
        /// </summary>
        public static PropertyDefinition MeetingCapability = new PropertyDefinition(nameof(MeetingCapability), typeof(MeetingCapability));


        /// <summary>
        /// RoutingPolicies
        /// </summary>
        public static PropertyDefinition RoutingPolicies = new PropertyDefinition(nameof(RoutingPolicies), typeof(IList<RoutingPolicy>));


        /// <summary>
        /// TenantId
        /// </summary>
        public static PropertyDefinition TenantId = new PropertyDefinition(nameof(TenantId), typeof(string));


        /// <summary>
        /// MyParticipantId
        /// </summary>
        public static PropertyDefinition MyParticipantId = new PropertyDefinition(nameof(MyParticipantId), typeof(string));


        /// <summary>
        /// ToneInfo
        /// </summary>
        public static PropertyDefinition ToneInfo = new PropertyDefinition(nameof(ToneInfo), typeof(ToneInfo));


        /// <summary>
        /// Participants
        /// </summary>
        public static PropertyDefinition Participants = new PropertyDefinition(nameof(Participants), typeof(IList<Participant>));


        /// <summary>
        /// AudioRoutingGroups
        /// </summary>
        public static PropertyDefinition AudioRoutingGroups = new PropertyDefinition(nameof(AudioRoutingGroups), typeof(IList<AudioRoutingGroup>));


        /// <summary>
        /// Operations
        /// </summary>
        public static PropertyDefinition Operations = new PropertyDefinition(nameof(Operations), typeof(IList<CommsOperation>));

    }


    /// <summary>
    /// AudioRoutingGroupObjectSchema
    /// </summary>
    public class AudioRoutingGroupObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(string));


        /// <summary>
        /// RoutingMode
        /// </summary>
        public static PropertyDefinition RoutingMode = new PropertyDefinition(nameof(RoutingMode), typeof(RoutingMode));


        /// <summary>
        /// Sources
        /// </summary>
        public static PropertyDefinition Sources = new PropertyDefinition(nameof(Sources), typeof(IList<String>));


        /// <summary>
        /// Receivers
        /// </summary>
        public static PropertyDefinition Receivers = new PropertyDefinition(nameof(Receivers), typeof(IList<String>));

    }


    /// <summary>
    /// ParticipantObjectSchema
    /// </summary>
    public class ParticipantObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Info
        /// </summary>
        public static PropertyDefinition Info = new PropertyDefinition(nameof(Info), typeof(ParticipantInfo));


        /// <summary>
        /// RecordingInfo
        /// </summary>
        public static PropertyDefinition RecordingInfo = new PropertyDefinition(nameof(RecordingInfo), typeof(RecordingInfo));


        /// <summary>
        /// MediaStreams
        /// </summary>
        public static PropertyDefinition MediaStreams = new PropertyDefinition(nameof(MediaStreams), typeof(IList<MediaStream>));


        /// <summary>
        /// Metadata
        /// </summary>
        public static PropertyDefinition Metadata = new PropertyDefinition(nameof(Metadata), typeof(string));


        /// <summary>
        /// IsMuted
        /// </summary>
        public static PropertyDefinition IsMuted = new PropertyDefinition(nameof(IsMuted), typeof(bool));


        /// <summary>
        /// IsInLobby
        /// </summary>
        public static PropertyDefinition IsInLobby = new PropertyDefinition(nameof(IsInLobby), typeof(bool));

    }


    /// <summary>
    /// CommsOperationObjectSchema
    /// </summary>
    public class CommsOperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(OperationStatus));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastActionDateTime
        /// </summary>
        public static PropertyDefinition LastActionDateTime = new PropertyDefinition(nameof(LastActionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ClientContext
        /// </summary>
        public static PropertyDefinition ClientContext = new PropertyDefinition(nameof(ClientContext), typeof(string));


        /// <summary>
        /// ErrorInfo
        /// </summary>
        public static PropertyDefinition ErrorInfo = new PropertyDefinition(nameof(ErrorInfo), typeof(ResultInfo));

    }


    /// <summary>
    /// CancelMediaProcessingOperationObjectSchema
    /// </summary>
    public class CancelMediaProcessingOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// All
        /// </summary>
        public static PropertyDefinition All = new PropertyDefinition(nameof(All), typeof(bool));

    }


    /// <summary>
    /// ConfigureMixerOperationObjectSchema
    /// </summary>
    public class ConfigureMixerOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// ParticipantMixerLevels
        /// </summary>
        public static PropertyDefinition ParticipantMixerLevels = new PropertyDefinition(nameof(ParticipantMixerLevels), typeof(IList<ParticipantMixerLevel>));

    }


    /// <summary>
    /// InviteParticipantsOperationObjectSchema
    /// </summary>
    public class InviteParticipantsOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Participants
        /// </summary>
        public static PropertyDefinition Participants = new PropertyDefinition(nameof(Participants), typeof(IList<InvitationParticipantInfo>));

    }


    /// <summary>
    /// MuteParticipantOperationObjectSchema
    /// </summary>
    public class MuteParticipantOperationObjectSchema : CommsOperationObjectSchema
    {
    }


    /// <summary>
    /// MuteParticipantsOperationObjectSchema
    /// </summary>
    public class MuteParticipantsOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Participants
        /// </summary>
        public static PropertyDefinition Participants = new PropertyDefinition(nameof(Participants), typeof(IList<String>));

    }


    /// <summary>
    /// PlayPromptOperationObjectSchema
    /// </summary>
    public class PlayPromptOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Prompts
        /// </summary>
        public static PropertyDefinition Prompts = new PropertyDefinition(nameof(Prompts), typeof(IList<Prompt>));


        /// <summary>
        /// CompletionReason
        /// </summary>
        public static PropertyDefinition CompletionReason = new PropertyDefinition(nameof(CompletionReason), typeof(CompletionReason));

    }


    /// <summary>
    /// RecognizeOperationObjectSchema
    /// </summary>
    public class RecognizeOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Prompts
        /// </summary>
        public static PropertyDefinition Prompts = new PropertyDefinition(nameof(Prompts), typeof(IList<Prompt>));


        /// <summary>
        /// BargeInAllowed
        /// </summary>
        public static PropertyDefinition BargeInAllowed = new PropertyDefinition(nameof(BargeInAllowed), typeof(bool));


        /// <summary>
        /// Culture
        /// </summary>
        public static PropertyDefinition Culture = new PropertyDefinition(nameof(Culture), typeof(string));


        /// <summary>
        /// InitialSilenceTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition InitialSilenceTimeoutInSeconds = new PropertyDefinition(nameof(InitialSilenceTimeoutInSeconds), typeof(int));


        /// <summary>
        /// InterDigitTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition InterDigitTimeoutInSeconds = new PropertyDefinition(nameof(InterDigitTimeoutInSeconds), typeof(int));


        /// <summary>
        /// Choices
        /// </summary>
        public static PropertyDefinition Choices = new PropertyDefinition(nameof(Choices), typeof(IList<RecognitionOption>));


        /// <summary>
        /// CollectDigits
        /// </summary>
        public static PropertyDefinition CollectDigits = new PropertyDefinition(nameof(CollectDigits), typeof(CollectDigits));

    }


    /// <summary>
    /// RecordOperationObjectSchema
    /// </summary>
    public class RecordOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Prompts
        /// </summary>
        public static PropertyDefinition Prompts = new PropertyDefinition(nameof(Prompts), typeof(IList<Prompt>));


        /// <summary>
        /// BargeInAllowed
        /// </summary>
        public static PropertyDefinition BargeInAllowed = new PropertyDefinition(nameof(BargeInAllowed), typeof(bool));


        /// <summary>
        /// InitialSilenceTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition InitialSilenceTimeoutInSeconds = new PropertyDefinition(nameof(InitialSilenceTimeoutInSeconds), typeof(int));


        /// <summary>
        /// MaxSilenceTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition MaxSilenceTimeoutInSeconds = new PropertyDefinition(nameof(MaxSilenceTimeoutInSeconds), typeof(int));


        /// <summary>
        /// MaxRecordDurationInSeconds
        /// </summary>
        public static PropertyDefinition MaxRecordDurationInSeconds = new PropertyDefinition(nameof(MaxRecordDurationInSeconds), typeof(int));


        /// <summary>
        /// PlayBeep
        /// </summary>
        public static PropertyDefinition PlayBeep = new PropertyDefinition(nameof(PlayBeep), typeof(bool));


        /// <summary>
        /// StreamWhileRecording
        /// </summary>
        public static PropertyDefinition StreamWhileRecording = new PropertyDefinition(nameof(StreamWhileRecording), typeof(bool));


        /// <summary>
        /// StopTones
        /// </summary>
        public static PropertyDefinition StopTones = new PropertyDefinition(nameof(StopTones), typeof(IList<String>));


        /// <summary>
        /// RecordResourceLocation
        /// </summary>
        public static PropertyDefinition RecordResourceLocation = new PropertyDefinition(nameof(RecordResourceLocation), typeof(string));


        /// <summary>
        /// CompletionReason
        /// </summary>
        public static PropertyDefinition CompletionReason = new PropertyDefinition(nameof(CompletionReason), typeof(RecordCompletionReason));

    }


    /// <summary>
    /// SubscribeToToneOperationObjectSchema
    /// </summary>
    public class SubscribeToToneOperationObjectSchema : CommsOperationObjectSchema
    {
    }


    /// <summary>
    /// SubscribeVideoOperationObjectSchema
    /// </summary>
    public class SubscribeVideoOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// VideoResolution
        /// </summary>
        public static PropertyDefinition VideoResolution = new PropertyDefinition(nameof(VideoResolution), typeof(VideoResolutionFormat));


        /// <summary>
        /// Modality
        /// </summary>
        public static PropertyDefinition Modality = new PropertyDefinition(nameof(Modality), typeof(Modality));


        /// <summary>
        /// SocketId
        /// </summary>
        public static PropertyDefinition SocketId = new PropertyDefinition(nameof(SocketId), typeof(Int64));

    }


    /// <summary>
    /// UnmuteParticipantOperationObjectSchema
    /// </summary>
    public class UnmuteParticipantOperationObjectSchema : CommsOperationObjectSchema
    {
    }


    /// <summary>
    /// UnmuteParticipantsOperationObjectSchema
    /// </summary>
    public class UnmuteParticipantsOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Participants
        /// </summary>
        public static PropertyDefinition Participants = new PropertyDefinition(nameof(Participants), typeof(IList<String>));

    }


    /// <summary>
    /// UpdateMetadataOperationObjectSchema
    /// </summary>
    public class UpdateMetadataOperationObjectSchema : CommsOperationObjectSchema
    {

        /// <summary>
        /// Metadata
        /// </summary>
        public static PropertyDefinition Metadata = new PropertyDefinition(nameof(Metadata), typeof(string));

    }


    /// <summary>
    /// ExtensionObjectSchema
    /// </summary>
    public class ExtensionObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// DirectoryObjectObjectSchema
    /// </summary>
    public class DirectoryObjectObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeletedDateTime
        /// </summary>
        public static PropertyDefinition DeletedDateTime = new PropertyDefinition(nameof(DeletedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// UserObjectSchema
    /// </summary>
    public class UserObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AccountEnabled
        /// </summary>
        public static PropertyDefinition AccountEnabled = new PropertyDefinition(nameof(AccountEnabled), typeof(bool));


        /// <summary>
        /// AgeGroup
        /// </summary>
        public static PropertyDefinition AgeGroup = new PropertyDefinition(nameof(AgeGroup), typeof(string));


        /// <summary>
        /// AssignedLicenses
        /// </summary>
        public static PropertyDefinition AssignedLicenses = new PropertyDefinition(nameof(AssignedLicenses), typeof(IList<AssignedLicense>));


        /// <summary>
        /// AssignedPlans
        /// </summary>
        public static PropertyDefinition AssignedPlans = new PropertyDefinition(nameof(AssignedPlans), typeof(IList<AssignedPlan>));


        /// <summary>
        /// BusinessPhones
        /// </summary>
        public static PropertyDefinition BusinessPhones = new PropertyDefinition(nameof(BusinessPhones), typeof(IList<String>));


        /// <summary>
        /// City
        /// </summary>
        public static PropertyDefinition City = new PropertyDefinition(nameof(City), typeof(string));


        /// <summary>
        /// CompanyName
        /// </summary>
        public static PropertyDefinition CompanyName = new PropertyDefinition(nameof(CompanyName), typeof(string));


        /// <summary>
        /// ConsentProvidedForMinor
        /// </summary>
        public static PropertyDefinition ConsentProvidedForMinor = new PropertyDefinition(nameof(ConsentProvidedForMinor), typeof(string));


        /// <summary>
        /// Country
        /// </summary>
        public static PropertyDefinition Country = new PropertyDefinition(nameof(Country), typeof(string));


        /// <summary>
        /// Department
        /// </summary>
        public static PropertyDefinition Department = new PropertyDefinition(nameof(Department), typeof(string));


        /// <summary>
        /// DeviceKeys
        /// </summary>
        public static PropertyDefinition DeviceKeys = new PropertyDefinition(nameof(DeviceKeys), typeof(IList<DeviceKey>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// EmployeeId
        /// </summary>
        public static PropertyDefinition EmployeeId = new PropertyDefinition(nameof(EmployeeId), typeof(string));


        /// <summary>
        /// FaxNumber
        /// </summary>
        public static PropertyDefinition FaxNumber = new PropertyDefinition(nameof(FaxNumber), typeof(string));


        /// <summary>
        /// GivenName
        /// </summary>
        public static PropertyDefinition GivenName = new PropertyDefinition(nameof(GivenName), typeof(string));


        /// <summary>
        /// ImAddresses
        /// </summary>
        public static PropertyDefinition ImAddresses = new PropertyDefinition(nameof(ImAddresses), typeof(IList<String>));


        /// <summary>
        /// IsResourceAccount
        /// </summary>
        public static PropertyDefinition IsResourceAccount = new PropertyDefinition(nameof(IsResourceAccount), typeof(bool));


        /// <summary>
        /// JobTitle
        /// </summary>
        public static PropertyDefinition JobTitle = new PropertyDefinition(nameof(JobTitle), typeof(string));


        /// <summary>
        /// LegalAgeGroupClassification
        /// </summary>
        public static PropertyDefinition LegalAgeGroupClassification = new PropertyDefinition(nameof(LegalAgeGroupClassification), typeof(string));


        /// <summary>
        /// LicenseAssignmentStates
        /// </summary>
        public static PropertyDefinition LicenseAssignmentStates = new PropertyDefinition(nameof(LicenseAssignmentStates), typeof(IList<LicenseAssignmentState>));


        /// <summary>
        /// Mail
        /// </summary>
        public static PropertyDefinition Mail = new PropertyDefinition(nameof(Mail), typeof(string));


        /// <summary>
        /// MailNickname
        /// </summary>
        public static PropertyDefinition MailNickname = new PropertyDefinition(nameof(MailNickname), typeof(string));


        /// <summary>
        /// MobilePhone
        /// </summary>
        public static PropertyDefinition MobilePhone = new PropertyDefinition(nameof(MobilePhone), typeof(string));


        /// <summary>
        /// OnPremisesDistinguishedName
        /// </summary>
        public static PropertyDefinition OnPremisesDistinguishedName = new PropertyDefinition(nameof(OnPremisesDistinguishedName), typeof(string));


        /// <summary>
        /// OnPremisesExtensionAttributes
        /// </summary>
        public static PropertyDefinition OnPremisesExtensionAttributes = new PropertyDefinition(nameof(OnPremisesExtensionAttributes), typeof(OnPremisesExtensionAttributes));


        /// <summary>
        /// OnPremisesImmutableId
        /// </summary>
        public static PropertyDefinition OnPremisesImmutableId = new PropertyDefinition(nameof(OnPremisesImmutableId), typeof(string));


        /// <summary>
        /// OnPremisesLastSyncDateTime
        /// </summary>
        public static PropertyDefinition OnPremisesLastSyncDateTime = new PropertyDefinition(nameof(OnPremisesLastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OnPremisesProvisioningErrors
        /// </summary>
        public static PropertyDefinition OnPremisesProvisioningErrors = new PropertyDefinition(nameof(OnPremisesProvisioningErrors), typeof(IList<OnPremisesProvisioningError>));


        /// <summary>
        /// OnPremisesSecurityIdentifier
        /// </summary>
        public static PropertyDefinition OnPremisesSecurityIdentifier = new PropertyDefinition(nameof(OnPremisesSecurityIdentifier), typeof(string));


        /// <summary>
        /// OnPremisesSyncEnabled
        /// </summary>
        public static PropertyDefinition OnPremisesSyncEnabled = new PropertyDefinition(nameof(OnPremisesSyncEnabled), typeof(bool));


        /// <summary>
        /// OnPremisesDomainName
        /// </summary>
        public static PropertyDefinition OnPremisesDomainName = new PropertyDefinition(nameof(OnPremisesDomainName), typeof(string));


        /// <summary>
        /// OnPremisesSamAccountName
        /// </summary>
        public static PropertyDefinition OnPremisesSamAccountName = new PropertyDefinition(nameof(OnPremisesSamAccountName), typeof(string));


        /// <summary>
        /// OnPremisesUserPrincipalName
        /// </summary>
        public static PropertyDefinition OnPremisesUserPrincipalName = new PropertyDefinition(nameof(OnPremisesUserPrincipalName), typeof(string));


        /// <summary>
        /// OtherMails
        /// </summary>
        public static PropertyDefinition OtherMails = new PropertyDefinition(nameof(OtherMails), typeof(IList<String>));


        /// <summary>
        /// PasswordPolicies
        /// </summary>
        public static PropertyDefinition PasswordPolicies = new PropertyDefinition(nameof(PasswordPolicies), typeof(string));


        /// <summary>
        /// PasswordProfile
        /// </summary>
        public static PropertyDefinition PasswordProfile = new PropertyDefinition(nameof(PasswordProfile), typeof(PasswordProfile));


        /// <summary>
        /// OfficeLocation
        /// </summary>
        public static PropertyDefinition OfficeLocation = new PropertyDefinition(nameof(OfficeLocation), typeof(string));


        /// <summary>
        /// PostalCode
        /// </summary>
        public static PropertyDefinition PostalCode = new PropertyDefinition(nameof(PostalCode), typeof(string));


        /// <summary>
        /// PreferredDataLocation
        /// </summary>
        public static PropertyDefinition PreferredDataLocation = new PropertyDefinition(nameof(PreferredDataLocation), typeof(string));


        /// <summary>
        /// PreferredLanguage
        /// </summary>
        public static PropertyDefinition PreferredLanguage = new PropertyDefinition(nameof(PreferredLanguage), typeof(string));


        /// <summary>
        /// ProvisionedPlans
        /// </summary>
        public static PropertyDefinition ProvisionedPlans = new PropertyDefinition(nameof(ProvisionedPlans), typeof(IList<ProvisionedPlan>));


        /// <summary>
        /// ProxyAddresses
        /// </summary>
        public static PropertyDefinition ProxyAddresses = new PropertyDefinition(nameof(ProxyAddresses), typeof(IList<String>));


        /// <summary>
        /// RefreshTokensValidFromDateTime
        /// </summary>
        public static PropertyDefinition RefreshTokensValidFromDateTime = new PropertyDefinition(nameof(RefreshTokensValidFromDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ShowInAddressList
        /// </summary>
        public static PropertyDefinition ShowInAddressList = new PropertyDefinition(nameof(ShowInAddressList), typeof(bool));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(string));


        /// <summary>
        /// StreetAddress
        /// </summary>
        public static PropertyDefinition StreetAddress = new PropertyDefinition(nameof(StreetAddress), typeof(string));


        /// <summary>
        /// Surname
        /// </summary>
        public static PropertyDefinition Surname = new PropertyDefinition(nameof(Surname), typeof(string));


        /// <summary>
        /// UsageLocation
        /// </summary>
        public static PropertyDefinition UsageLocation = new PropertyDefinition(nameof(UsageLocation), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// ExternalUserState
        /// </summary>
        public static PropertyDefinition ExternalUserState = new PropertyDefinition(nameof(ExternalUserState), typeof(string));


        /// <summary>
        /// ExternalUserStateChangeDateTime
        /// </summary>
        public static PropertyDefinition ExternalUserStateChangeDateTime = new PropertyDefinition(nameof(ExternalUserStateChangeDateTime), typeof(string));


        /// <summary>
        /// UserType
        /// </summary>
        public static PropertyDefinition UserType = new PropertyDefinition(nameof(UserType), typeof(string));


        /// <summary>
        /// MailboxSettings
        /// </summary>
        public static PropertyDefinition MailboxSettings = new PropertyDefinition(nameof(MailboxSettings), typeof(MailboxSettings));


        /// <summary>
        /// AboutMe
        /// </summary>
        public static PropertyDefinition AboutMe = new PropertyDefinition(nameof(AboutMe), typeof(string));


        /// <summary>
        /// Birthday
        /// </summary>
        public static PropertyDefinition Birthday = new PropertyDefinition(nameof(Birthday), typeof(DateTimeOffset));


        /// <summary>
        /// HireDate
        /// </summary>
        public static PropertyDefinition HireDate = new PropertyDefinition(nameof(HireDate), typeof(DateTimeOffset));


        /// <summary>
        /// Interests
        /// </summary>
        public static PropertyDefinition Interests = new PropertyDefinition(nameof(Interests), typeof(IList<String>));


        /// <summary>
        /// MySite
        /// </summary>
        public static PropertyDefinition MySite = new PropertyDefinition(nameof(MySite), typeof(string));


        /// <summary>
        /// PastProjects
        /// </summary>
        public static PropertyDefinition PastProjects = new PropertyDefinition(nameof(PastProjects), typeof(IList<String>));


        /// <summary>
        /// PreferredName
        /// </summary>
        public static PropertyDefinition PreferredName = new PropertyDefinition(nameof(PreferredName), typeof(string));


        /// <summary>
        /// Responsibilities
        /// </summary>
        public static PropertyDefinition Responsibilities = new PropertyDefinition(nameof(Responsibilities), typeof(IList<String>));


        /// <summary>
        /// Schools
        /// </summary>
        public static PropertyDefinition Schools = new PropertyDefinition(nameof(Schools), typeof(IList<String>));


        /// <summary>
        /// Skills
        /// </summary>
        public static PropertyDefinition Skills = new PropertyDefinition(nameof(Skills), typeof(IList<String>));


        /// <summary>
        /// IdentityUserRisk
        /// </summary>
        public static PropertyDefinition IdentityUserRisk = new PropertyDefinition(nameof(IdentityUserRisk), typeof(IdentityUserRisk));


        /// <summary>
        /// DeviceEnrollmentLimit
        /// </summary>
        public static PropertyDefinition DeviceEnrollmentLimit = new PropertyDefinition(nameof(DeviceEnrollmentLimit), typeof(int));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// AppRoleAssignments
        /// </summary>
        public static PropertyDefinition AppRoleAssignments = new PropertyDefinition(nameof(AppRoleAssignments), typeof(IList<AppRoleAssignment>));


        /// <summary>
        /// CreatedObjects
        /// </summary>
        public static PropertyDefinition CreatedObjects = new PropertyDefinition(nameof(CreatedObjects), typeof(IList<DirectoryObject>));


        /// <summary>
        /// DirectReports
        /// </summary>
        public static PropertyDefinition DirectReports = new PropertyDefinition(nameof(DirectReports), typeof(IList<DirectoryObject>));


        /// <summary>
        /// LicenseDetails
        /// </summary>
        public static PropertyDefinition LicenseDetails = new PropertyDefinition(nameof(LicenseDetails), typeof(IList<LicenseDetails>));


        /// <summary>
        /// Manager
        /// </summary>
        public static PropertyDefinition Manager = new PropertyDefinition(nameof(Manager), typeof(DirectoryObject));


        /// <summary>
        /// MemberOf
        /// </summary>
        public static PropertyDefinition MemberOf = new PropertyDefinition(nameof(MemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// OwnedDevices
        /// </summary>
        public static PropertyDefinition OwnedDevices = new PropertyDefinition(nameof(OwnedDevices), typeof(IList<DirectoryObject>));


        /// <summary>
        /// OwnedObjects
        /// </summary>
        public static PropertyDefinition OwnedObjects = new PropertyDefinition(nameof(OwnedObjects), typeof(IList<DirectoryObject>));


        /// <summary>
        /// RegisteredDevices
        /// </summary>
        public static PropertyDefinition RegisteredDevices = new PropertyDefinition(nameof(RegisteredDevices), typeof(IList<DirectoryObject>));


        /// <summary>
        /// ScopedRoleMemberOf
        /// </summary>
        public static PropertyDefinition ScopedRoleMemberOf = new PropertyDefinition(nameof(ScopedRoleMemberOf), typeof(IList<ScopedRoleMembership>));


        /// <summary>
        /// TransitiveMemberOf
        /// </summary>
        public static PropertyDefinition TransitiveMemberOf = new PropertyDefinition(nameof(TransitiveMemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Activities
        /// </summary>
        public static PropertyDefinition Activities = new PropertyDefinition(nameof(Activities), typeof(IList<UserActivity>));


        /// <summary>
        /// Outlook
        /// </summary>
        public static PropertyDefinition Outlook = new PropertyDefinition(nameof(Outlook), typeof(OutlookUser));


        /// <summary>
        /// Messages
        /// </summary>
        public static PropertyDefinition Messages = new PropertyDefinition(nameof(Messages), typeof(IList<Message>));


        /// <summary>
        /// JoinedGroups
        /// </summary>
        public static PropertyDefinition JoinedGroups = new PropertyDefinition(nameof(JoinedGroups), typeof(IList<Group>));


        /// <summary>
        /// MailFolders
        /// </summary>
        public static PropertyDefinition MailFolders = new PropertyDefinition(nameof(MailFolders), typeof(IList<MailFolder>));


        /// <summary>
        /// Calendar
        /// </summary>
        public static PropertyDefinition Calendar = new PropertyDefinition(nameof(Calendar), typeof(Calendar));


        /// <summary>
        /// Calendars
        /// </summary>
        public static PropertyDefinition Calendars = new PropertyDefinition(nameof(Calendars), typeof(IList<Calendar>));


        /// <summary>
        /// CalendarGroups
        /// </summary>
        public static PropertyDefinition CalendarGroups = new PropertyDefinition(nameof(CalendarGroups), typeof(IList<CalendarGroup>));


        /// <summary>
        /// CalendarView
        /// </summary>
        public static PropertyDefinition CalendarView = new PropertyDefinition(nameof(CalendarView), typeof(IList<Event>));


        /// <summary>
        /// Events
        /// </summary>
        public static PropertyDefinition Events = new PropertyDefinition(nameof(Events), typeof(IList<Event>));


        /// <summary>
        /// People
        /// </summary>
        public static PropertyDefinition People = new PropertyDefinition(nameof(People), typeof(IList<Person>));


        /// <summary>
        /// Contacts
        /// </summary>
        public static PropertyDefinition Contacts = new PropertyDefinition(nameof(Contacts), typeof(IList<Contact>));


        /// <summary>
        /// ContactFolders
        /// </summary>
        public static PropertyDefinition ContactFolders = new PropertyDefinition(nameof(ContactFolders), typeof(IList<ContactFolder>));


        /// <summary>
        /// InferenceClassification
        /// </summary>
        public static PropertyDefinition InferenceClassification = new PropertyDefinition(nameof(InferenceClassification), typeof(InferenceClassification));


        /// <summary>
        /// Photo
        /// </summary>
        public static PropertyDefinition Photo = new PropertyDefinition(nameof(Photo), typeof(ProfilePhoto));


        /// <summary>
        /// Photos
        /// </summary>
        public static PropertyDefinition Photos = new PropertyDefinition(nameof(Photos), typeof(IList<ProfilePhoto>));


        /// <summary>
        /// Drive
        /// </summary>
        public static PropertyDefinition Drive = new PropertyDefinition(nameof(Drive), typeof(Drive));


        /// <summary>
        /// Drives
        /// </summary>
        public static PropertyDefinition Drives = new PropertyDefinition(nameof(Drives), typeof(IList<Drive>));


        /// <summary>
        /// Insights
        /// </summary>
        public static PropertyDefinition Insights = new PropertyDefinition(nameof(Insights), typeof(OfficeGraphInsights));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(UserSettings));


        /// <summary>
        /// Planner
        /// </summary>
        public static PropertyDefinition Planner = new PropertyDefinition(nameof(Planner), typeof(PlannerUser));


        /// <summary>
        /// Onenote
        /// </summary>
        public static PropertyDefinition Onenote = new PropertyDefinition(nameof(Onenote), typeof(Onenote));


        /// <summary>
        /// ManagedDevices
        /// </summary>
        public static PropertyDefinition ManagedDevices = new PropertyDefinition(nameof(ManagedDevices), typeof(IList<ManagedDevice>));


        /// <summary>
        /// DeviceEnrollmentConfigurations
        /// </summary>
        public static PropertyDefinition DeviceEnrollmentConfigurations = new PropertyDefinition(nameof(DeviceEnrollmentConfigurations), typeof(IList<DeviceEnrollmentConfiguration>));


        /// <summary>
        /// ManagedAppRegistrations
        /// </summary>
        public static PropertyDefinition ManagedAppRegistrations = new PropertyDefinition(nameof(ManagedAppRegistrations), typeof(IList<ManagedAppRegistration>));


        /// <summary>
        /// WindowsInformationProtectionDeviceRegistrations
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionDeviceRegistrations = new PropertyDefinition(nameof(WindowsInformationProtectionDeviceRegistrations), typeof(IList<WindowsInformationProtectionDeviceRegistration>));


        /// <summary>
        /// Devices
        /// </summary>
        public static PropertyDefinition Devices = new PropertyDefinition(nameof(Devices), typeof(IList<Device>));


        /// <summary>
        /// JoinedTeams
        /// </summary>
        public static PropertyDefinition JoinedTeams = new PropertyDefinition(nameof(JoinedTeams), typeof(IList<Group>));


        /// <summary>
        /// DeviceManagementTroubleshootingEvents
        /// </summary>
        public static PropertyDefinition DeviceManagementTroubleshootingEvents = new PropertyDefinition(nameof(DeviceManagementTroubleshootingEvents), typeof(IList<DeviceManagementTroubleshootingEvent>));


        /// <summary>
        /// MobileAppIntentAndStates
        /// </summary>
        public static PropertyDefinition MobileAppIntentAndStates = new PropertyDefinition(nameof(MobileAppIntentAndStates), typeof(IList<MobileAppIntentAndState>));


        /// <summary>
        /// MobileAppTroubleshootingEvents
        /// </summary>
        public static PropertyDefinition MobileAppTroubleshootingEvents = new PropertyDefinition(nameof(MobileAppTroubleshootingEvents), typeof(IList<MobileAppTroubleshootingEvent>));


        /// <summary>
        /// AgreementAcceptances
        /// </summary>
        public static PropertyDefinition AgreementAcceptances = new PropertyDefinition(nameof(AgreementAcceptances), typeof(IList<AgreementAcceptance>));


        /// <summary>
        /// Notifications
        /// </summary>
        public static PropertyDefinition Notifications = new PropertyDefinition(nameof(Notifications), typeof(IList<Notification>));

    }


    /// <summary>
    /// AppRoleAssignmentObjectSchema
    /// </summary>
    public class AppRoleAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AppRoleId
        /// </summary>
        public static PropertyDefinition AppRoleId = new PropertyDefinition(nameof(AppRoleId), typeof(Guid));


        /// <summary>
        /// CreationTimestamp
        /// </summary>
        public static PropertyDefinition CreationTimestamp = new PropertyDefinition(nameof(CreationTimestamp), typeof(DateTimeOffset));


        /// <summary>
        /// PrincipalDisplayName
        /// </summary>
        public static PropertyDefinition PrincipalDisplayName = new PropertyDefinition(nameof(PrincipalDisplayName), typeof(string));


        /// <summary>
        /// PrincipalId
        /// </summary>
        public static PropertyDefinition PrincipalId = new PropertyDefinition(nameof(PrincipalId), typeof(Guid));


        /// <summary>
        /// PrincipalType
        /// </summary>
        public static PropertyDefinition PrincipalType = new PropertyDefinition(nameof(PrincipalType), typeof(string));


        /// <summary>
        /// ResourceDisplayName
        /// </summary>
        public static PropertyDefinition ResourceDisplayName = new PropertyDefinition(nameof(ResourceDisplayName), typeof(string));


        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(Guid));

    }


    /// <summary>
    /// LicenseDetailsObjectSchema
    /// </summary>
    public class LicenseDetailsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ServicePlans
        /// </summary>
        public static PropertyDefinition ServicePlans = new PropertyDefinition(nameof(ServicePlans), typeof(IList<ServicePlanInfo>));


        /// <summary>
        /// SkuId
        /// </summary>
        public static PropertyDefinition SkuId = new PropertyDefinition(nameof(SkuId), typeof(Guid));


        /// <summary>
        /// SkuPartNumber
        /// </summary>
        public static PropertyDefinition SkuPartNumber = new PropertyDefinition(nameof(SkuPartNumber), typeof(string));

    }


    /// <summary>
    /// ScopedRoleMembershipObjectSchema
    /// </summary>
    public class ScopedRoleMembershipObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// RoleId
        /// </summary>
        public static PropertyDefinition RoleId = new PropertyDefinition(nameof(RoleId), typeof(string));


        /// <summary>
        /// AdministrativeUnitId
        /// </summary>
        public static PropertyDefinition AdministrativeUnitId = new PropertyDefinition(nameof(AdministrativeUnitId), typeof(string));


        /// <summary>
        /// RoleMemberInfo
        /// </summary>
        public static PropertyDefinition RoleMemberInfo = new PropertyDefinition(nameof(RoleMemberInfo), typeof(Identity));

    }


    /// <summary>
    /// UserActivityObjectSchema
    /// </summary>
    public class UserActivityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// VisualElements
        /// </summary>
        public static PropertyDefinition VisualElements = new PropertyDefinition(nameof(VisualElements), typeof(VisualInfo));


        /// <summary>
        /// ActivitySourceHost
        /// </summary>
        public static PropertyDefinition ActivitySourceHost = new PropertyDefinition(nameof(ActivitySourceHost), typeof(string));


        /// <summary>
        /// ActivationUrl
        /// </summary>
        public static PropertyDefinition ActivationUrl = new PropertyDefinition(nameof(ActivationUrl), typeof(string));


        /// <summary>
        /// AppActivityId
        /// </summary>
        public static PropertyDefinition AppActivityId = new PropertyDefinition(nameof(AppActivityId), typeof(string));


        /// <summary>
        /// AppDisplayName
        /// </summary>
        public static PropertyDefinition AppDisplayName = new PropertyDefinition(nameof(AppDisplayName), typeof(string));


        /// <summary>
        /// ContentUrl
        /// </summary>
        public static PropertyDefinition ContentUrl = new PropertyDefinition(nameof(ContentUrl), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FallbackUrl
        /// </summary>
        public static PropertyDefinition FallbackUrl = new PropertyDefinition(nameof(FallbackUrl), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserTimezone
        /// </summary>
        public static PropertyDefinition UserTimezone = new PropertyDefinition(nameof(UserTimezone), typeof(string));


        /// <summary>
        /// ContentInfo
        /// </summary>
        public static PropertyDefinition ContentInfo = new PropertyDefinition(nameof(ContentInfo), typeof(Json));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(Status));


        /// <summary>
        /// HistoryItems
        /// </summary>
        public static PropertyDefinition HistoryItems = new PropertyDefinition(nameof(HistoryItems), typeof(IList<ActivityHistoryItem>));

    }


    /// <summary>
    /// OutlookUserObjectSchema
    /// </summary>
    public class OutlookUserObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// MasterCategories
        /// </summary>
        public static PropertyDefinition MasterCategories = new PropertyDefinition(nameof(MasterCategories), typeof(IList<OutlookCategory>));


        /// <summary>
        /// TaskGroups
        /// </summary>
        public static PropertyDefinition TaskGroups = new PropertyDefinition(nameof(TaskGroups), typeof(IList<OutlookTaskGroup>));


        /// <summary>
        /// TaskFolders
        /// </summary>
        public static PropertyDefinition TaskFolders = new PropertyDefinition(nameof(TaskFolders), typeof(IList<OutlookTaskFolder>));


        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<OutlookTask>));

    }


    /// <summary>
    /// OutlookItemObjectSchema
    /// </summary>
    public class OutlookItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ChangeKey
        /// </summary>
        public static PropertyDefinition ChangeKey = new PropertyDefinition(nameof(ChangeKey), typeof(string));


        /// <summary>
        /// Categories
        /// </summary>
        public static PropertyDefinition Categories = new PropertyDefinition(nameof(Categories), typeof(IList<String>));

    }


    /// <summary>
    /// MessageObjectSchema
    /// </summary>
    public class MessageObjectSchema : OutlookItemObjectSchema
    {

        /// <summary>
        /// ReceivedDateTime
        /// </summary>
        public static PropertyDefinition ReceivedDateTime = new PropertyDefinition(nameof(ReceivedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// SentDateTime
        /// </summary>
        public static PropertyDefinition SentDateTime = new PropertyDefinition(nameof(SentDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// InternetMessageId
        /// </summary>
        public static PropertyDefinition InternetMessageId = new PropertyDefinition(nameof(InternetMessageId), typeof(string));


        /// <summary>
        /// InternetMessageHeaders
        /// </summary>
        public static PropertyDefinition InternetMessageHeaders = new PropertyDefinition(nameof(InternetMessageHeaders), typeof(IList<InternetMessageHeader>));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// Body
        /// </summary>
        public static PropertyDefinition Body = new PropertyDefinition(nameof(Body), typeof(ItemBody));


        /// <summary>
        /// BodyPreview
        /// </summary>
        public static PropertyDefinition BodyPreview = new PropertyDefinition(nameof(BodyPreview), typeof(string));


        /// <summary>
        /// Importance
        /// </summary>
        public static PropertyDefinition Importance = new PropertyDefinition(nameof(Importance), typeof(Importance));


        /// <summary>
        /// ParentFolderId
        /// </summary>
        public static PropertyDefinition ParentFolderId = new PropertyDefinition(nameof(ParentFolderId), typeof(string));


        /// <summary>
        /// Sender
        /// </summary>
        public static PropertyDefinition Sender = new PropertyDefinition(nameof(Sender), typeof(Recipient));


        /// <summary>
        /// From
        /// </summary>
        public static PropertyDefinition From = new PropertyDefinition(nameof(From), typeof(Recipient));


        /// <summary>
        /// ToRecipients
        /// </summary>
        public static PropertyDefinition ToRecipients = new PropertyDefinition(nameof(ToRecipients), typeof(IList<Recipient>));


        /// <summary>
        /// CcRecipients
        /// </summary>
        public static PropertyDefinition CcRecipients = new PropertyDefinition(nameof(CcRecipients), typeof(IList<Recipient>));


        /// <summary>
        /// BccRecipients
        /// </summary>
        public static PropertyDefinition BccRecipients = new PropertyDefinition(nameof(BccRecipients), typeof(IList<Recipient>));


        /// <summary>
        /// ReplyTo
        /// </summary>
        public static PropertyDefinition ReplyTo = new PropertyDefinition(nameof(ReplyTo), typeof(IList<Recipient>));


        /// <summary>
        /// ConversationId
        /// </summary>
        public static PropertyDefinition ConversationId = new PropertyDefinition(nameof(ConversationId), typeof(string));


        /// <summary>
        /// ConversationIndex
        /// </summary>
        public static PropertyDefinition ConversationIndex = new PropertyDefinition(nameof(ConversationIndex), typeof(string));


        /// <summary>
        /// UniqueBody
        /// </summary>
        public static PropertyDefinition UniqueBody = new PropertyDefinition(nameof(UniqueBody), typeof(ItemBody));


        /// <summary>
        /// IsDeliveryReceiptRequested
        /// </summary>
        public static PropertyDefinition IsDeliveryReceiptRequested = new PropertyDefinition(nameof(IsDeliveryReceiptRequested), typeof(bool));


        /// <summary>
        /// IsReadReceiptRequested
        /// </summary>
        public static PropertyDefinition IsReadReceiptRequested = new PropertyDefinition(nameof(IsReadReceiptRequested), typeof(bool));


        /// <summary>
        /// IsRead
        /// </summary>
        public static PropertyDefinition IsRead = new PropertyDefinition(nameof(IsRead), typeof(bool));


        /// <summary>
        /// IsDraft
        /// </summary>
        public static PropertyDefinition IsDraft = new PropertyDefinition(nameof(IsDraft), typeof(bool));


        /// <summary>
        /// WebLink
        /// </summary>
        public static PropertyDefinition WebLink = new PropertyDefinition(nameof(WebLink), typeof(string));


        /// <summary>
        /// MentionsPreview
        /// </summary>
        public static PropertyDefinition MentionsPreview = new PropertyDefinition(nameof(MentionsPreview), typeof(MentionsPreview));


        /// <summary>
        /// InferenceClassification
        /// </summary>
        public static PropertyDefinition InferenceClassification = new PropertyDefinition(nameof(InferenceClassification), typeof(InferenceClassificationType));


        /// <summary>
        /// UnsubscribeData
        /// </summary>
        public static PropertyDefinition UnsubscribeData = new PropertyDefinition(nameof(UnsubscribeData), typeof(IList<String>));


        /// <summary>
        /// UnsubscribeEnabled
        /// </summary>
        public static PropertyDefinition UnsubscribeEnabled = new PropertyDefinition(nameof(UnsubscribeEnabled), typeof(bool));


        /// <summary>
        /// Flag
        /// </summary>
        public static PropertyDefinition Flag = new PropertyDefinition(nameof(Flag), typeof(FollowupFlag));


        /// <summary>
        /// Attachments
        /// </summary>
        public static PropertyDefinition Attachments = new PropertyDefinition(nameof(Attachments), typeof(IList<Attachment>));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));


        /// <summary>
        /// Mentions
        /// </summary>
        public static PropertyDefinition Mentions = new PropertyDefinition(nameof(Mentions), typeof(IList<Mention>));

    }


    /// <summary>
    /// GroupObjectSchema
    /// </summary>
    public class GroupObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AssignedLicenses
        /// </summary>
        public static PropertyDefinition AssignedLicenses = new PropertyDefinition(nameof(AssignedLicenses), typeof(IList<AssignedLicense>));


        /// <summary>
        /// Classification
        /// </summary>
        public static PropertyDefinition Classification = new PropertyDefinition(nameof(Classification), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GroupTypes
        /// </summary>
        public static PropertyDefinition GroupTypes = new PropertyDefinition(nameof(GroupTypes), typeof(IList<String>));


        /// <summary>
        /// HasMembersWithLicenseErrors
        /// </summary>
        public static PropertyDefinition HasMembersWithLicenseErrors = new PropertyDefinition(nameof(HasMembersWithLicenseErrors), typeof(bool));


        /// <summary>
        /// LicenseProcessingState
        /// </summary>
        public static PropertyDefinition LicenseProcessingState = new PropertyDefinition(nameof(LicenseProcessingState), typeof(LicenseProcessingState));


        /// <summary>
        /// Mail
        /// </summary>
        public static PropertyDefinition Mail = new PropertyDefinition(nameof(Mail), typeof(string));


        /// <summary>
        /// MailEnabled
        /// </summary>
        public static PropertyDefinition MailEnabled = new PropertyDefinition(nameof(MailEnabled), typeof(bool));


        /// <summary>
        /// MailNickname
        /// </summary>
        public static PropertyDefinition MailNickname = new PropertyDefinition(nameof(MailNickname), typeof(string));


        /// <summary>
        /// MembershipRule
        /// </summary>
        public static PropertyDefinition MembershipRule = new PropertyDefinition(nameof(MembershipRule), typeof(string));


        /// <summary>
        /// MembershipRuleProcessingState
        /// </summary>
        public static PropertyDefinition MembershipRuleProcessingState = new PropertyDefinition(nameof(MembershipRuleProcessingState), typeof(string));


        /// <summary>
        /// OnPremisesLastSyncDateTime
        /// </summary>
        public static PropertyDefinition OnPremisesLastSyncDateTime = new PropertyDefinition(nameof(OnPremisesLastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OnPremisesProvisioningErrors
        /// </summary>
        public static PropertyDefinition OnPremisesProvisioningErrors = new PropertyDefinition(nameof(OnPremisesProvisioningErrors), typeof(IList<OnPremisesProvisioningError>));


        /// <summary>
        /// OnPremisesSecurityIdentifier
        /// </summary>
        public static PropertyDefinition OnPremisesSecurityIdentifier = new PropertyDefinition(nameof(OnPremisesSecurityIdentifier), typeof(string));


        /// <summary>
        /// OnPremisesSyncEnabled
        /// </summary>
        public static PropertyDefinition OnPremisesSyncEnabled = new PropertyDefinition(nameof(OnPremisesSyncEnabled), typeof(bool));


        /// <summary>
        /// PreferredDataLocation
        /// </summary>
        public static PropertyDefinition PreferredDataLocation = new PropertyDefinition(nameof(PreferredDataLocation), typeof(string));


        /// <summary>
        /// PreferredLanguage
        /// </summary>
        public static PropertyDefinition PreferredLanguage = new PropertyDefinition(nameof(PreferredLanguage), typeof(string));


        /// <summary>
        /// ProxyAddresses
        /// </summary>
        public static PropertyDefinition ProxyAddresses = new PropertyDefinition(nameof(ProxyAddresses), typeof(IList<String>));


        /// <summary>
        /// RenewedDateTime
        /// </summary>
        public static PropertyDefinition RenewedDateTime = new PropertyDefinition(nameof(RenewedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ResourceBehaviorOptions
        /// </summary>
        public static PropertyDefinition ResourceBehaviorOptions = new PropertyDefinition(nameof(ResourceBehaviorOptions), typeof(IList<String>));


        /// <summary>
        /// ResourceProvisioningOptions
        /// </summary>
        public static PropertyDefinition ResourceProvisioningOptions = new PropertyDefinition(nameof(ResourceProvisioningOptions), typeof(IList<String>));


        /// <summary>
        /// SecurityEnabled
        /// </summary>
        public static PropertyDefinition SecurityEnabled = new PropertyDefinition(nameof(SecurityEnabled), typeof(bool));


        /// <summary>
        /// Theme
        /// </summary>
        public static PropertyDefinition Theme = new PropertyDefinition(nameof(Theme), typeof(string));


        /// <summary>
        /// Visibility
        /// </summary>
        public static PropertyDefinition Visibility = new PropertyDefinition(nameof(Visibility), typeof(string));


        /// <summary>
        /// AccessType
        /// </summary>
        public static PropertyDefinition AccessType = new PropertyDefinition(nameof(AccessType), typeof(GroupAccessType));


        /// <summary>
        /// AllowExternalSenders
        /// </summary>
        public static PropertyDefinition AllowExternalSenders = new PropertyDefinition(nameof(AllowExternalSenders), typeof(bool));


        /// <summary>
        /// AutoSubscribeNewMembers
        /// </summary>
        public static PropertyDefinition AutoSubscribeNewMembers = new PropertyDefinition(nameof(AutoSubscribeNewMembers), typeof(bool));


        /// <summary>
        /// IsFavorite
        /// </summary>
        public static PropertyDefinition IsFavorite = new PropertyDefinition(nameof(IsFavorite), typeof(bool));


        /// <summary>
        /// IsSubscribedByMail
        /// </summary>
        public static PropertyDefinition IsSubscribedByMail = new PropertyDefinition(nameof(IsSubscribedByMail), typeof(bool));


        /// <summary>
        /// UnseenCount
        /// </summary>
        public static PropertyDefinition UnseenCount = new PropertyDefinition(nameof(UnseenCount), typeof(int));


        /// <summary>
        /// UnseenConversationsCount
        /// </summary>
        public static PropertyDefinition UnseenConversationsCount = new PropertyDefinition(nameof(UnseenConversationsCount), typeof(int));


        /// <summary>
        /// UnseenMessagesCount
        /// </summary>
        public static PropertyDefinition UnseenMessagesCount = new PropertyDefinition(nameof(UnseenMessagesCount), typeof(int));


        /// <summary>
        /// IsArchived
        /// </summary>
        public static PropertyDefinition IsArchived = new PropertyDefinition(nameof(IsArchived), typeof(bool));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// AppRoleAssignments
        /// </summary>
        public static PropertyDefinition AppRoleAssignments = new PropertyDefinition(nameof(AppRoleAssignments), typeof(IList<AppRoleAssignment>));


        /// <summary>
        /// Members
        /// </summary>
        public static PropertyDefinition Members = new PropertyDefinition(nameof(Members), typeof(IList<DirectoryObject>));


        /// <summary>
        /// MembersWithLicenseErrors
        /// </summary>
        public static PropertyDefinition MembersWithLicenseErrors = new PropertyDefinition(nameof(MembersWithLicenseErrors), typeof(IList<DirectoryObject>));


        /// <summary>
        /// MemberOf
        /// </summary>
        public static PropertyDefinition MemberOf = new PropertyDefinition(nameof(MemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// TransitiveMembers
        /// </summary>
        public static PropertyDefinition TransitiveMembers = new PropertyDefinition(nameof(TransitiveMembers), typeof(IList<DirectoryObject>));


        /// <summary>
        /// TransitiveMemberOf
        /// </summary>
        public static PropertyDefinition TransitiveMemberOf = new PropertyDefinition(nameof(TransitiveMemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// CreatedOnBehalfOf
        /// </summary>
        public static PropertyDefinition CreatedOnBehalfOf = new PropertyDefinition(nameof(CreatedOnBehalfOf), typeof(DirectoryObject));


        /// <summary>
        /// Owners
        /// </summary>
        public static PropertyDefinition Owners = new PropertyDefinition(nameof(Owners), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(IList<DirectorySetting>));


        /// <summary>
        /// Endpoints
        /// </summary>
        public static PropertyDefinition Endpoints = new PropertyDefinition(nameof(Endpoints), typeof(IList<Endpoint>));


        /// <summary>
        /// Threads
        /// </summary>
        public static PropertyDefinition Threads = new PropertyDefinition(nameof(Threads), typeof(IList<ConversationThread>));


        /// <summary>
        /// Calendar
        /// </summary>
        public static PropertyDefinition Calendar = new PropertyDefinition(nameof(Calendar), typeof(Calendar));


        /// <summary>
        /// CalendarView
        /// </summary>
        public static PropertyDefinition CalendarView = new PropertyDefinition(nameof(CalendarView), typeof(IList<Event>));


        /// <summary>
        /// Events
        /// </summary>
        public static PropertyDefinition Events = new PropertyDefinition(nameof(Events), typeof(IList<Event>));


        /// <summary>
        /// Conversations
        /// </summary>
        public static PropertyDefinition Conversations = new PropertyDefinition(nameof(Conversations), typeof(IList<Conversation>));


        /// <summary>
        /// Photo
        /// </summary>
        public static PropertyDefinition Photo = new PropertyDefinition(nameof(Photo), typeof(ProfilePhoto));


        /// <summary>
        /// Photos
        /// </summary>
        public static PropertyDefinition Photos = new PropertyDefinition(nameof(Photos), typeof(IList<ProfilePhoto>));


        /// <summary>
        /// AcceptedSenders
        /// </summary>
        public static PropertyDefinition AcceptedSenders = new PropertyDefinition(nameof(AcceptedSenders), typeof(IList<DirectoryObject>));


        /// <summary>
        /// RejectedSenders
        /// </summary>
        public static PropertyDefinition RejectedSenders = new PropertyDefinition(nameof(RejectedSenders), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Drive
        /// </summary>
        public static PropertyDefinition Drive = new PropertyDefinition(nameof(Drive), typeof(Drive));


        /// <summary>
        /// Drives
        /// </summary>
        public static PropertyDefinition Drives = new PropertyDefinition(nameof(Drives), typeof(IList<Drive>));


        /// <summary>
        /// Sites
        /// </summary>
        public static PropertyDefinition Sites = new PropertyDefinition(nameof(Sites), typeof(IList<Site>));


        /// <summary>
        /// Planner
        /// </summary>
        public static PropertyDefinition Planner = new PropertyDefinition(nameof(Planner), typeof(PlannerGroup));


        /// <summary>
        /// Onenote
        /// </summary>
        public static PropertyDefinition Onenote = new PropertyDefinition(nameof(Onenote), typeof(Onenote));


        /// <summary>
        /// Team
        /// </summary>
        public static PropertyDefinition Team = new PropertyDefinition(nameof(Team), typeof(Team));


        /// <summary>
        /// Channels
        /// </summary>
        public static PropertyDefinition Channels = new PropertyDefinition(nameof(Channels), typeof(IList<Channel>));


        /// <summary>
        /// GroupLifecyclePolicies
        /// </summary>
        public static PropertyDefinition GroupLifecyclePolicies = new PropertyDefinition(nameof(GroupLifecyclePolicies), typeof(IList<GroupLifecyclePolicy>));

    }


    /// <summary>
    /// MailFolderObjectSchema
    /// </summary>
    public class MailFolderObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ParentFolderId
        /// </summary>
        public static PropertyDefinition ParentFolderId = new PropertyDefinition(nameof(ParentFolderId), typeof(string));


        /// <summary>
        /// ChildFolderCount
        /// </summary>
        public static PropertyDefinition ChildFolderCount = new PropertyDefinition(nameof(ChildFolderCount), typeof(int));


        /// <summary>
        /// UnreadItemCount
        /// </summary>
        public static PropertyDefinition UnreadItemCount = new PropertyDefinition(nameof(UnreadItemCount), typeof(int));


        /// <summary>
        /// TotalItemCount
        /// </summary>
        public static PropertyDefinition TotalItemCount = new PropertyDefinition(nameof(TotalItemCount), typeof(int));


        /// <summary>
        /// WellKnownName
        /// </summary>
        public static PropertyDefinition WellKnownName = new PropertyDefinition(nameof(WellKnownName), typeof(string));


        /// <summary>
        /// Messages
        /// </summary>
        public static PropertyDefinition Messages = new PropertyDefinition(nameof(Messages), typeof(IList<Message>));


        /// <summary>
        /// MessageRules
        /// </summary>
        public static PropertyDefinition MessageRules = new PropertyDefinition(nameof(MessageRules), typeof(IList<MessageRule>));


        /// <summary>
        /// ChildFolders
        /// </summary>
        public static PropertyDefinition ChildFolders = new PropertyDefinition(nameof(ChildFolders), typeof(IList<MailFolder>));


        /// <summary>
        /// UserConfigurations
        /// </summary>
        public static PropertyDefinition UserConfigurations = new PropertyDefinition(nameof(UserConfigurations), typeof(IList<UserConfiguration>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));

    }


    /// <summary>
    /// CalendarObjectSchema
    /// </summary>
    public class CalendarObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(CalendarColor));


        /// <summary>
        /// HexColor
        /// </summary>
        public static PropertyDefinition HexColor = new PropertyDefinition(nameof(HexColor), typeof(string));


        /// <summary>
        /// IsDefaultCalendar
        /// </summary>
        public static PropertyDefinition IsDefaultCalendar = new PropertyDefinition(nameof(IsDefaultCalendar), typeof(bool));


        /// <summary>
        /// ChangeKey
        /// </summary>
        public static PropertyDefinition ChangeKey = new PropertyDefinition(nameof(ChangeKey), typeof(string));


        /// <summary>
        /// CanShare
        /// </summary>
        public static PropertyDefinition CanShare = new PropertyDefinition(nameof(CanShare), typeof(bool));


        /// <summary>
        /// CanViewPrivateItems
        /// </summary>
        public static PropertyDefinition CanViewPrivateItems = new PropertyDefinition(nameof(CanViewPrivateItems), typeof(bool));


        /// <summary>
        /// IsShared
        /// </summary>
        public static PropertyDefinition IsShared = new PropertyDefinition(nameof(IsShared), typeof(bool));


        /// <summary>
        /// IsSharedWithMe
        /// </summary>
        public static PropertyDefinition IsSharedWithMe = new PropertyDefinition(nameof(IsSharedWithMe), typeof(bool));


        /// <summary>
        /// CanEdit
        /// </summary>
        public static PropertyDefinition CanEdit = new PropertyDefinition(nameof(CanEdit), typeof(bool));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(EmailAddress));


        /// <summary>
        /// Events
        /// </summary>
        public static PropertyDefinition Events = new PropertyDefinition(nameof(Events), typeof(IList<Event>));


        /// <summary>
        /// CalendarView
        /// </summary>
        public static PropertyDefinition CalendarView = new PropertyDefinition(nameof(CalendarView), typeof(IList<Event>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));

    }


    /// <summary>
    /// CalendarGroupObjectSchema
    /// </summary>
    public class CalendarGroupObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// ClassId
        /// </summary>
        public static PropertyDefinition ClassId = new PropertyDefinition(nameof(ClassId), typeof(Guid));


        /// <summary>
        /// ChangeKey
        /// </summary>
        public static PropertyDefinition ChangeKey = new PropertyDefinition(nameof(ChangeKey), typeof(string));


        /// <summary>
        /// Calendars
        /// </summary>
        public static PropertyDefinition Calendars = new PropertyDefinition(nameof(Calendars), typeof(IList<Calendar>));

    }


    /// <summary>
    /// EventObjectSchema
    /// </summary>
    public class EventObjectSchema : OutlookItemObjectSchema
    {

        /// <summary>
        /// OriginalStartTimeZone
        /// </summary>
        public static PropertyDefinition OriginalStartTimeZone = new PropertyDefinition(nameof(OriginalStartTimeZone), typeof(string));


        /// <summary>
        /// OriginalEndTimeZone
        /// </summary>
        public static PropertyDefinition OriginalEndTimeZone = new PropertyDefinition(nameof(OriginalEndTimeZone), typeof(string));


        /// <summary>
        /// ResponseStatus
        /// </summary>
        public static PropertyDefinition ResponseStatus = new PropertyDefinition(nameof(ResponseStatus), typeof(ResponseStatus));


        /// <summary>
        /// Uid
        /// </summary>
        public static PropertyDefinition Uid = new PropertyDefinition(nameof(Uid), typeof(string));


        /// <summary>
        /// ReminderMinutesBeforeStart
        /// </summary>
        public static PropertyDefinition ReminderMinutesBeforeStart = new PropertyDefinition(nameof(ReminderMinutesBeforeStart), typeof(int));


        /// <summary>
        /// IsReminderOn
        /// </summary>
        public static PropertyDefinition IsReminderOn = new PropertyDefinition(nameof(IsReminderOn), typeof(bool));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// Body
        /// </summary>
        public static PropertyDefinition Body = new PropertyDefinition(nameof(Body), typeof(ItemBody));


        /// <summary>
        /// BodyPreview
        /// </summary>
        public static PropertyDefinition BodyPreview = new PropertyDefinition(nameof(BodyPreview), typeof(string));


        /// <summary>
        /// Importance
        /// </summary>
        public static PropertyDefinition Importance = new PropertyDefinition(nameof(Importance), typeof(Importance));


        /// <summary>
        /// Sensitivity
        /// </summary>
        public static PropertyDefinition Sensitivity = new PropertyDefinition(nameof(Sensitivity), typeof(Sensitivity));


        /// <summary>
        /// Start
        /// </summary>
        public static PropertyDefinition Start = new PropertyDefinition(nameof(Start), typeof(DateTimeTimeZone));


        /// <summary>
        /// OriginalStart
        /// </summary>
        public static PropertyDefinition OriginalStart = new PropertyDefinition(nameof(OriginalStart), typeof(DateTimeOffset));


        /// <summary>
        /// End
        /// </summary>
        public static PropertyDefinition End = new PropertyDefinition(nameof(End), typeof(DateTimeTimeZone));


        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(Location));


        /// <summary>
        /// Locations
        /// </summary>
        public static PropertyDefinition Locations = new PropertyDefinition(nameof(Locations), typeof(IList<Location>));


        /// <summary>
        /// IsAllDay
        /// </summary>
        public static PropertyDefinition IsAllDay = new PropertyDefinition(nameof(IsAllDay), typeof(bool));


        /// <summary>
        /// IsCancelled
        /// </summary>
        public static PropertyDefinition IsCancelled = new PropertyDefinition(nameof(IsCancelled), typeof(bool));


        /// <summary>
        /// IsOrganizer
        /// </summary>
        public static PropertyDefinition IsOrganizer = new PropertyDefinition(nameof(IsOrganizer), typeof(bool));


        /// <summary>
        /// Recurrence
        /// </summary>
        public static PropertyDefinition Recurrence = new PropertyDefinition(nameof(Recurrence), typeof(PatternedRecurrence));


        /// <summary>
        /// ResponseRequested
        /// </summary>
        public static PropertyDefinition ResponseRequested = new PropertyDefinition(nameof(ResponseRequested), typeof(bool));


        /// <summary>
        /// SeriesMasterId
        /// </summary>
        public static PropertyDefinition SeriesMasterId = new PropertyDefinition(nameof(SeriesMasterId), typeof(string));


        /// <summary>
        /// ShowAs
        /// </summary>
        public static PropertyDefinition ShowAs = new PropertyDefinition(nameof(ShowAs), typeof(FreeBusyStatus));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(EventType));


        /// <summary>
        /// Attendees
        /// </summary>
        public static PropertyDefinition Attendees = new PropertyDefinition(nameof(Attendees), typeof(IList<Attendee>));


        /// <summary>
        /// Organizer
        /// </summary>
        public static PropertyDefinition Organizer = new PropertyDefinition(nameof(Organizer), typeof(Recipient));


        /// <summary>
        /// WebLink
        /// </summary>
        public static PropertyDefinition WebLink = new PropertyDefinition(nameof(WebLink), typeof(string));


        /// <summary>
        /// OnlineMeetingUrl
        /// </summary>
        public static PropertyDefinition OnlineMeetingUrl = new PropertyDefinition(nameof(OnlineMeetingUrl), typeof(string));


        /// <summary>
        /// CreationOptions
        /// </summary>
        public static PropertyDefinition CreationOptions = new PropertyDefinition(nameof(CreationOptions), typeof(EventCreationOptions));


        /// <summary>
        /// Calendar
        /// </summary>
        public static PropertyDefinition Calendar = new PropertyDefinition(nameof(Calendar), typeof(Calendar));


        /// <summary>
        /// Instances
        /// </summary>
        public static PropertyDefinition Instances = new PropertyDefinition(nameof(Instances), typeof(IList<Event>));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// Attachments
        /// </summary>
        public static PropertyDefinition Attachments = new PropertyDefinition(nameof(Attachments), typeof(IList<Attachment>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));

    }


    /// <summary>
    /// PersonObjectSchema
    /// </summary>
    public class PersonObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GivenName
        /// </summary>
        public static PropertyDefinition GivenName = new PropertyDefinition(nameof(GivenName), typeof(string));


        /// <summary>
        /// Surname
        /// </summary>
        public static PropertyDefinition Surname = new PropertyDefinition(nameof(Surname), typeof(string));


        /// <summary>
        /// Birthday
        /// </summary>
        public static PropertyDefinition Birthday = new PropertyDefinition(nameof(Birthday), typeof(string));


        /// <summary>
        /// PersonNotes
        /// </summary>
        public static PropertyDefinition PersonNotes = new PropertyDefinition(nameof(PersonNotes), typeof(string));


        /// <summary>
        /// IsFavorite
        /// </summary>
        public static PropertyDefinition IsFavorite = new PropertyDefinition(nameof(IsFavorite), typeof(bool));


        /// <summary>
        /// EmailAddresses
        /// </summary>
        public static PropertyDefinition EmailAddresses = new PropertyDefinition(nameof(EmailAddresses), typeof(IList<RankedEmailAddress>));


        /// <summary>
        /// Phones
        /// </summary>
        public static PropertyDefinition Phones = new PropertyDefinition(nameof(Phones), typeof(IList<Phone>));


        /// <summary>
        /// PostalAddresses
        /// </summary>
        public static PropertyDefinition PostalAddresses = new PropertyDefinition(nameof(PostalAddresses), typeof(IList<Location>));


        /// <summary>
        /// Websites
        /// </summary>
        public static PropertyDefinition Websites = new PropertyDefinition(nameof(Websites), typeof(IList<Website>));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// CompanyName
        /// </summary>
        public static PropertyDefinition CompanyName = new PropertyDefinition(nameof(CompanyName), typeof(string));


        /// <summary>
        /// YomiCompany
        /// </summary>
        public static PropertyDefinition YomiCompany = new PropertyDefinition(nameof(YomiCompany), typeof(string));


        /// <summary>
        /// Department
        /// </summary>
        public static PropertyDefinition Department = new PropertyDefinition(nameof(Department), typeof(string));


        /// <summary>
        /// OfficeLocation
        /// </summary>
        public static PropertyDefinition OfficeLocation = new PropertyDefinition(nameof(OfficeLocation), typeof(string));


        /// <summary>
        /// Profession
        /// </summary>
        public static PropertyDefinition Profession = new PropertyDefinition(nameof(Profession), typeof(string));


        /// <summary>
        /// Sources
        /// </summary>
        public static PropertyDefinition Sources = new PropertyDefinition(nameof(Sources), typeof(IList<PersonDataSource>));


        /// <summary>
        /// MailboxType
        /// </summary>
        public static PropertyDefinition MailboxType = new PropertyDefinition(nameof(MailboxType), typeof(string));


        /// <summary>
        /// PersonType
        /// </summary>
        public static PropertyDefinition PersonType = new PropertyDefinition(nameof(PersonType), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// ContactObjectSchema
    /// </summary>
    public class ContactObjectSchema : OutlookItemObjectSchema
    {

        /// <summary>
        /// ParentFolderId
        /// </summary>
        public static PropertyDefinition ParentFolderId = new PropertyDefinition(nameof(ParentFolderId), typeof(string));


        /// <summary>
        /// Birthday
        /// </summary>
        public static PropertyDefinition Birthday = new PropertyDefinition(nameof(Birthday), typeof(DateTimeOffset));


        /// <summary>
        /// FileAs
        /// </summary>
        public static PropertyDefinition FileAs = new PropertyDefinition(nameof(FileAs), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GivenName
        /// </summary>
        public static PropertyDefinition GivenName = new PropertyDefinition(nameof(GivenName), typeof(string));


        /// <summary>
        /// Initials
        /// </summary>
        public static PropertyDefinition Initials = new PropertyDefinition(nameof(Initials), typeof(string));


        /// <summary>
        /// MiddleName
        /// </summary>
        public static PropertyDefinition MiddleName = new PropertyDefinition(nameof(MiddleName), typeof(string));


        /// <summary>
        /// NickName
        /// </summary>
        public static PropertyDefinition NickName = new PropertyDefinition(nameof(NickName), typeof(string));


        /// <summary>
        /// Surname
        /// </summary>
        public static PropertyDefinition Surname = new PropertyDefinition(nameof(Surname), typeof(string));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// YomiGivenName
        /// </summary>
        public static PropertyDefinition YomiGivenName = new PropertyDefinition(nameof(YomiGivenName), typeof(string));


        /// <summary>
        /// YomiSurname
        /// </summary>
        public static PropertyDefinition YomiSurname = new PropertyDefinition(nameof(YomiSurname), typeof(string));


        /// <summary>
        /// YomiCompanyName
        /// </summary>
        public static PropertyDefinition YomiCompanyName = new PropertyDefinition(nameof(YomiCompanyName), typeof(string));


        /// <summary>
        /// Generation
        /// </summary>
        public static PropertyDefinition Generation = new PropertyDefinition(nameof(Generation), typeof(string));


        /// <summary>
        /// EmailAddresses
        /// </summary>
        public static PropertyDefinition EmailAddresses = new PropertyDefinition(nameof(EmailAddresses), typeof(IList<TypedEmailAddress>));


        /// <summary>
        /// Websites
        /// </summary>
        public static PropertyDefinition Websites = new PropertyDefinition(nameof(Websites), typeof(IList<Website>));


        /// <summary>
        /// ImAddresses
        /// </summary>
        public static PropertyDefinition ImAddresses = new PropertyDefinition(nameof(ImAddresses), typeof(IList<String>));


        /// <summary>
        /// JobTitle
        /// </summary>
        public static PropertyDefinition JobTitle = new PropertyDefinition(nameof(JobTitle), typeof(string));


        /// <summary>
        /// CompanyName
        /// </summary>
        public static PropertyDefinition CompanyName = new PropertyDefinition(nameof(CompanyName), typeof(string));


        /// <summary>
        /// Department
        /// </summary>
        public static PropertyDefinition Department = new PropertyDefinition(nameof(Department), typeof(string));


        /// <summary>
        /// OfficeLocation
        /// </summary>
        public static PropertyDefinition OfficeLocation = new PropertyDefinition(nameof(OfficeLocation), typeof(string));


        /// <summary>
        /// Profession
        /// </summary>
        public static PropertyDefinition Profession = new PropertyDefinition(nameof(Profession), typeof(string));


        /// <summary>
        /// AssistantName
        /// </summary>
        public static PropertyDefinition AssistantName = new PropertyDefinition(nameof(AssistantName), typeof(string));


        /// <summary>
        /// Manager
        /// </summary>
        public static PropertyDefinition Manager = new PropertyDefinition(nameof(Manager), typeof(string));


        /// <summary>
        /// Phones
        /// </summary>
        public static PropertyDefinition Phones = new PropertyDefinition(nameof(Phones), typeof(IList<Phone>));


        /// <summary>
        /// PostalAddresses
        /// </summary>
        public static PropertyDefinition PostalAddresses = new PropertyDefinition(nameof(PostalAddresses), typeof(IList<PhysicalAddress>));


        /// <summary>
        /// SpouseName
        /// </summary>
        public static PropertyDefinition SpouseName = new PropertyDefinition(nameof(SpouseName), typeof(string));


        /// <summary>
        /// PersonalNotes
        /// </summary>
        public static PropertyDefinition PersonalNotes = new PropertyDefinition(nameof(PersonalNotes), typeof(string));


        /// <summary>
        /// Children
        /// </summary>
        public static PropertyDefinition Children = new PropertyDefinition(nameof(Children), typeof(IList<String>));


        /// <summary>
        /// WeddingAnniversary
        /// </summary>
        public static PropertyDefinition WeddingAnniversary = new PropertyDefinition(nameof(WeddingAnniversary), typeof(DateTime));


        /// <summary>
        /// Gender
        /// </summary>
        public static PropertyDefinition Gender = new PropertyDefinition(nameof(Gender), typeof(string));


        /// <summary>
        /// IsFavorite
        /// </summary>
        public static PropertyDefinition IsFavorite = new PropertyDefinition(nameof(IsFavorite), typeof(bool));


        /// <summary>
        /// Flag
        /// </summary>
        public static PropertyDefinition Flag = new PropertyDefinition(nameof(Flag), typeof(FollowupFlag));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));


        /// <summary>
        /// Photo
        /// </summary>
        public static PropertyDefinition Photo = new PropertyDefinition(nameof(Photo), typeof(ProfilePhoto));

    }


    /// <summary>
    /// ContactFolderObjectSchema
    /// </summary>
    public class ContactFolderObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ParentFolderId
        /// </summary>
        public static PropertyDefinition ParentFolderId = new PropertyDefinition(nameof(ParentFolderId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// WellKnownName
        /// </summary>
        public static PropertyDefinition WellKnownName = new PropertyDefinition(nameof(WellKnownName), typeof(string));


        /// <summary>
        /// Contacts
        /// </summary>
        public static PropertyDefinition Contacts = new PropertyDefinition(nameof(Contacts), typeof(IList<Contact>));


        /// <summary>
        /// ChildFolders
        /// </summary>
        public static PropertyDefinition ChildFolders = new PropertyDefinition(nameof(ChildFolders), typeof(IList<ContactFolder>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));

    }


    /// <summary>
    /// InferenceClassificationObjectSchema
    /// </summary>
    public class InferenceClassificationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Overrides
        /// </summary>
        public static PropertyDefinition Overrides = new PropertyDefinition(nameof(Overrides), typeof(IList<InferenceClassificationOverride>));

    }


    /// <summary>
    /// ProfilePhotoObjectSchema
    /// </summary>
    public class ProfilePhotoObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Height
        /// </summary>
        public static PropertyDefinition Height = new PropertyDefinition(nameof(Height), typeof(int));


        /// <summary>
        /// Width
        /// </summary>
        public static PropertyDefinition Width = new PropertyDefinition(nameof(Width), typeof(int));

    }


    /// <summary>
    /// BaseItemObjectSchema
    /// </summary>
    public class BaseItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// ETag
        /// </summary>
        public static PropertyDefinition ETag = new PropertyDefinition(nameof(ETag), typeof(string));


        /// <summary>
        /// LastModifiedBy
        /// </summary>
        public static PropertyDefinition LastModifiedBy = new PropertyDefinition(nameof(LastModifiedBy), typeof(IdentitySet));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// ParentReference
        /// </summary>
        public static PropertyDefinition ParentReference = new PropertyDefinition(nameof(ParentReference), typeof(ItemReference));


        /// <summary>
        /// WebUrl
        /// </summary>
        public static PropertyDefinition WebUrl = new PropertyDefinition(nameof(WebUrl), typeof(string));


        /// <summary>
        /// CreatedByUser
        /// </summary>
        public static PropertyDefinition CreatedByUser = new PropertyDefinition(nameof(CreatedByUser), typeof(User));


        /// <summary>
        /// LastModifiedByUser
        /// </summary>
        public static PropertyDefinition LastModifiedByUser = new PropertyDefinition(nameof(LastModifiedByUser), typeof(User));

    }


    /// <summary>
    /// DriveObjectSchema
    /// </summary>
    public class DriveObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// DriveType
        /// </summary>
        public static PropertyDefinition DriveType = new PropertyDefinition(nameof(DriveType), typeof(string));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(IdentitySet));


        /// <summary>
        /// Quota
        /// </summary>
        public static PropertyDefinition Quota = new PropertyDefinition(nameof(Quota), typeof(Quota));


        /// <summary>
        /// SharePointIds
        /// </summary>
        public static PropertyDefinition SharePointIds = new PropertyDefinition(nameof(SharePointIds), typeof(SharepointIds));


        /// <summary>
        /// System
        /// </summary>
        public static PropertyDefinition System = new PropertyDefinition(nameof(System), typeof(SystemFacet));


        /// <summary>
        /// Activities
        /// </summary>
        public static PropertyDefinition Activities = new PropertyDefinition(nameof(Activities), typeof(IList<ItemActivityOLD>));


        /// <summary>
        /// Following
        /// </summary>
        public static PropertyDefinition Following = new PropertyDefinition(nameof(Following), typeof(IList<DriveItem>));


        /// <summary>
        /// Items
        /// </summary>
        public static PropertyDefinition Items = new PropertyDefinition(nameof(Items), typeof(IList<DriveItem>));


        /// <summary>
        /// List
        /// </summary>
        public static PropertyDefinition List = new PropertyDefinition(nameof(List), typeof(List));


        /// <summary>
        /// Root
        /// </summary>
        public static PropertyDefinition Root = new PropertyDefinition(nameof(Root), typeof(DriveItem));


        /// <summary>
        /// Special
        /// </summary>
        public static PropertyDefinition Special = new PropertyDefinition(nameof(Special), typeof(IList<DriveItem>));

    }


    /// <summary>
    /// OfficeGraphInsightsObjectSchema
    /// </summary>
    public class OfficeGraphInsightsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Trending
        /// </summary>
        public static PropertyDefinition Trending = new PropertyDefinition(nameof(Trending), typeof(IList<Trending>));


        /// <summary>
        /// Shared
        /// </summary>
        public static PropertyDefinition Shared = new PropertyDefinition(nameof(Shared), typeof(IList<SharedInsight>));


        /// <summary>
        /// Used
        /// </summary>
        public static PropertyDefinition Used = new PropertyDefinition(nameof(Used), typeof(IList<UsedInsight>));

    }


    /// <summary>
    /// UserSettingsObjectSchema
    /// </summary>
    public class UserSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ContributionToContentDiscoveryDisabled
        /// </summary>
        public static PropertyDefinition ContributionToContentDiscoveryDisabled = new PropertyDefinition(nameof(ContributionToContentDiscoveryDisabled), typeof(bool));


        /// <summary>
        /// ContributionToContentDiscoveryAsOrganizationDisabled
        /// </summary>
        public static PropertyDefinition ContributionToContentDiscoveryAsOrganizationDisabled = new PropertyDefinition(nameof(ContributionToContentDiscoveryAsOrganizationDisabled), typeof(bool));

    }


    /// <summary>
    /// PlannerUserObjectSchema
    /// </summary>
    public class PlannerUserObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// FavoritePlanReferences
        /// </summary>
        public static PropertyDefinition FavoritePlanReferences = new PropertyDefinition(nameof(FavoritePlanReferences), typeof(PlannerFavoritePlanReferenceCollection));


        /// <summary>
        /// RecentPlanReferences
        /// </summary>
        public static PropertyDefinition RecentPlanReferences = new PropertyDefinition(nameof(RecentPlanReferences), typeof(PlannerRecentPlanReferenceCollection));


        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<PlannerTask>));


        /// <summary>
        /// Plans
        /// </summary>
        public static PropertyDefinition Plans = new PropertyDefinition(nameof(Plans), typeof(IList<PlannerPlan>));


        /// <summary>
        /// FavoritePlans
        /// </summary>
        public static PropertyDefinition FavoritePlans = new PropertyDefinition(nameof(FavoritePlans), typeof(IList<PlannerPlan>));


        /// <summary>
        /// RecentPlans
        /// </summary>
        public static PropertyDefinition RecentPlans = new PropertyDefinition(nameof(RecentPlans), typeof(IList<PlannerPlan>));


        /// <summary>
        /// All
        /// </summary>
        public static PropertyDefinition All = new PropertyDefinition(nameof(All), typeof(IList<PlannerDelta>));

    }


    /// <summary>
    /// OnenoteObjectSchema
    /// </summary>
    public class OnenoteObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Notebooks
        /// </summary>
        public static PropertyDefinition Notebooks = new PropertyDefinition(nameof(Notebooks), typeof(IList<Notebook>));


        /// <summary>
        /// Sections
        /// </summary>
        public static PropertyDefinition Sections = new PropertyDefinition(nameof(Sections), typeof(IList<OnenoteSection>));


        /// <summary>
        /// SectionGroups
        /// </summary>
        public static PropertyDefinition SectionGroups = new PropertyDefinition(nameof(SectionGroups), typeof(IList<SectionGroup>));


        /// <summary>
        /// Pages
        /// </summary>
        public static PropertyDefinition Pages = new PropertyDefinition(nameof(Pages), typeof(IList<OnenotePage>));


        /// <summary>
        /// Resources
        /// </summary>
        public static PropertyDefinition Resources = new PropertyDefinition(nameof(Resources), typeof(IList<OnenoteResource>));


        /// <summary>
        /// Operations
        /// </summary>
        public static PropertyDefinition Operations = new PropertyDefinition(nameof(Operations), typeof(IList<OnenoteOperation>));

    }


    /// <summary>
    /// ManagedDeviceObjectSchema
    /// </summary>
    public class ManagedDeviceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// HardwareInformation
        /// </summary>
        public static PropertyDefinition HardwareInformation = new PropertyDefinition(nameof(HardwareInformation), typeof(HardwareInformation));


        /// <summary>
        /// OwnerType
        /// </summary>
        public static PropertyDefinition OwnerType = new PropertyDefinition(nameof(OwnerType), typeof(OwnerType));


        /// <summary>
        /// ManagedDeviceOwnerType
        /// </summary>
        public static PropertyDefinition ManagedDeviceOwnerType = new PropertyDefinition(nameof(ManagedDeviceOwnerType), typeof(ManagedDeviceOwnerType));


        /// <summary>
        /// DeviceActionResults
        /// </summary>
        public static PropertyDefinition DeviceActionResults = new PropertyDefinition(nameof(DeviceActionResults), typeof(IList<DeviceActionResult>));


        /// <summary>
        /// ManagementState
        /// </summary>
        public static PropertyDefinition ManagementState = new PropertyDefinition(nameof(ManagementState), typeof(ManagementState));


        /// <summary>
        /// EnrolledDateTime
        /// </summary>
        public static PropertyDefinition EnrolledDateTime = new PropertyDefinition(nameof(EnrolledDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ChassisType
        /// </summary>
        public static PropertyDefinition ChassisType = new PropertyDefinition(nameof(ChassisType), typeof(ChassisType));


        /// <summary>
        /// OperatingSystem
        /// </summary>
        public static PropertyDefinition OperatingSystem = new PropertyDefinition(nameof(OperatingSystem), typeof(string));


        /// <summary>
        /// DeviceType
        /// </summary>
        public static PropertyDefinition DeviceType = new PropertyDefinition(nameof(DeviceType), typeof(DeviceType));


        /// <summary>
        /// ComplianceState
        /// </summary>
        public static PropertyDefinition ComplianceState = new PropertyDefinition(nameof(ComplianceState), typeof(ComplianceState));


        /// <summary>
        /// JailBroken
        /// </summary>
        public static PropertyDefinition JailBroken = new PropertyDefinition(nameof(JailBroken), typeof(string));


        /// <summary>
        /// ManagementAgent
        /// </summary>
        public static PropertyDefinition ManagementAgent = new PropertyDefinition(nameof(ManagementAgent), typeof(ManagementAgentType));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// EasActivated
        /// </summary>
        public static PropertyDefinition EasActivated = new PropertyDefinition(nameof(EasActivated), typeof(bool));


        /// <summary>
        /// EasDeviceId
        /// </summary>
        public static PropertyDefinition EasDeviceId = new PropertyDefinition(nameof(EasDeviceId), typeof(string));


        /// <summary>
        /// EasActivationDateTime
        /// </summary>
        public static PropertyDefinition EasActivationDateTime = new PropertyDefinition(nameof(EasActivationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AadRegistered
        /// </summary>
        public static PropertyDefinition AadRegistered = new PropertyDefinition(nameof(AadRegistered), typeof(bool));


        /// <summary>
        /// AzureADRegistered
        /// </summary>
        public static PropertyDefinition AzureADRegistered = new PropertyDefinition(nameof(AzureADRegistered), typeof(bool));


        /// <summary>
        /// DeviceEnrollmentType
        /// </summary>
        public static PropertyDefinition DeviceEnrollmentType = new PropertyDefinition(nameof(DeviceEnrollmentType), typeof(DeviceEnrollmentType));


        /// <summary>
        /// LostModeState
        /// </summary>
        public static PropertyDefinition LostModeState = new PropertyDefinition(nameof(LostModeState), typeof(LostModeState));


        /// <summary>
        /// ActivationLockBypassCode
        /// </summary>
        public static PropertyDefinition ActivationLockBypassCode = new PropertyDefinition(nameof(ActivationLockBypassCode), typeof(string));


        /// <summary>
        /// EmailAddress
        /// </summary>
        public static PropertyDefinition EmailAddress = new PropertyDefinition(nameof(EmailAddress), typeof(string));


        /// <summary>
        /// AzureActiveDirectoryDeviceId
        /// </summary>
        public static PropertyDefinition AzureActiveDirectoryDeviceId = new PropertyDefinition(nameof(AzureActiveDirectoryDeviceId), typeof(string));


        /// <summary>
        /// AzureADDeviceId
        /// </summary>
        public static PropertyDefinition AzureADDeviceId = new PropertyDefinition(nameof(AzureADDeviceId), typeof(string));


        /// <summary>
        /// DeviceRegistrationState
        /// </summary>
        public static PropertyDefinition DeviceRegistrationState = new PropertyDefinition(nameof(DeviceRegistrationState), typeof(DeviceRegistrationState));


        /// <summary>
        /// DeviceCategoryDisplayName
        /// </summary>
        public static PropertyDefinition DeviceCategoryDisplayName = new PropertyDefinition(nameof(DeviceCategoryDisplayName), typeof(string));


        /// <summary>
        /// IsSupervised
        /// </summary>
        public static PropertyDefinition IsSupervised = new PropertyDefinition(nameof(IsSupervised), typeof(bool));


        /// <summary>
        /// ExchangeLastSuccessfulSyncDateTime
        /// </summary>
        public static PropertyDefinition ExchangeLastSuccessfulSyncDateTime = new PropertyDefinition(nameof(ExchangeLastSuccessfulSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExchangeAccessState
        /// </summary>
        public static PropertyDefinition ExchangeAccessState = new PropertyDefinition(nameof(ExchangeAccessState), typeof(DeviceManagementExchangeAccessState));


        /// <summary>
        /// ExchangeAccessStateReason
        /// </summary>
        public static PropertyDefinition ExchangeAccessStateReason = new PropertyDefinition(nameof(ExchangeAccessStateReason), typeof(DeviceManagementExchangeAccessStateReason));


        /// <summary>
        /// RemoteAssistanceSessionUrl
        /// </summary>
        public static PropertyDefinition RemoteAssistanceSessionUrl = new PropertyDefinition(nameof(RemoteAssistanceSessionUrl), typeof(string));


        /// <summary>
        /// RemoteAssistanceSessionErrorDetails
        /// </summary>
        public static PropertyDefinition RemoteAssistanceSessionErrorDetails = new PropertyDefinition(nameof(RemoteAssistanceSessionErrorDetails), typeof(string));


        /// <summary>
        /// IsEncrypted
        /// </summary>
        public static PropertyDefinition IsEncrypted = new PropertyDefinition(nameof(IsEncrypted), typeof(bool));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// Model
        /// </summary>
        public static PropertyDefinition Model = new PropertyDefinition(nameof(Model), typeof(string));


        /// <summary>
        /// Manufacturer
        /// </summary>
        public static PropertyDefinition Manufacturer = new PropertyDefinition(nameof(Manufacturer), typeof(string));


        /// <summary>
        /// Imei
        /// </summary>
        public static PropertyDefinition Imei = new PropertyDefinition(nameof(Imei), typeof(string));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// SerialNumber
        /// </summary>
        public static PropertyDefinition SerialNumber = new PropertyDefinition(nameof(SerialNumber), typeof(string));


        /// <summary>
        /// PhoneNumber
        /// </summary>
        public static PropertyDefinition PhoneNumber = new PropertyDefinition(nameof(PhoneNumber), typeof(string));


        /// <summary>
        /// AndroidSecurityPatchLevel
        /// </summary>
        public static PropertyDefinition AndroidSecurityPatchLevel = new PropertyDefinition(nameof(AndroidSecurityPatchLevel), typeof(string));


        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// ConfigurationManagerClientEnabledFeatures
        /// </summary>
        public static PropertyDefinition ConfigurationManagerClientEnabledFeatures = new PropertyDefinition(nameof(ConfigurationManagerClientEnabledFeatures), typeof(ConfigurationManagerClientEnabledFeatures));


        /// <summary>
        /// WiFiMacAddress
        /// </summary>
        public static PropertyDefinition WiFiMacAddress = new PropertyDefinition(nameof(WiFiMacAddress), typeof(string));


        /// <summary>
        /// DeviceHealthAttestationState
        /// </summary>
        public static PropertyDefinition DeviceHealthAttestationState = new PropertyDefinition(nameof(DeviceHealthAttestationState), typeof(DeviceHealthAttestationState));


        /// <summary>
        /// SubscriberCarrier
        /// </summary>
        public static PropertyDefinition SubscriberCarrier = new PropertyDefinition(nameof(SubscriberCarrier), typeof(string));


        /// <summary>
        /// Meid
        /// </summary>
        public static PropertyDefinition Meid = new PropertyDefinition(nameof(Meid), typeof(string));


        /// <summary>
        /// TotalStorageSpaceInBytes
        /// </summary>
        public static PropertyDefinition TotalStorageSpaceInBytes = new PropertyDefinition(nameof(TotalStorageSpaceInBytes), typeof(Int64));


        /// <summary>
        /// FreeStorageSpaceInBytes
        /// </summary>
        public static PropertyDefinition FreeStorageSpaceInBytes = new PropertyDefinition(nameof(FreeStorageSpaceInBytes), typeof(Int64));


        /// <summary>
        /// ManagedDeviceName
        /// </summary>
        public static PropertyDefinition ManagedDeviceName = new PropertyDefinition(nameof(ManagedDeviceName), typeof(string));


        /// <summary>
        /// PartnerReportedThreatState
        /// </summary>
        public static PropertyDefinition PartnerReportedThreatState = new PropertyDefinition(nameof(PartnerReportedThreatState), typeof(ManagedDevicePartnerReportedHealthState));


        /// <summary>
        /// UsersLoggedOn
        /// </summary>
        public static PropertyDefinition UsersLoggedOn = new PropertyDefinition(nameof(UsersLoggedOn), typeof(IList<LoggedOnUser>));


        /// <summary>
        /// PreferMdmOverGroupPolicyAppliedDateTime
        /// </summary>
        public static PropertyDefinition PreferMdmOverGroupPolicyAppliedDateTime = new PropertyDefinition(nameof(PreferMdmOverGroupPolicyAppliedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AutopilotEnrolled
        /// </summary>
        public static PropertyDefinition AutopilotEnrolled = new PropertyDefinition(nameof(AutopilotEnrolled), typeof(bool));


        /// <summary>
        /// RequireUserEnrollmentApproval
        /// </summary>
        public static PropertyDefinition RequireUserEnrollmentApproval = new PropertyDefinition(nameof(RequireUserEnrollmentApproval), typeof(bool));


        /// <summary>
        /// ManagementCertificateExpirationDate
        /// </summary>
        public static PropertyDefinition ManagementCertificateExpirationDate = new PropertyDefinition(nameof(ManagementCertificateExpirationDate), typeof(DateTimeOffset));


        /// <summary>
        /// Iccid
        /// </summary>
        public static PropertyDefinition Iccid = new PropertyDefinition(nameof(Iccid), typeof(string));


        /// <summary>
        /// Udid
        /// </summary>
        public static PropertyDefinition Udid = new PropertyDefinition(nameof(Udid), typeof(string));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// WindowsActiveMalwareCount
        /// </summary>
        public static PropertyDefinition WindowsActiveMalwareCount = new PropertyDefinition(nameof(WindowsActiveMalwareCount), typeof(int));


        /// <summary>
        /// WindowsRemediatedMalwareCount
        /// </summary>
        public static PropertyDefinition WindowsRemediatedMalwareCount = new PropertyDefinition(nameof(WindowsRemediatedMalwareCount), typeof(int));


        /// <summary>
        /// Notes
        /// </summary>
        public static PropertyDefinition Notes = new PropertyDefinition(nameof(Notes), typeof(string));


        /// <summary>
        /// ConfigurationManagerClientHealthState
        /// </summary>
        public static PropertyDefinition ConfigurationManagerClientHealthState = new PropertyDefinition(nameof(ConfigurationManagerClientHealthState), typeof(ConfigurationManagerClientHealthState));


        /// <summary>
        /// DeviceConfigurationStates
        /// </summary>
        public static PropertyDefinition DeviceConfigurationStates = new PropertyDefinition(nameof(DeviceConfigurationStates), typeof(IList<DeviceConfigurationState>));


        /// <summary>
        /// DetectedApps
        /// </summary>
        public static PropertyDefinition DetectedApps = new PropertyDefinition(nameof(DetectedApps), typeof(IList<DetectedApp>));


        /// <summary>
        /// DeviceCategory
        /// </summary>
        public static PropertyDefinition DeviceCategory = new PropertyDefinition(nameof(DeviceCategory), typeof(DeviceCategory));


        /// <summary>
        /// WindowsProtectionState
        /// </summary>
        public static PropertyDefinition WindowsProtectionState = new PropertyDefinition(nameof(WindowsProtectionState), typeof(WindowsProtectionState));


        /// <summary>
        /// DeviceCompliancePolicyStates
        /// </summary>
        public static PropertyDefinition DeviceCompliancePolicyStates = new PropertyDefinition(nameof(DeviceCompliancePolicyStates), typeof(IList<DeviceCompliancePolicyState>));


        /// <summary>
        /// ManagedDeviceMobileAppConfigurationStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceMobileAppConfigurationStates = new PropertyDefinition(nameof(ManagedDeviceMobileAppConfigurationStates), typeof(IList<ManagedDeviceMobileAppConfigurationState>));

    }


    /// <summary>
    /// DeviceEnrollmentConfigurationObjectSchema
    /// </summary>
    public class DeviceEnrollmentConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Priority
        /// </summary>
        public static PropertyDefinition Priority = new PropertyDefinition(nameof(Priority), typeof(int));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<EnrollmentConfigurationAssignment>));

    }


    /// <summary>
    /// ManagedAppRegistrationObjectSchema
    /// </summary>
    public class ManagedAppRegistrationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ApplicationVersion
        /// </summary>
        public static PropertyDefinition ApplicationVersion = new PropertyDefinition(nameof(ApplicationVersion), typeof(string));


        /// <summary>
        /// ManagementSdkVersion
        /// </summary>
        public static PropertyDefinition ManagementSdkVersion = new PropertyDefinition(nameof(ManagementSdkVersion), typeof(string));


        /// <summary>
        /// PlatformVersion
        /// </summary>
        public static PropertyDefinition PlatformVersion = new PropertyDefinition(nameof(PlatformVersion), typeof(string));


        /// <summary>
        /// DeviceType
        /// </summary>
        public static PropertyDefinition DeviceType = new PropertyDefinition(nameof(DeviceType), typeof(string));


        /// <summary>
        /// DeviceTag
        /// </summary>
        public static PropertyDefinition DeviceTag = new PropertyDefinition(nameof(DeviceTag), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// ManagedDeviceId
        /// </summary>
        public static PropertyDefinition ManagedDeviceId = new PropertyDefinition(nameof(ManagedDeviceId), typeof(string));


        /// <summary>
        /// AzureADDeviceId
        /// </summary>
        public static PropertyDefinition AzureADDeviceId = new PropertyDefinition(nameof(AzureADDeviceId), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// DeviceManufacturer
        /// </summary>
        public static PropertyDefinition DeviceManufacturer = new PropertyDefinition(nameof(DeviceManufacturer), typeof(string));


        /// <summary>
        /// FlaggedReasons
        /// </summary>
        public static PropertyDefinition FlaggedReasons = new PropertyDefinition(nameof(FlaggedReasons), typeof(IList<ManagedAppFlaggedReason>));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// AppIdentifier
        /// </summary>
        public static PropertyDefinition AppIdentifier = new PropertyDefinition(nameof(AppIdentifier), typeof(MobileAppIdentifier));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));


        /// <summary>
        /// AppliedPolicies
        /// </summary>
        public static PropertyDefinition AppliedPolicies = new PropertyDefinition(nameof(AppliedPolicies), typeof(IList<ManagedAppPolicy>));


        /// <summary>
        /// IntendedPolicies
        /// </summary>
        public static PropertyDefinition IntendedPolicies = new PropertyDefinition(nameof(IntendedPolicies), typeof(IList<ManagedAppPolicy>));


        /// <summary>
        /// Operations
        /// </summary>
        public static PropertyDefinition Operations = new PropertyDefinition(nameof(Operations), typeof(IList<ManagedAppOperation>));

    }


    /// <summary>
    /// WindowsInformationProtectionDeviceRegistrationObjectSchema
    /// </summary>
    public class WindowsInformationProtectionDeviceRegistrationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// DeviceRegistrationId
        /// </summary>
        public static PropertyDefinition DeviceRegistrationId = new PropertyDefinition(nameof(DeviceRegistrationId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// DeviceType
        /// </summary>
        public static PropertyDefinition DeviceType = new PropertyDefinition(nameof(DeviceType), typeof(string));


        /// <summary>
        /// DeviceMacAddress
        /// </summary>
        public static PropertyDefinition DeviceMacAddress = new PropertyDefinition(nameof(DeviceMacAddress), typeof(string));


        /// <summary>
        /// LastCheckInDateTime
        /// </summary>
        public static PropertyDefinition LastCheckInDateTime = new PropertyDefinition(nameof(LastCheckInDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// DeviceObjectSchema
    /// </summary>
    public class DeviceObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AccountEnabled
        /// </summary>
        public static PropertyDefinition AccountEnabled = new PropertyDefinition(nameof(AccountEnabled), typeof(bool));


        /// <summary>
        /// AlternativeSecurityIds
        /// </summary>
        public static PropertyDefinition AlternativeSecurityIds = new PropertyDefinition(nameof(AlternativeSecurityIds), typeof(IList<AlternativeSecurityId>));


        /// <summary>
        /// ApproximateLastSignInDateTime
        /// </summary>
        public static PropertyDefinition ApproximateLastSignInDateTime = new PropertyDefinition(nameof(ApproximateLastSignInDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ComplianceExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceExpirationDateTime = new PropertyDefinition(nameof(ComplianceExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// DeviceMetadata
        /// </summary>
        public static PropertyDefinition DeviceMetadata = new PropertyDefinition(nameof(DeviceMetadata), typeof(string));


        /// <summary>
        /// DeviceVersion
        /// </summary>
        public static PropertyDefinition DeviceVersion = new PropertyDefinition(nameof(DeviceVersion), typeof(int));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsCompliant
        /// </summary>
        public static PropertyDefinition IsCompliant = new PropertyDefinition(nameof(IsCompliant), typeof(bool));


        /// <summary>
        /// IsManaged
        /// </summary>
        public static PropertyDefinition IsManaged = new PropertyDefinition(nameof(IsManaged), typeof(bool));


        /// <summary>
        /// OnPremisesLastSyncDateTime
        /// </summary>
        public static PropertyDefinition OnPremisesLastSyncDateTime = new PropertyDefinition(nameof(OnPremisesLastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OnPremisesSyncEnabled
        /// </summary>
        public static PropertyDefinition OnPremisesSyncEnabled = new PropertyDefinition(nameof(OnPremisesSyncEnabled), typeof(bool));


        /// <summary>
        /// OperatingSystem
        /// </summary>
        public static PropertyDefinition OperatingSystem = new PropertyDefinition(nameof(OperatingSystem), typeof(string));


        /// <summary>
        /// OperatingSystemVersion
        /// </summary>
        public static PropertyDefinition OperatingSystemVersion = new PropertyDefinition(nameof(OperatingSystemVersion), typeof(string));


        /// <summary>
        /// PhysicalIds
        /// </summary>
        public static PropertyDefinition PhysicalIds = new PropertyDefinition(nameof(PhysicalIds), typeof(IList<String>));


        /// <summary>
        /// ProfileType
        /// </summary>
        public static PropertyDefinition ProfileType = new PropertyDefinition(nameof(ProfileType), typeof(string));


        /// <summary>
        /// SystemLabels
        /// </summary>
        public static PropertyDefinition SystemLabels = new PropertyDefinition(nameof(SystemLabels), typeof(IList<String>));


        /// <summary>
        /// TrustType
        /// </summary>
        public static PropertyDefinition TrustType = new PropertyDefinition(nameof(TrustType), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Manufacturer
        /// </summary>
        public static PropertyDefinition Manufacturer = new PropertyDefinition(nameof(Manufacturer), typeof(string));


        /// <summary>
        /// Model
        /// </summary>
        public static PropertyDefinition Model = new PropertyDefinition(nameof(Model), typeof(string));


        /// <summary>
        /// Kind
        /// </summary>
        public static PropertyDefinition Kind = new PropertyDefinition(nameof(Kind), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(string));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// MemberOf
        /// </summary>
        public static PropertyDefinition MemberOf = new PropertyDefinition(nameof(MemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// RegisteredOwners
        /// </summary>
        public static PropertyDefinition RegisteredOwners = new PropertyDefinition(nameof(RegisteredOwners), typeof(IList<DirectoryObject>));


        /// <summary>
        /// RegisteredUsers
        /// </summary>
        public static PropertyDefinition RegisteredUsers = new PropertyDefinition(nameof(RegisteredUsers), typeof(IList<DirectoryObject>));


        /// <summary>
        /// TransitiveMemberOf
        /// </summary>
        public static PropertyDefinition TransitiveMemberOf = new PropertyDefinition(nameof(TransitiveMemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Commands
        /// </summary>
        public static PropertyDefinition Commands = new PropertyDefinition(nameof(Commands), typeof(IList<Command>));

    }


    /// <summary>
    /// DeviceManagementTroubleshootingEventObjectSchema
    /// </summary>
    public class DeviceManagementTroubleshootingEventObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// EventDateTime
        /// </summary>
        public static PropertyDefinition EventDateTime = new PropertyDefinition(nameof(EventDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CorrelationId
        /// </summary>
        public static PropertyDefinition CorrelationId = new PropertyDefinition(nameof(CorrelationId), typeof(string));


        /// <summary>
        /// TroubleshootingErrorDetails
        /// </summary>
        public static PropertyDefinition TroubleshootingErrorDetails = new PropertyDefinition(nameof(TroubleshootingErrorDetails), typeof(DeviceManagementTroubleshootingErrorDetails));


        /// <summary>
        /// EventName
        /// </summary>
        public static PropertyDefinition EventName = new PropertyDefinition(nameof(EventName), typeof(string));


        /// <summary>
        /// AdditionalInformation
        /// </summary>
        public static PropertyDefinition AdditionalInformation = new PropertyDefinition(nameof(AdditionalInformation), typeof(IList<KeyValuePair>));

    }


    /// <summary>
    /// MobileAppIntentAndStateObjectSchema
    /// </summary>
    public class MobileAppIntentAndStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ManagedDeviceIdentifier
        /// </summary>
        public static PropertyDefinition ManagedDeviceIdentifier = new PropertyDefinition(nameof(ManagedDeviceIdentifier), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// MobileAppList
        /// </summary>
        public static PropertyDefinition MobileAppList = new PropertyDefinition(nameof(MobileAppList), typeof(IList<MobileAppIntentAndStateDetail>));

    }


    /// <summary>
    /// MobileAppTroubleshootingEventObjectSchema
    /// </summary>
    public class MobileAppTroubleshootingEventObjectSchema : DeviceManagementTroubleshootingEventObjectSchema
    {

        /// <summary>
        /// ManagedDeviceIdentifier
        /// </summary>
        public static PropertyDefinition ManagedDeviceIdentifier = new PropertyDefinition(nameof(ManagedDeviceIdentifier), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// ApplicationId
        /// </summary>
        public static PropertyDefinition ApplicationId = new PropertyDefinition(nameof(ApplicationId), typeof(string));


        /// <summary>
        /// History
        /// </summary>
        public static PropertyDefinition History = new PropertyDefinition(nameof(History), typeof(IList<MobileAppTroubleshootingHistoryItem>));


        /// <summary>
        /// AppLogCollectionRequests
        /// </summary>
        public static PropertyDefinition AppLogCollectionRequests = new PropertyDefinition(nameof(AppLogCollectionRequests), typeof(IList<AppLogCollectionRequest>));

    }


    /// <summary>
    /// AgreementAcceptanceObjectSchema
    /// </summary>
    public class AgreementAcceptanceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AgreementId
        /// </summary>
        public static PropertyDefinition AgreementId = new PropertyDefinition(nameof(AgreementId), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// AgreementFileId
        /// </summary>
        public static PropertyDefinition AgreementFileId = new PropertyDefinition(nameof(AgreementFileId), typeof(string));


        /// <summary>
        /// RecordedDateTime
        /// </summary>
        public static PropertyDefinition RecordedDateTime = new PropertyDefinition(nameof(RecordedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// UserEmail
        /// </summary>
        public static PropertyDefinition UserEmail = new PropertyDefinition(nameof(UserEmail), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(AgreementAcceptanceState));

    }


    /// <summary>
    /// NotificationObjectSchema
    /// </summary>
    public class NotificationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetHostName
        /// </summary>
        public static PropertyDefinition TargetHostName = new PropertyDefinition(nameof(TargetHostName), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(PayloadTypes));


        /// <summary>
        /// DisplayTimeToLive
        /// </summary>
        public static PropertyDefinition DisplayTimeToLive = new PropertyDefinition(nameof(DisplayTimeToLive), typeof(int));


        /// <summary>
        /// Priority
        /// </summary>
        public static PropertyDefinition Priority = new PropertyDefinition(nameof(Priority), typeof(Priority));


        /// <summary>
        /// GroupName
        /// </summary>
        public static PropertyDefinition GroupName = new PropertyDefinition(nameof(GroupName), typeof(string));


        /// <summary>
        /// TargetPolicy
        /// </summary>
        public static PropertyDefinition TargetPolicy = new PropertyDefinition(nameof(TargetPolicy), typeof(TargetPolicyEndpoints));

    }


    /// <summary>
    /// DirectorySettingObjectSchema
    /// </summary>
    public class DirectorySettingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// TemplateId
        /// </summary>
        public static PropertyDefinition TemplateId = new PropertyDefinition(nameof(TemplateId), typeof(string));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(IList<SettingValue>));

    }


    /// <summary>
    /// EndpointObjectSchema
    /// </summary>
    public class EndpointObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// Capability
        /// </summary>
        public static PropertyDefinition Capability = new PropertyDefinition(nameof(Capability), typeof(string));


        /// <summary>
        /// ProviderId
        /// </summary>
        public static PropertyDefinition ProviderId = new PropertyDefinition(nameof(ProviderId), typeof(string));


        /// <summary>
        /// ProviderName
        /// </summary>
        public static PropertyDefinition ProviderName = new PropertyDefinition(nameof(ProviderName), typeof(string));


        /// <summary>
        /// Uri
        /// </summary>
        public static PropertyDefinition Uri = new PropertyDefinition(nameof(Uri), typeof(string));


        /// <summary>
        /// ProviderResourceId
        /// </summary>
        public static PropertyDefinition ProviderResourceId = new PropertyDefinition(nameof(ProviderResourceId), typeof(string));

    }


    /// <summary>
    /// ConversationThreadObjectSchema
    /// </summary>
    public class ConversationThreadObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ToRecipients
        /// </summary>
        public static PropertyDefinition ToRecipients = new PropertyDefinition(nameof(ToRecipients), typeof(IList<Recipient>));


        /// <summary>
        /// Topic
        /// </summary>
        public static PropertyDefinition Topic = new PropertyDefinition(nameof(Topic), typeof(string));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// LastDeliveredDateTime
        /// </summary>
        public static PropertyDefinition LastDeliveredDateTime = new PropertyDefinition(nameof(LastDeliveredDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UniqueSenders
        /// </summary>
        public static PropertyDefinition UniqueSenders = new PropertyDefinition(nameof(UniqueSenders), typeof(IList<String>));


        /// <summary>
        /// CcRecipients
        /// </summary>
        public static PropertyDefinition CcRecipients = new PropertyDefinition(nameof(CcRecipients), typeof(IList<Recipient>));


        /// <summary>
        /// Preview
        /// </summary>
        public static PropertyDefinition Preview = new PropertyDefinition(nameof(Preview), typeof(string));


        /// <summary>
        /// IsLocked
        /// </summary>
        public static PropertyDefinition IsLocked = new PropertyDefinition(nameof(IsLocked), typeof(bool));


        /// <summary>
        /// Posts
        /// </summary>
        public static PropertyDefinition Posts = new PropertyDefinition(nameof(Posts), typeof(IList<Post>));

    }


    /// <summary>
    /// ConversationObjectSchema
    /// </summary>
    public class ConversationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Topic
        /// </summary>
        public static PropertyDefinition Topic = new PropertyDefinition(nameof(Topic), typeof(string));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// LastDeliveredDateTime
        /// </summary>
        public static PropertyDefinition LastDeliveredDateTime = new PropertyDefinition(nameof(LastDeliveredDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UniqueSenders
        /// </summary>
        public static PropertyDefinition UniqueSenders = new PropertyDefinition(nameof(UniqueSenders), typeof(IList<String>));


        /// <summary>
        /// Preview
        /// </summary>
        public static PropertyDefinition Preview = new PropertyDefinition(nameof(Preview), typeof(string));


        /// <summary>
        /// Threads
        /// </summary>
        public static PropertyDefinition Threads = new PropertyDefinition(nameof(Threads), typeof(IList<ConversationThread>));

    }


    /// <summary>
    /// SiteObjectSchema
    /// </summary>
    public class SiteObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Root
        /// </summary>
        public static PropertyDefinition Root = new PropertyDefinition(nameof(Root), typeof(Root));


        /// <summary>
        /// SharepointIds
        /// </summary>
        public static PropertyDefinition SharepointIds = new PropertyDefinition(nameof(SharepointIds), typeof(SharepointIds));


        /// <summary>
        /// SiteCollection
        /// </summary>
        public static PropertyDefinition SiteCollection = new PropertyDefinition(nameof(SiteCollection), typeof(SiteCollection));


        /// <summary>
        /// Analytics
        /// </summary>
        public static PropertyDefinition Analytics = new PropertyDefinition(nameof(Analytics), typeof(ItemAnalytics));


        /// <summary>
        /// Columns
        /// </summary>
        public static PropertyDefinition Columns = new PropertyDefinition(nameof(Columns), typeof(IList<ColumnDefinition>));


        /// <summary>
        /// ContentTypes
        /// </summary>
        public static PropertyDefinition ContentTypes = new PropertyDefinition(nameof(ContentTypes), typeof(IList<ContentType>));


        /// <summary>
        /// Drive
        /// </summary>
        public static PropertyDefinition Drive = new PropertyDefinition(nameof(Drive), typeof(Drive));


        /// <summary>
        /// Drives
        /// </summary>
        public static PropertyDefinition Drives = new PropertyDefinition(nameof(Drives), typeof(IList<Drive>));


        /// <summary>
        /// Items
        /// </summary>
        public static PropertyDefinition Items = new PropertyDefinition(nameof(Items), typeof(IList<BaseItem>));


        /// <summary>
        /// Lists
        /// </summary>
        public static PropertyDefinition Lists = new PropertyDefinition(nameof(Lists), typeof(IList<List>));


        /// <summary>
        /// Pages
        /// </summary>
        public static PropertyDefinition Pages = new PropertyDefinition(nameof(Pages), typeof(IList<SitePage>));


        /// <summary>
        /// Sites
        /// </summary>
        public static PropertyDefinition Sites = new PropertyDefinition(nameof(Sites), typeof(IList<Site>));


        /// <summary>
        /// Onenote
        /// </summary>
        public static PropertyDefinition Onenote = new PropertyDefinition(nameof(Onenote), typeof(Onenote));

    }


    /// <summary>
    /// PlannerGroupObjectSchema
    /// </summary>
    public class PlannerGroupObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Plans
        /// </summary>
        public static PropertyDefinition Plans = new PropertyDefinition(nameof(Plans), typeof(IList<PlannerPlan>));

    }


    /// <summary>
    /// TeamObjectSchema
    /// </summary>
    public class TeamObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Classification
        /// </summary>
        public static PropertyDefinition Classification = new PropertyDefinition(nameof(Classification), typeof(string));


        /// <summary>
        /// Specialization
        /// </summary>
        public static PropertyDefinition Specialization = new PropertyDefinition(nameof(Specialization), typeof(TeamSpecialization));


        /// <summary>
        /// Visibility
        /// </summary>
        public static PropertyDefinition Visibility = new PropertyDefinition(nameof(Visibility), typeof(TeamVisibilityType));


        /// <summary>
        /// WebUrl
        /// </summary>
        public static PropertyDefinition WebUrl = new PropertyDefinition(nameof(WebUrl), typeof(string));


        /// <summary>
        /// MemberSettings
        /// </summary>
        public static PropertyDefinition MemberSettings = new PropertyDefinition(nameof(MemberSettings), typeof(TeamMemberSettings));


        /// <summary>
        /// GuestSettings
        /// </summary>
        public static PropertyDefinition GuestSettings = new PropertyDefinition(nameof(GuestSettings), typeof(TeamGuestSettings));


        /// <summary>
        /// MessagingSettings
        /// </summary>
        public static PropertyDefinition MessagingSettings = new PropertyDefinition(nameof(MessagingSettings), typeof(TeamMessagingSettings));


        /// <summary>
        /// FunSettings
        /// </summary>
        public static PropertyDefinition FunSettings = new PropertyDefinition(nameof(FunSettings), typeof(TeamFunSettings));


        /// <summary>
        /// IsArchived
        /// </summary>
        public static PropertyDefinition IsArchived = new PropertyDefinition(nameof(IsArchived), typeof(bool));


        /// <summary>
        /// Template
        /// </summary>
        public static PropertyDefinition Template = new PropertyDefinition(nameof(Template), typeof(TeamsTemplate));


        /// <summary>
        /// Channels
        /// </summary>
        public static PropertyDefinition Channels = new PropertyDefinition(nameof(Channels), typeof(IList<Channel>));


        /// <summary>
        /// Apps
        /// </summary>
        public static PropertyDefinition Apps = new PropertyDefinition(nameof(Apps), typeof(IList<TeamsCatalogApp>));


        /// <summary>
        /// InstalledApps
        /// </summary>
        public static PropertyDefinition InstalledApps = new PropertyDefinition(nameof(InstalledApps), typeof(IList<TeamsAppInstallation>));


        /// <summary>
        /// Operations
        /// </summary>
        public static PropertyDefinition Operations = new PropertyDefinition(nameof(Operations), typeof(IList<TeamsAsyncOperation>));


        /// <summary>
        /// Owners
        /// </summary>
        public static PropertyDefinition Owners = new PropertyDefinition(nameof(Owners), typeof(IList<User>));

    }


    /// <summary>
    /// ChannelObjectSchema
    /// </summary>
    public class ChannelObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// IsFavoriteByDefault
        /// </summary>
        public static PropertyDefinition IsFavoriteByDefault = new PropertyDefinition(nameof(IsFavoriteByDefault), typeof(bool));


        /// <summary>
        /// Email
        /// </summary>
        public static PropertyDefinition Email = new PropertyDefinition(nameof(Email), typeof(string));


        /// <summary>
        /// WebUrl
        /// </summary>
        public static PropertyDefinition WebUrl = new PropertyDefinition(nameof(WebUrl), typeof(string));


        /// <summary>
        /// Messages
        /// </summary>
        public static PropertyDefinition Messages = new PropertyDefinition(nameof(Messages), typeof(IList<ChatMessage>));


        /// <summary>
        /// ChatThreads
        /// </summary>
        public static PropertyDefinition ChatThreads = new PropertyDefinition(nameof(ChatThreads), typeof(IList<ChatThread>));


        /// <summary>
        /// Tabs
        /// </summary>
        public static PropertyDefinition Tabs = new PropertyDefinition(nameof(Tabs), typeof(IList<TeamsTab>));

    }


    /// <summary>
    /// GroupLifecyclePolicyObjectSchema
    /// </summary>
    public class GroupLifecyclePolicyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// GroupLifetimeInDays
        /// </summary>
        public static PropertyDefinition GroupLifetimeInDays = new PropertyDefinition(nameof(GroupLifetimeInDays), typeof(int));


        /// <summary>
        /// ManagedGroupTypes
        /// </summary>
        public static PropertyDefinition ManagedGroupTypes = new PropertyDefinition(nameof(ManagedGroupTypes), typeof(string));


        /// <summary>
        /// AlternateNotificationEmails
        /// </summary>
        public static PropertyDefinition AlternateNotificationEmails = new PropertyDefinition(nameof(AlternateNotificationEmails), typeof(string));

    }


    /// <summary>
    /// CommandObjectSchema
    /// </summary>
    public class CommandObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// AppServiceName
        /// </summary>
        public static PropertyDefinition AppServiceName = new PropertyDefinition(nameof(AppServiceName), typeof(string));


        /// <summary>
        /// PackageFamilyName
        /// </summary>
        public static PropertyDefinition PackageFamilyName = new PropertyDefinition(nameof(PackageFamilyName), typeof(string));


        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(string));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(PayloadRequest));


        /// <summary>
        /// PermissionTicket
        /// </summary>
        public static PropertyDefinition PermissionTicket = new PropertyDefinition(nameof(PermissionTicket), typeof(string));


        /// <summary>
        /// PostBackUri
        /// </summary>
        public static PropertyDefinition PostBackUri = new PropertyDefinition(nameof(PostBackUri), typeof(string));


        /// <summary>
        /// Responsepayload
        /// </summary>
        public static PropertyDefinition Responsepayload = new PropertyDefinition(nameof(Responsepayload), typeof(PayloadResponse));

    }


    /// <summary>
    /// AdministrativeUnitObjectSchema
    /// </summary>
    public class AdministrativeUnitObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Visibility
        /// </summary>
        public static PropertyDefinition Visibility = new PropertyDefinition(nameof(Visibility), typeof(string));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// Members
        /// </summary>
        public static PropertyDefinition Members = new PropertyDefinition(nameof(Members), typeof(IList<DirectoryObject>));


        /// <summary>
        /// ScopedRoleMembers
        /// </summary>
        public static PropertyDefinition ScopedRoleMembers = new PropertyDefinition(nameof(ScopedRoleMembers), typeof(IList<ScopedRoleMembership>));

    }


    /// <summary>
    /// OrganizationObjectSchema
    /// </summary>
    public class OrganizationObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AssignedPlans
        /// </summary>
        public static PropertyDefinition AssignedPlans = new PropertyDefinition(nameof(AssignedPlans), typeof(IList<AssignedPlan>));


        /// <summary>
        /// BusinessPhones
        /// </summary>
        public static PropertyDefinition BusinessPhones = new PropertyDefinition(nameof(BusinessPhones), typeof(IList<String>));


        /// <summary>
        /// City
        /// </summary>
        public static PropertyDefinition City = new PropertyDefinition(nameof(City), typeof(string));


        /// <summary>
        /// Country
        /// </summary>
        public static PropertyDefinition Country = new PropertyDefinition(nameof(Country), typeof(string));


        /// <summary>
        /// CountryLetterCode
        /// </summary>
        public static PropertyDefinition CountryLetterCode = new PropertyDefinition(nameof(CountryLetterCode), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsMultipleDataLocationsForServicesEnabled
        /// </summary>
        public static PropertyDefinition IsMultipleDataLocationsForServicesEnabled = new PropertyDefinition(nameof(IsMultipleDataLocationsForServicesEnabled), typeof(bool));


        /// <summary>
        /// MarketingNotificationEmails
        /// </summary>
        public static PropertyDefinition MarketingNotificationEmails = new PropertyDefinition(nameof(MarketingNotificationEmails), typeof(IList<String>));


        /// <summary>
        /// OnPremisesLastSyncDateTime
        /// </summary>
        public static PropertyDefinition OnPremisesLastSyncDateTime = new PropertyDefinition(nameof(OnPremisesLastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OnPremisesSyncEnabled
        /// </summary>
        public static PropertyDefinition OnPremisesSyncEnabled = new PropertyDefinition(nameof(OnPremisesSyncEnabled), typeof(bool));


        /// <summary>
        /// PostalCode
        /// </summary>
        public static PropertyDefinition PostalCode = new PropertyDefinition(nameof(PostalCode), typeof(string));


        /// <summary>
        /// PreferredLanguage
        /// </summary>
        public static PropertyDefinition PreferredLanguage = new PropertyDefinition(nameof(PreferredLanguage), typeof(string));


        /// <summary>
        /// PrivacyProfile
        /// </summary>
        public static PropertyDefinition PrivacyProfile = new PropertyDefinition(nameof(PrivacyProfile), typeof(PrivacyProfile));


        /// <summary>
        /// ProvisionedPlans
        /// </summary>
        public static PropertyDefinition ProvisionedPlans = new PropertyDefinition(nameof(ProvisionedPlans), typeof(IList<ProvisionedPlan>));


        /// <summary>
        /// SecurityComplianceNotificationMails
        /// </summary>
        public static PropertyDefinition SecurityComplianceNotificationMails = new PropertyDefinition(nameof(SecurityComplianceNotificationMails), typeof(IList<String>));


        /// <summary>
        /// SecurityComplianceNotificationPhones
        /// </summary>
        public static PropertyDefinition SecurityComplianceNotificationPhones = new PropertyDefinition(nameof(SecurityComplianceNotificationPhones), typeof(IList<String>));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(string));


        /// <summary>
        /// Street
        /// </summary>
        public static PropertyDefinition Street = new PropertyDefinition(nameof(Street), typeof(string));


        /// <summary>
        /// TechnicalNotificationMails
        /// </summary>
        public static PropertyDefinition TechnicalNotificationMails = new PropertyDefinition(nameof(TechnicalNotificationMails), typeof(IList<String>));


        /// <summary>
        /// VerifiedDomains
        /// </summary>
        public static PropertyDefinition VerifiedDomains = new PropertyDefinition(nameof(VerifiedDomains), typeof(IList<VerifiedDomain>));


        /// <summary>
        /// MobileDeviceManagementAuthority
        /// </summary>
        public static PropertyDefinition MobileDeviceManagementAuthority = new PropertyDefinition(nameof(MobileDeviceManagementAuthority), typeof(MdmAuthority));


        /// <summary>
        /// CertificateConnectorSetting
        /// </summary>
        public static PropertyDefinition CertificateConnectorSetting = new PropertyDefinition(nameof(CertificateConnectorSetting), typeof(CertificateConnectorSetting));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));

    }


    /// <summary>
    /// SchemaExtensionObjectSchema
    /// </summary>
    public class SchemaExtensionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// TargetTypes
        /// </summary>
        public static PropertyDefinition TargetTypes = new PropertyDefinition(nameof(TargetTypes), typeof(IList<String>));


        /// <summary>
        /// Properties
        /// </summary>
        public static PropertyDefinition Properties = new PropertyDefinition(nameof(Properties), typeof(IList<ExtensionSchemaProperty>));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(string));

    }


    /// <summary>
    /// DirectoryObjectSchema
    /// </summary>
    public class DirectoryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeletedItems
        /// </summary>
        public static PropertyDefinition DeletedItems = new PropertyDefinition(nameof(DeletedItems), typeof(IList<DirectoryObject>));

    }


    /// <summary>
    /// ExtensionPropertyObjectSchema
    /// </summary>
    public class ExtensionPropertyObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AppDisplayName
        /// </summary>
        public static PropertyDefinition AppDisplayName = new PropertyDefinition(nameof(AppDisplayName), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// DataType
        /// </summary>
        public static PropertyDefinition DataType = new PropertyDefinition(nameof(DataType), typeof(string));


        /// <summary>
        /// IsSyncedFromOnPremises
        /// </summary>
        public static PropertyDefinition IsSyncedFromOnPremises = new PropertyDefinition(nameof(IsSyncedFromOnPremises), typeof(bool));


        /// <summary>
        /// TargetObjects
        /// </summary>
        public static PropertyDefinition TargetObjects = new PropertyDefinition(nameof(TargetObjects), typeof(IList<String>));

    }


    /// <summary>
    /// AllowedDataLocationObjectSchema
    /// </summary>
    public class AllowedDataLocationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AppId
        /// </summary>
        public static PropertyDefinition AppId = new PropertyDefinition(nameof(AppId), typeof(string));


        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(string));


        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// Domain
        /// </summary>
        public static PropertyDefinition Domain = new PropertyDefinition(nameof(Domain), typeof(string));

    }


    /// <summary>
    /// ApplicationObjectSchema
    /// </summary>
    public class ApplicationObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// Api
        /// </summary>
        public static PropertyDefinition Api = new PropertyDefinition(nameof(Api), typeof(ApiApplication));


        /// <summary>
        /// AppId
        /// </summary>
        public static PropertyDefinition AppId = new PropertyDefinition(nameof(AppId), typeof(string));


        /// <summary>
        /// AppRoles
        /// </summary>
        public static PropertyDefinition AppRoles = new PropertyDefinition(nameof(AppRoles), typeof(IList<AppRole>));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IsFallbackPublicClient
        /// </summary>
        public static PropertyDefinition IsFallbackPublicClient = new PropertyDefinition(nameof(IsFallbackPublicClient), typeof(bool));


        /// <summary>
        /// IdentifierUris
        /// </summary>
        public static PropertyDefinition IdentifierUris = new PropertyDefinition(nameof(IdentifierUris), typeof(IList<String>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GroupMembershipClaims
        /// </summary>
        public static PropertyDefinition GroupMembershipClaims = new PropertyDefinition(nameof(GroupMembershipClaims), typeof(string));


        /// <summary>
        /// Info
        /// </summary>
        public static PropertyDefinition Info = new PropertyDefinition(nameof(Info), typeof(InformationalUrl));


        /// <summary>
        /// IsDeviceOnlyAuthSupported
        /// </summary>
        public static PropertyDefinition IsDeviceOnlyAuthSupported = new PropertyDefinition(nameof(IsDeviceOnlyAuthSupported), typeof(bool));


        /// <summary>
        /// KeyCredentials
        /// </summary>
        public static PropertyDefinition KeyCredentials = new PropertyDefinition(nameof(KeyCredentials), typeof(IList<KeyCredential>));


        /// <summary>
        /// Logo
        /// </summary>
        public static PropertyDefinition Logo = new PropertyDefinition(nameof(Logo), typeof(string));


        /// <summary>
        /// OptionalClaims
        /// </summary>
        public static PropertyDefinition OptionalClaims = new PropertyDefinition(nameof(OptionalClaims), typeof(OptionalClaims));


        /// <summary>
        /// OrgRestrictions
        /// </summary>
        public static PropertyDefinition OrgRestrictions = new PropertyDefinition(nameof(OrgRestrictions), typeof(IList<Guid>));


        /// <summary>
        /// ParentalControlSettings
        /// </summary>
        public static PropertyDefinition ParentalControlSettings = new PropertyDefinition(nameof(ParentalControlSettings), typeof(ParentalControlSettings));


        /// <summary>
        /// PasswordCredentials
        /// </summary>
        public static PropertyDefinition PasswordCredentials = new PropertyDefinition(nameof(PasswordCredentials), typeof(IList<PasswordCredential>));


        /// <summary>
        /// PublicClient
        /// </summary>
        public static PropertyDefinition PublicClient = new PropertyDefinition(nameof(PublicClient), typeof(PublicClientApplication));


        /// <summary>
        /// PublisherDomain
        /// </summary>
        public static PropertyDefinition PublisherDomain = new PropertyDefinition(nameof(PublisherDomain), typeof(string));


        /// <summary>
        /// RequiredResourceAccess
        /// </summary>
        public static PropertyDefinition RequiredResourceAccess = new PropertyDefinition(nameof(RequiredResourceAccess), typeof(IList<RequiredResourceAccess>));


        /// <summary>
        /// SignInAudience
        /// </summary>
        public static PropertyDefinition SignInAudience = new PropertyDefinition(nameof(SignInAudience), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// TokenEncryptionKeyId
        /// </summary>
        public static PropertyDefinition TokenEncryptionKeyId = new PropertyDefinition(nameof(TokenEncryptionKeyId), typeof(Guid));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(WebApplication));


        /// <summary>
        /// ExtensionProperties
        /// </summary>
        public static PropertyDefinition ExtensionProperties = new PropertyDefinition(nameof(ExtensionProperties), typeof(IList<ExtensionProperty>));


        /// <summary>
        /// CreatedOnBehalfOf
        /// </summary>
        public static PropertyDefinition CreatedOnBehalfOf = new PropertyDefinition(nameof(CreatedOnBehalfOf), typeof(DirectoryObject));


        /// <summary>
        /// Owners
        /// </summary>
        public static PropertyDefinition Owners = new PropertyDefinition(nameof(Owners), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Policies
        /// </summary>
        public static PropertyDefinition Policies = new PropertyDefinition(nameof(Policies), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Synchronization
        /// </summary>
        public static PropertyDefinition Synchronization = new PropertyDefinition(nameof(Synchronization), typeof(Synchronization));

    }


    /// <summary>
    /// SynchronizationObjectSchema
    /// </summary>
    public class SynchronizationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Secrets
        /// </summary>
        public static PropertyDefinition Secrets = new PropertyDefinition(nameof(Secrets), typeof(IList<SynchronizationSecretKeyStringValuePair>));


        /// <summary>
        /// Jobs
        /// </summary>
        public static PropertyDefinition Jobs = new PropertyDefinition(nameof(Jobs), typeof(IList<SynchronizationJob>));


        /// <summary>
        /// Templates
        /// </summary>
        public static PropertyDefinition Templates = new PropertyDefinition(nameof(Templates), typeof(IList<SynchronizationTemplate>));

    }


    /// <summary>
    /// OrgContactObjectSchema
    /// </summary>
    public class OrgContactObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// BusinessPhones
        /// </summary>
        public static PropertyDefinition BusinessPhones = new PropertyDefinition(nameof(BusinessPhones), typeof(IList<String>));


        /// <summary>
        /// City
        /// </summary>
        public static PropertyDefinition City = new PropertyDefinition(nameof(City), typeof(string));


        /// <summary>
        /// CompanyName
        /// </summary>
        public static PropertyDefinition CompanyName = new PropertyDefinition(nameof(CompanyName), typeof(string));


        /// <summary>
        /// Country
        /// </summary>
        public static PropertyDefinition Country = new PropertyDefinition(nameof(Country), typeof(string));


        /// <summary>
        /// Department
        /// </summary>
        public static PropertyDefinition Department = new PropertyDefinition(nameof(Department), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GivenName
        /// </summary>
        public static PropertyDefinition GivenName = new PropertyDefinition(nameof(GivenName), typeof(string));


        /// <summary>
        /// JobTitle
        /// </summary>
        public static PropertyDefinition JobTitle = new PropertyDefinition(nameof(JobTitle), typeof(string));


        /// <summary>
        /// Mail
        /// </summary>
        public static PropertyDefinition Mail = new PropertyDefinition(nameof(Mail), typeof(string));


        /// <summary>
        /// MailNickname
        /// </summary>
        public static PropertyDefinition MailNickname = new PropertyDefinition(nameof(MailNickname), typeof(string));


        /// <summary>
        /// MobilePhone
        /// </summary>
        public static PropertyDefinition MobilePhone = new PropertyDefinition(nameof(MobilePhone), typeof(string));


        /// <summary>
        /// OnPremisesSyncEnabled
        /// </summary>
        public static PropertyDefinition OnPremisesSyncEnabled = new PropertyDefinition(nameof(OnPremisesSyncEnabled), typeof(bool));


        /// <summary>
        /// OnPremisesLastSyncDateTime
        /// </summary>
        public static PropertyDefinition OnPremisesLastSyncDateTime = new PropertyDefinition(nameof(OnPremisesLastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OnPremisesProvisioningErrors
        /// </summary>
        public static PropertyDefinition OnPremisesProvisioningErrors = new PropertyDefinition(nameof(OnPremisesProvisioningErrors), typeof(IList<OnPremisesProvisioningError>));


        /// <summary>
        /// OfficeLocation
        /// </summary>
        public static PropertyDefinition OfficeLocation = new PropertyDefinition(nameof(OfficeLocation), typeof(string));


        /// <summary>
        /// PostalCode
        /// </summary>
        public static PropertyDefinition PostalCode = new PropertyDefinition(nameof(PostalCode), typeof(string));


        /// <summary>
        /// ProxyAddresses
        /// </summary>
        public static PropertyDefinition ProxyAddresses = new PropertyDefinition(nameof(ProxyAddresses), typeof(IList<String>));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(string));


        /// <summary>
        /// StreetAddress
        /// </summary>
        public static PropertyDefinition StreetAddress = new PropertyDefinition(nameof(StreetAddress), typeof(string));


        /// <summary>
        /// Surname
        /// </summary>
        public static PropertyDefinition Surname = new PropertyDefinition(nameof(Surname), typeof(string));


        /// <summary>
        /// Manager
        /// </summary>
        public static PropertyDefinition Manager = new PropertyDefinition(nameof(Manager), typeof(DirectoryObject));


        /// <summary>
        /// DirectReports
        /// </summary>
        public static PropertyDefinition DirectReports = new PropertyDefinition(nameof(DirectReports), typeof(IList<DirectoryObject>));


        /// <summary>
        /// MemberOf
        /// </summary>
        public static PropertyDefinition MemberOf = new PropertyDefinition(nameof(MemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// TransitiveMemberOf
        /// </summary>
        public static PropertyDefinition TransitiveMemberOf = new PropertyDefinition(nameof(TransitiveMemberOf), typeof(IList<DirectoryObject>));

    }


    /// <summary>
    /// DirectoryObjectPartnerReferenceObjectSchema
    /// </summary>
    public class DirectoryObjectPartnerReferenceObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ExternalPartnerTenantId
        /// </summary>
        public static PropertyDefinition ExternalPartnerTenantId = new PropertyDefinition(nameof(ExternalPartnerTenantId), typeof(Guid));


        /// <summary>
        /// ObjectType
        /// </summary>
        public static PropertyDefinition ObjectType = new PropertyDefinition(nameof(ObjectType), typeof(string));

    }


    /// <summary>
    /// DirectoryRoleObjectSchema
    /// </summary>
    public class DirectoryRoleObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// RoleTemplateId
        /// </summary>
        public static PropertyDefinition RoleTemplateId = new PropertyDefinition(nameof(RoleTemplateId), typeof(string));


        /// <summary>
        /// Members
        /// </summary>
        public static PropertyDefinition Members = new PropertyDefinition(nameof(Members), typeof(IList<DirectoryObject>));


        /// <summary>
        /// ScopedMembers
        /// </summary>
        public static PropertyDefinition ScopedMembers = new PropertyDefinition(nameof(ScopedMembers), typeof(IList<ScopedRoleMembership>));

    }


    /// <summary>
    /// DirectoryRoleTemplateObjectSchema
    /// </summary>
    public class DirectoryRoleTemplateObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// DirectorySettingTemplateObjectSchema
    /// </summary>
    public class DirectorySettingTemplateObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(IList<SettingTemplateValue>));

    }


    /// <summary>
    /// DomainObjectSchema
    /// </summary>
    public class DomainObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AuthenticationType
        /// </summary>
        public static PropertyDefinition AuthenticationType = new PropertyDefinition(nameof(AuthenticationType), typeof(string));


        /// <summary>
        /// AvailabilityStatus
        /// </summary>
        public static PropertyDefinition AvailabilityStatus = new PropertyDefinition(nameof(AvailabilityStatus), typeof(string));


        /// <summary>
        /// IsAdminManaged
        /// </summary>
        public static PropertyDefinition IsAdminManaged = new PropertyDefinition(nameof(IsAdminManaged), typeof(bool));


        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// IsInitial
        /// </summary>
        public static PropertyDefinition IsInitial = new PropertyDefinition(nameof(IsInitial), typeof(bool));


        /// <summary>
        /// IsRoot
        /// </summary>
        public static PropertyDefinition IsRoot = new PropertyDefinition(nameof(IsRoot), typeof(bool));


        /// <summary>
        /// IsVerified
        /// </summary>
        public static PropertyDefinition IsVerified = new PropertyDefinition(nameof(IsVerified), typeof(bool));


        /// <summary>
        /// SupportedServices
        /// </summary>
        public static PropertyDefinition SupportedServices = new PropertyDefinition(nameof(SupportedServices), typeof(IList<String>));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(DomainState));


        /// <summary>
        /// ServiceConfigurationRecords
        /// </summary>
        public static PropertyDefinition ServiceConfigurationRecords = new PropertyDefinition(nameof(ServiceConfigurationRecords), typeof(IList<DomainDnsRecord>));


        /// <summary>
        /// VerificationDnsRecords
        /// </summary>
        public static PropertyDefinition VerificationDnsRecords = new PropertyDefinition(nameof(VerificationDnsRecords), typeof(IList<DomainDnsRecord>));


        /// <summary>
        /// DomainNameReferences
        /// </summary>
        public static PropertyDefinition DomainNameReferences = new PropertyDefinition(nameof(DomainNameReferences), typeof(IList<DirectoryObject>));

    }


    /// <summary>
    /// DomainDnsRecordObjectSchema
    /// </summary>
    public class DomainDnsRecordObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// IsOptional
        /// </summary>
        public static PropertyDefinition IsOptional = new PropertyDefinition(nameof(IsOptional), typeof(bool));


        /// <summary>
        /// Label
        /// </summary>
        public static PropertyDefinition Label = new PropertyDefinition(nameof(Label), typeof(string));


        /// <summary>
        /// RecordType
        /// </summary>
        public static PropertyDefinition RecordType = new PropertyDefinition(nameof(RecordType), typeof(string));


        /// <summary>
        /// SupportedService
        /// </summary>
        public static PropertyDefinition SupportedService = new PropertyDefinition(nameof(SupportedService), typeof(string));


        /// <summary>
        /// Ttl
        /// </summary>
        public static PropertyDefinition Ttl = new PropertyDefinition(nameof(Ttl), typeof(int));

    }


    /// <summary>
    /// DomainDnsCnameRecordObjectSchema
    /// </summary>
    public class DomainDnsCnameRecordObjectSchema : DomainDnsRecordObjectSchema
    {

        /// <summary>
        /// CanonicalName
        /// </summary>
        public static PropertyDefinition CanonicalName = new PropertyDefinition(nameof(CanonicalName), typeof(string));

    }


    /// <summary>
    /// DomainDnsMxRecordObjectSchema
    /// </summary>
    public class DomainDnsMxRecordObjectSchema : DomainDnsRecordObjectSchema
    {

        /// <summary>
        /// MailExchange
        /// </summary>
        public static PropertyDefinition MailExchange = new PropertyDefinition(nameof(MailExchange), typeof(string));


        /// <summary>
        /// Preference
        /// </summary>
        public static PropertyDefinition Preference = new PropertyDefinition(nameof(Preference), typeof(int));

    }


    /// <summary>
    /// DomainDnsSrvRecordObjectSchema
    /// </summary>
    public class DomainDnsSrvRecordObjectSchema : DomainDnsRecordObjectSchema
    {

        /// <summary>
        /// NameTarget
        /// </summary>
        public static PropertyDefinition NameTarget = new PropertyDefinition(nameof(NameTarget), typeof(string));


        /// <summary>
        /// Port
        /// </summary>
        public static PropertyDefinition Port = new PropertyDefinition(nameof(Port), typeof(int));


        /// <summary>
        /// Priority
        /// </summary>
        public static PropertyDefinition Priority = new PropertyDefinition(nameof(Priority), typeof(int));


        /// <summary>
        /// Protocol
        /// </summary>
        public static PropertyDefinition Protocol = new PropertyDefinition(nameof(Protocol), typeof(string));


        /// <summary>
        /// Service
        /// </summary>
        public static PropertyDefinition Service = new PropertyDefinition(nameof(Service), typeof(string));


        /// <summary>
        /// Weight
        /// </summary>
        public static PropertyDefinition Weight = new PropertyDefinition(nameof(Weight), typeof(int));

    }


    /// <summary>
    /// DomainDnsTxtRecordObjectSchema
    /// </summary>
    public class DomainDnsTxtRecordObjectSchema : DomainDnsRecordObjectSchema
    {

        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(string));

    }


    /// <summary>
    /// DomainDnsUnavailableRecordObjectSchema
    /// </summary>
    public class DomainDnsUnavailableRecordObjectSchema : DomainDnsRecordObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));

    }


    /// <summary>
    /// OAuth2PermissionGrantObjectSchema
    /// </summary>
    public class OAuth2PermissionGrantObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ClientId
        /// </summary>
        public static PropertyDefinition ClientId = new PropertyDefinition(nameof(ClientId), typeof(string));


        /// <summary>
        /// ConsentType
        /// </summary>
        public static PropertyDefinition ConsentType = new PropertyDefinition(nameof(ConsentType), typeof(string));


        /// <summary>
        /// ExpiryTime
        /// </summary>
        public static PropertyDefinition ExpiryTime = new PropertyDefinition(nameof(ExpiryTime), typeof(DateTimeOffset));


        /// <summary>
        /// PrincipalId
        /// </summary>
        public static PropertyDefinition PrincipalId = new PropertyDefinition(nameof(PrincipalId), typeof(string));


        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// Scope
        /// </summary>
        public static PropertyDefinition Scope = new PropertyDefinition(nameof(Scope), typeof(string));


        /// <summary>
        /// StartTime
        /// </summary>
        public static PropertyDefinition StartTime = new PropertyDefinition(nameof(StartTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// PolicyObjectSchema
    /// </summary>
    public class PolicyObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AlternativeIdentifier
        /// </summary>
        public static PropertyDefinition AlternativeIdentifier = new PropertyDefinition(nameof(AlternativeIdentifier), typeof(string));


        /// <summary>
        /// Definition
        /// </summary>
        public static PropertyDefinition Definition = new PropertyDefinition(nameof(Definition), typeof(IList<String>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsOrganizationDefault
        /// </summary>
        public static PropertyDefinition IsOrganizationDefault = new PropertyDefinition(nameof(IsOrganizationDefault), typeof(bool));


        /// <summary>
        /// KeyCredentials
        /// </summary>
        public static PropertyDefinition KeyCredentials = new PropertyDefinition(nameof(KeyCredentials), typeof(IList<KeyCredential>));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// AppliesTo
        /// </summary>
        public static PropertyDefinition AppliesTo = new PropertyDefinition(nameof(AppliesTo), typeof(IList<DirectoryObject>));

    }


    /// <summary>
    /// ServicePrincipalObjectSchema
    /// </summary>
    public class ServicePrincipalObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// AccountEnabled
        /// </summary>
        public static PropertyDefinition AccountEnabled = new PropertyDefinition(nameof(AccountEnabled), typeof(bool));


        /// <summary>
        /// AddIns
        /// </summary>
        public static PropertyDefinition AddIns = new PropertyDefinition(nameof(AddIns), typeof(IList<AddIn>));


        /// <summary>
        /// AppDisplayName
        /// </summary>
        public static PropertyDefinition AppDisplayName = new PropertyDefinition(nameof(AppDisplayName), typeof(string));


        /// <summary>
        /// AppId
        /// </summary>
        public static PropertyDefinition AppId = new PropertyDefinition(nameof(AppId), typeof(string));


        /// <summary>
        /// AppOwnerOrganizationId
        /// </summary>
        public static PropertyDefinition AppOwnerOrganizationId = new PropertyDefinition(nameof(AppOwnerOrganizationId), typeof(Guid));


        /// <summary>
        /// AppRoleAssignmentRequired
        /// </summary>
        public static PropertyDefinition AppRoleAssignmentRequired = new PropertyDefinition(nameof(AppRoleAssignmentRequired), typeof(bool));


        /// <summary>
        /// AppRoles
        /// </summary>
        public static PropertyDefinition AppRoles = new PropertyDefinition(nameof(AppRoles), typeof(IList<AppRole>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ErrorUrl
        /// </summary>
        public static PropertyDefinition ErrorUrl = new PropertyDefinition(nameof(ErrorUrl), typeof(string));


        /// <summary>
        /// Homepage
        /// </summary>
        public static PropertyDefinition Homepage = new PropertyDefinition(nameof(Homepage), typeof(string));


        /// <summary>
        /// KeyCredentials
        /// </summary>
        public static PropertyDefinition KeyCredentials = new PropertyDefinition(nameof(KeyCredentials), typeof(IList<KeyCredential>));


        /// <summary>
        /// LogoutUrl
        /// </summary>
        public static PropertyDefinition LogoutUrl = new PropertyDefinition(nameof(LogoutUrl), typeof(string));


        /// <summary>
        /// Oauth2Permissions
        /// </summary>
        public static PropertyDefinition Oauth2Permissions = new PropertyDefinition(nameof(Oauth2Permissions), typeof(IList<OAuth2Permission>));


        /// <summary>
        /// PasswordCredentials
        /// </summary>
        public static PropertyDefinition PasswordCredentials = new PropertyDefinition(nameof(PasswordCredentials), typeof(IList<PasswordCredential>));


        /// <summary>
        /// PreferredTokenSigningKeyThumbprint
        /// </summary>
        public static PropertyDefinition PreferredTokenSigningKeyThumbprint = new PropertyDefinition(nameof(PreferredTokenSigningKeyThumbprint), typeof(string));


        /// <summary>
        /// PublisherName
        /// </summary>
        public static PropertyDefinition PublisherName = new PropertyDefinition(nameof(PublisherName), typeof(string));


        /// <summary>
        /// ReplyUrls
        /// </summary>
        public static PropertyDefinition ReplyUrls = new PropertyDefinition(nameof(ReplyUrls), typeof(IList<String>));


        /// <summary>
        /// SamlMetadataUrl
        /// </summary>
        public static PropertyDefinition SamlMetadataUrl = new PropertyDefinition(nameof(SamlMetadataUrl), typeof(string));


        /// <summary>
        /// ServicePrincipalNames
        /// </summary>
        public static PropertyDefinition ServicePrincipalNames = new PropertyDefinition(nameof(ServicePrincipalNames), typeof(IList<String>));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// AppRoleAssignedTo
        /// </summary>
        public static PropertyDefinition AppRoleAssignedTo = new PropertyDefinition(nameof(AppRoleAssignedTo), typeof(IList<AppRoleAssignment>));


        /// <summary>
        /// AppRoleAssignments
        /// </summary>
        public static PropertyDefinition AppRoleAssignments = new PropertyDefinition(nameof(AppRoleAssignments), typeof(IList<AppRoleAssignment>));


        /// <summary>
        /// Oauth2PermissionGrants
        /// </summary>
        public static PropertyDefinition Oauth2PermissionGrants = new PropertyDefinition(nameof(Oauth2PermissionGrants), typeof(IList<OAuth2PermissionGrant>));


        /// <summary>
        /// MemberOf
        /// </summary>
        public static PropertyDefinition MemberOf = new PropertyDefinition(nameof(MemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// TransitiveMemberOf
        /// </summary>
        public static PropertyDefinition TransitiveMemberOf = new PropertyDefinition(nameof(TransitiveMemberOf), typeof(IList<DirectoryObject>));


        /// <summary>
        /// CreatedObjects
        /// </summary>
        public static PropertyDefinition CreatedObjects = new PropertyDefinition(nameof(CreatedObjects), typeof(IList<DirectoryObject>));


        /// <summary>
        /// LicenseDetails
        /// </summary>
        public static PropertyDefinition LicenseDetails = new PropertyDefinition(nameof(LicenseDetails), typeof(IList<LicenseDetails>));


        /// <summary>
        /// Owners
        /// </summary>
        public static PropertyDefinition Owners = new PropertyDefinition(nameof(Owners), typeof(IList<DirectoryObject>));


        /// <summary>
        /// OwnedObjects
        /// </summary>
        public static PropertyDefinition OwnedObjects = new PropertyDefinition(nameof(OwnedObjects), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Policies
        /// </summary>
        public static PropertyDefinition Policies = new PropertyDefinition(nameof(Policies), typeof(IList<DirectoryObject>));


        /// <summary>
        /// Synchronization
        /// </summary>
        public static PropertyDefinition Synchronization = new PropertyDefinition(nameof(Synchronization), typeof(Synchronization));

    }


    /// <summary>
    /// SubscribedSkuObjectSchema
    /// </summary>
    public class SubscribedSkuObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CapabilityStatus
        /// </summary>
        public static PropertyDefinition CapabilityStatus = new PropertyDefinition(nameof(CapabilityStatus), typeof(string));


        /// <summary>
        /// ConsumedUnits
        /// </summary>
        public static PropertyDefinition ConsumedUnits = new PropertyDefinition(nameof(ConsumedUnits), typeof(int));


        /// <summary>
        /// PrepaidUnits
        /// </summary>
        public static PropertyDefinition PrepaidUnits = new PropertyDefinition(nameof(PrepaidUnits), typeof(LicenseUnitsDetail));


        /// <summary>
        /// ServicePlans
        /// </summary>
        public static PropertyDefinition ServicePlans = new PropertyDefinition(nameof(ServicePlans), typeof(IList<ServicePlanInfo>));


        /// <summary>
        /// SkuId
        /// </summary>
        public static PropertyDefinition SkuId = new PropertyDefinition(nameof(SkuId), typeof(Guid));


        /// <summary>
        /// SkuPartNumber
        /// </summary>
        public static PropertyDefinition SkuPartNumber = new PropertyDefinition(nameof(SkuPartNumber), typeof(string));


        /// <summary>
        /// AppliesTo
        /// </summary>
        public static PropertyDefinition AppliesTo = new PropertyDefinition(nameof(AppliesTo), typeof(string));

    }


    /// <summary>
    /// ContractObjectSchema
    /// </summary>
    public class ContractObjectSchema : DirectoryObjectObjectSchema
    {

        /// <summary>
        /// ContractType
        /// </summary>
        public static PropertyDefinition ContractType = new PropertyDefinition(nameof(ContractType), typeof(string));


        /// <summary>
        /// CustomerId
        /// </summary>
        public static PropertyDefinition CustomerId = new PropertyDefinition(nameof(CustomerId), typeof(Guid));


        /// <summary>
        /// DefaultDomainName
        /// </summary>
        public static PropertyDefinition DefaultDomainName = new PropertyDefinition(nameof(DefaultDomainName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// ActivityHistoryItemObjectSchema
    /// </summary>
    public class ActivityHistoryItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(Status));


        /// <summary>
        /// ActiveDurationSeconds
        /// </summary>
        public static PropertyDefinition ActiveDurationSeconds = new PropertyDefinition(nameof(ActiveDurationSeconds), typeof(int));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastActiveDateTime
        /// </summary>
        public static PropertyDefinition LastActiveDateTime = new PropertyDefinition(nameof(LastActiveDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// StartedDateTime
        /// </summary>
        public static PropertyDefinition StartedDateTime = new PropertyDefinition(nameof(StartedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserTimezone
        /// </summary>
        public static PropertyDefinition UserTimezone = new PropertyDefinition(nameof(UserTimezone), typeof(string));


        /// <summary>
        /// Activity
        /// </summary>
        public static PropertyDefinition Activity = new PropertyDefinition(nameof(Activity), typeof(UserActivity));

    }


    /// <summary>
    /// ItemAnalyticsObjectSchema
    /// </summary>
    public class ItemAnalyticsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ItemActivityStats
        /// </summary>
        public static PropertyDefinition ItemActivityStats = new PropertyDefinition(nameof(ItemActivityStats), typeof(IList<ItemActivityStat>));


        /// <summary>
        /// AllTime
        /// </summary>
        public static PropertyDefinition AllTime = new PropertyDefinition(nameof(AllTime), typeof(ItemActivityStat));


        /// <summary>
        /// LastSevenDays
        /// </summary>
        public static PropertyDefinition LastSevenDays = new PropertyDefinition(nameof(LastSevenDays), typeof(ItemActivityStat));

    }


    /// <summary>
    /// ColumnDefinitionObjectSchema
    /// </summary>
    public class ColumnDefinitionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Boolean
        /// </summary>
        public static PropertyDefinition Boolean = new PropertyDefinition(nameof(Boolean), typeof(BooleanColumn));


        /// <summary>
        /// Calculated
        /// </summary>
        public static PropertyDefinition Calculated = new PropertyDefinition(nameof(Calculated), typeof(CalculatedColumn));


        /// <summary>
        /// Choice
        /// </summary>
        public static PropertyDefinition Choice = new PropertyDefinition(nameof(Choice), typeof(ChoiceColumn));


        /// <summary>
        /// ColumnGroup
        /// </summary>
        public static PropertyDefinition ColumnGroup = new PropertyDefinition(nameof(ColumnGroup), typeof(string));


        /// <summary>
        /// Currency
        /// </summary>
        public static PropertyDefinition Currency = new PropertyDefinition(nameof(Currency), typeof(CurrencyColumn));


        /// <summary>
        /// DateTime
        /// </summary>
        public static PropertyDefinition DateTime = new PropertyDefinition(nameof(DateTime), typeof(DateTimeColumn));


        /// <summary>
        /// DefaultValue
        /// </summary>
        public static PropertyDefinition DefaultValue = new PropertyDefinition(nameof(DefaultValue), typeof(DefaultColumnValue));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// EnforceUniqueValues
        /// </summary>
        public static PropertyDefinition EnforceUniqueValues = new PropertyDefinition(nameof(EnforceUniqueValues), typeof(bool));


        /// <summary>
        /// Geolocation
        /// </summary>
        public static PropertyDefinition Geolocation = new PropertyDefinition(nameof(Geolocation), typeof(GeolocationColumn));


        /// <summary>
        /// Hidden
        /// </summary>
        public static PropertyDefinition Hidden = new PropertyDefinition(nameof(Hidden), typeof(bool));


        /// <summary>
        /// Indexed
        /// </summary>
        public static PropertyDefinition Indexed = new PropertyDefinition(nameof(Indexed), typeof(bool));


        /// <summary>
        /// Lookup
        /// </summary>
        public static PropertyDefinition Lookup = new PropertyDefinition(nameof(Lookup), typeof(LookupColumn));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Number
        /// </summary>
        public static PropertyDefinition Number = new PropertyDefinition(nameof(Number), typeof(NumberColumn));


        /// <summary>
        /// PersonOrGroup
        /// </summary>
        public static PropertyDefinition PersonOrGroup = new PropertyDefinition(nameof(PersonOrGroup), typeof(PersonOrGroupColumn));


        /// <summary>
        /// ReadOnly
        /// </summary>
        public static PropertyDefinition ReadOnly = new PropertyDefinition(nameof(ReadOnly), typeof(bool));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(TextColumn));

    }


    /// <summary>
    /// ContentTypeObjectSchema
    /// </summary>
    public class ContentTypeObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Group
        /// </summary>
        public static PropertyDefinition Group = new PropertyDefinition(nameof(Group), typeof(string));


        /// <summary>
        /// Hidden
        /// </summary>
        public static PropertyDefinition Hidden = new PropertyDefinition(nameof(Hidden), typeof(bool));


        /// <summary>
        /// InheritedFrom
        /// </summary>
        public static PropertyDefinition InheritedFrom = new PropertyDefinition(nameof(InheritedFrom), typeof(ItemReference));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Order
        /// </summary>
        public static PropertyDefinition Order = new PropertyDefinition(nameof(Order), typeof(ContentTypeOrder));


        /// <summary>
        /// ParentId
        /// </summary>
        public static PropertyDefinition ParentId = new PropertyDefinition(nameof(ParentId), typeof(string));


        /// <summary>
        /// ReadOnly
        /// </summary>
        public static PropertyDefinition ReadOnly = new PropertyDefinition(nameof(ReadOnly), typeof(bool));


        /// <summary>
        /// Sealed
        /// </summary>
        public static PropertyDefinition Sealed = new PropertyDefinition(nameof(Sealed), typeof(bool));


        /// <summary>
        /// ColumnLinks
        /// </summary>
        public static PropertyDefinition ColumnLinks = new PropertyDefinition(nameof(ColumnLinks), typeof(IList<ColumnLink>));

    }


    /// <summary>
    /// ListObjectSchema
    /// </summary>
    public class ListObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// list
        /// </summary>
        public static PropertyDefinition list = new PropertyDefinition(nameof(list), typeof(ListInfo));


        /// <summary>
        /// SharepointIds
        /// </summary>
        public static PropertyDefinition SharepointIds = new PropertyDefinition(nameof(SharepointIds), typeof(SharepointIds));


        /// <summary>
        /// System
        /// </summary>
        public static PropertyDefinition System = new PropertyDefinition(nameof(System), typeof(SystemFacet));


        /// <summary>
        /// Activities
        /// </summary>
        public static PropertyDefinition Activities = new PropertyDefinition(nameof(Activities), typeof(IList<ItemActivityOLD>));


        /// <summary>
        /// Columns
        /// </summary>
        public static PropertyDefinition Columns = new PropertyDefinition(nameof(Columns), typeof(IList<ColumnDefinition>));


        /// <summary>
        /// ContentTypes
        /// </summary>
        public static PropertyDefinition ContentTypes = new PropertyDefinition(nameof(ContentTypes), typeof(IList<ContentType>));


        /// <summary>
        /// Drive
        /// </summary>
        public static PropertyDefinition Drive = new PropertyDefinition(nameof(Drive), typeof(Drive));


        /// <summary>
        /// Items
        /// </summary>
        public static PropertyDefinition Items = new PropertyDefinition(nameof(Items), typeof(IList<ListItem>));

    }


    /// <summary>
    /// SitePageObjectSchema
    /// </summary>
    public class SitePageObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// ContentType
        /// </summary>
        public static PropertyDefinition ContentType = new PropertyDefinition(nameof(ContentType), typeof(ContentTypeInfo));


        /// <summary>
        /// PageLayoutType
        /// </summary>
        public static PropertyDefinition PageLayoutType = new PropertyDefinition(nameof(PageLayoutType), typeof(string));


        /// <summary>
        /// WebParts
        /// </summary>
        public static PropertyDefinition WebParts = new PropertyDefinition(nameof(WebParts), typeof(IList<WebPart>));


        /// <summary>
        /// PublishingState
        /// </summary>
        public static PropertyDefinition PublishingState = new PropertyDefinition(nameof(PublishingState), typeof(PublicationFacet));

    }


    /// <summary>
    /// ItemActivityOLDObjectSchema
    /// </summary>
    public class ItemActivityOLDObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Action
        /// </summary>
        public static PropertyDefinition Action = new PropertyDefinition(nameof(Action), typeof(ItemActionSet));


        /// <summary>
        /// Actor
        /// </summary>
        public static PropertyDefinition Actor = new PropertyDefinition(nameof(Actor), typeof(IdentitySet));


        /// <summary>
        /// Times
        /// </summary>
        public static PropertyDefinition Times = new PropertyDefinition(nameof(Times), typeof(ItemActivityTimeSet));


        /// <summary>
        /// DriveItem
        /// </summary>
        public static PropertyDefinition DriveItem = new PropertyDefinition(nameof(DriveItem), typeof(DriveItem));


        /// <summary>
        /// ListItem
        /// </summary>
        public static PropertyDefinition ListItem = new PropertyDefinition(nameof(ListItem), typeof(ListItem));

    }


    /// <summary>
    /// ListItemObjectSchema
    /// </summary>
    public class ListItemObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// ContentType
        /// </summary>
        public static PropertyDefinition ContentType = new PropertyDefinition(nameof(ContentType), typeof(ContentTypeInfo));


        /// <summary>
        /// SharepointIds
        /// </summary>
        public static PropertyDefinition SharepointIds = new PropertyDefinition(nameof(SharepointIds), typeof(SharepointIds));


        /// <summary>
        /// Activities
        /// </summary>
        public static PropertyDefinition Activities = new PropertyDefinition(nameof(Activities), typeof(IList<ItemActivityOLD>));


        /// <summary>
        /// Analytics
        /// </summary>
        public static PropertyDefinition Analytics = new PropertyDefinition(nameof(Analytics), typeof(ItemAnalytics));


        /// <summary>
        /// DriveItem
        /// </summary>
        public static PropertyDefinition DriveItem = new PropertyDefinition(nameof(DriveItem), typeof(DriveItem));


        /// <summary>
        /// Fields
        /// </summary>
        public static PropertyDefinition Fields = new PropertyDefinition(nameof(Fields), typeof(FieldValueSet));


        /// <summary>
        /// Versions
        /// </summary>
        public static PropertyDefinition Versions = new PropertyDefinition(nameof(Versions), typeof(IList<ListItemVersion>));

    }


    /// <summary>
    /// DriveItemObjectSchema
    /// </summary>
    public class DriveItemObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// Audio
        /// </summary>
        public static PropertyDefinition Audio = new PropertyDefinition(nameof(Audio), typeof(Audio));


        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// CTag
        /// </summary>
        public static PropertyDefinition CTag = new PropertyDefinition(nameof(CTag), typeof(string));


        /// <summary>
        /// Deleted
        /// </summary>
        public static PropertyDefinition Deleted = new PropertyDefinition(nameof(Deleted), typeof(Deleted));


        /// <summary>
        /// File
        /// </summary>
        public static PropertyDefinition File = new PropertyDefinition(nameof(File), typeof(File));


        /// <summary>
        /// FileSystemInfo
        /// </summary>
        public static PropertyDefinition FileSystemInfo = new PropertyDefinition(nameof(FileSystemInfo), typeof(FileSystemInfo));


        /// <summary>
        /// Folder
        /// </summary>
        public static PropertyDefinition Folder = new PropertyDefinition(nameof(Folder), typeof(Folder));


        /// <summary>
        /// Image
        /// </summary>
        public static PropertyDefinition Image = new PropertyDefinition(nameof(Image), typeof(Image));


        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(GeoCoordinates));


        /// <summary>
        /// Package
        /// </summary>
        public static PropertyDefinition Package = new PropertyDefinition(nameof(Package), typeof(Package));


        /// <summary>
        /// Photo
        /// </summary>
        public static PropertyDefinition Photo = new PropertyDefinition(nameof(Photo), typeof(Photo));


        /// <summary>
        /// Publication
        /// </summary>
        public static PropertyDefinition Publication = new PropertyDefinition(nameof(Publication), typeof(PublicationFacet));


        /// <summary>
        /// RemoteItem
        /// </summary>
        public static PropertyDefinition RemoteItem = new PropertyDefinition(nameof(RemoteItem), typeof(RemoteItem));


        /// <summary>
        /// Root
        /// </summary>
        public static PropertyDefinition Root = new PropertyDefinition(nameof(Root), typeof(Root));


        /// <summary>
        /// SearchResult
        /// </summary>
        public static PropertyDefinition SearchResult = new PropertyDefinition(nameof(SearchResult), typeof(SearchResult));


        /// <summary>
        /// Shared
        /// </summary>
        public static PropertyDefinition Shared = new PropertyDefinition(nameof(Shared), typeof(Shared));


        /// <summary>
        /// SharepointIds
        /// </summary>
        public static PropertyDefinition SharepointIds = new PropertyDefinition(nameof(SharepointIds), typeof(SharepointIds));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));


        /// <summary>
        /// SpecialFolder
        /// </summary>
        public static PropertyDefinition SpecialFolder = new PropertyDefinition(nameof(SpecialFolder), typeof(SpecialFolder));


        /// <summary>
        /// Video
        /// </summary>
        public static PropertyDefinition Video = new PropertyDefinition(nameof(Video), typeof(Video));


        /// <summary>
        /// WebDavUrl
        /// </summary>
        public static PropertyDefinition WebDavUrl = new PropertyDefinition(nameof(WebDavUrl), typeof(string));


        /// <summary>
        /// Workbook
        /// </summary>
        public static PropertyDefinition Workbook = new PropertyDefinition(nameof(Workbook), typeof(Workbook));


        /// <summary>
        /// Activities
        /// </summary>
        public static PropertyDefinition Activities = new PropertyDefinition(nameof(Activities), typeof(IList<ItemActivityOLD>));


        /// <summary>
        /// Analytics
        /// </summary>
        public static PropertyDefinition Analytics = new PropertyDefinition(nameof(Analytics), typeof(ItemAnalytics));


        /// <summary>
        /// Children
        /// </summary>
        public static PropertyDefinition Children = new PropertyDefinition(nameof(Children), typeof(IList<DriveItem>));


        /// <summary>
        /// ListItem
        /// </summary>
        public static PropertyDefinition ListItem = new PropertyDefinition(nameof(ListItem), typeof(ListItem));


        /// <summary>
        /// Permissions
        /// </summary>
        public static PropertyDefinition Permissions = new PropertyDefinition(nameof(Permissions), typeof(IList<Permission>));


        /// <summary>
        /// Subscriptions
        /// </summary>
        public static PropertyDefinition Subscriptions = new PropertyDefinition(nameof(Subscriptions), typeof(IList<Subscription>));


        /// <summary>
        /// Thumbnails
        /// </summary>
        public static PropertyDefinition Thumbnails = new PropertyDefinition(nameof(Thumbnails), typeof(IList<ThumbnailSet>));


        /// <summary>
        /// Versions
        /// </summary>
        public static PropertyDefinition Versions = new PropertyDefinition(nameof(Versions), typeof(IList<DriveItemVersion>));

    }


    /// <summary>
    /// WorkbookObjectSchema
    /// </summary>
    public class WorkbookObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Application
        /// </summary>
        public static PropertyDefinition Application = new PropertyDefinition(nameof(Application), typeof(WorkbookApplication));


        /// <summary>
        /// Names
        /// </summary>
        public static PropertyDefinition Names = new PropertyDefinition(nameof(Names), typeof(IList<WorkbookNamedItem>));


        /// <summary>
        /// Tables
        /// </summary>
        public static PropertyDefinition Tables = new PropertyDefinition(nameof(Tables), typeof(IList<WorkbookTable>));


        /// <summary>
        /// Worksheets
        /// </summary>
        public static PropertyDefinition Worksheets = new PropertyDefinition(nameof(Worksheets), typeof(IList<WorkbookWorksheet>));


        /// <summary>
        /// Comments
        /// </summary>
        public static PropertyDefinition Comments = new PropertyDefinition(nameof(Comments), typeof(IList<WorkbookComment>));


        /// <summary>
        /// Functions
        /// </summary>
        public static PropertyDefinition Functions = new PropertyDefinition(nameof(Functions), typeof(WorkbookFunctions));

    }


    /// <summary>
    /// PermissionObjectSchema
    /// </summary>
    public class PermissionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// GrantedTo
        /// </summary>
        public static PropertyDefinition GrantedTo = new PropertyDefinition(nameof(GrantedTo), typeof(IdentitySet));


        /// <summary>
        /// GrantedToIdentities
        /// </summary>
        public static PropertyDefinition GrantedToIdentities = new PropertyDefinition(nameof(GrantedToIdentities), typeof(IList<IdentitySet>));


        /// <summary>
        /// HasPassword
        /// </summary>
        public static PropertyDefinition HasPassword = new PropertyDefinition(nameof(HasPassword), typeof(bool));


        /// <summary>
        /// InheritedFrom
        /// </summary>
        public static PropertyDefinition InheritedFrom = new PropertyDefinition(nameof(InheritedFrom), typeof(ItemReference));


        /// <summary>
        /// Invitation
        /// </summary>
        public static PropertyDefinition Invitation = new PropertyDefinition(nameof(Invitation), typeof(SharingInvitation));


        /// <summary>
        /// Link
        /// </summary>
        public static PropertyDefinition Link = new PropertyDefinition(nameof(Link), typeof(SharingLink));


        /// <summary>
        /// Roles
        /// </summary>
        public static PropertyDefinition Roles = new PropertyDefinition(nameof(Roles), typeof(IList<String>));


        /// <summary>
        /// ShareId
        /// </summary>
        public static PropertyDefinition ShareId = new PropertyDefinition(nameof(ShareId), typeof(string));

    }


    /// <summary>
    /// SubscriptionObjectSchema
    /// </summary>
    public class SubscriptionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(string));


        /// <summary>
        /// ChangeType
        /// </summary>
        public static PropertyDefinition ChangeType = new PropertyDefinition(nameof(ChangeType), typeof(string));


        /// <summary>
        /// ClientState
        /// </summary>
        public static PropertyDefinition ClientState = new PropertyDefinition(nameof(ClientState), typeof(string));


        /// <summary>
        /// NotificationUrl
        /// </summary>
        public static PropertyDefinition NotificationUrl = new PropertyDefinition(nameof(NotificationUrl), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ApplicationId
        /// </summary>
        public static PropertyDefinition ApplicationId = new PropertyDefinition(nameof(ApplicationId), typeof(string));


        /// <summary>
        /// CreatorId
        /// </summary>
        public static PropertyDefinition CreatorId = new PropertyDefinition(nameof(CreatorId), typeof(string));

    }


    /// <summary>
    /// ThumbnailSetObjectSchema
    /// </summary>
    public class ThumbnailSetObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Large
        /// </summary>
        public static PropertyDefinition Large = new PropertyDefinition(nameof(Large), typeof(Thumbnail));


        /// <summary>
        /// Medium
        /// </summary>
        public static PropertyDefinition Medium = new PropertyDefinition(nameof(Medium), typeof(Thumbnail));


        /// <summary>
        /// Small
        /// </summary>
        public static PropertyDefinition Small = new PropertyDefinition(nameof(Small), typeof(Thumbnail));


        /// <summary>
        /// Source
        /// </summary>
        public static PropertyDefinition Source = new PropertyDefinition(nameof(Source), typeof(Thumbnail));

    }


    /// <summary>
    /// BaseItemVersionObjectSchema
    /// </summary>
    public class BaseItemVersionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedBy
        /// </summary>
        public static PropertyDefinition LastModifiedBy = new PropertyDefinition(nameof(LastModifiedBy), typeof(IdentitySet));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Publication
        /// </summary>
        public static PropertyDefinition Publication = new PropertyDefinition(nameof(Publication), typeof(PublicationFacet));

    }


    /// <summary>
    /// DriveItemVersionObjectSchema
    /// </summary>
    public class DriveItemVersionObjectSchema : BaseItemVersionObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));

    }


    /// <summary>
    /// WorkbookApplicationObjectSchema
    /// </summary>
    public class WorkbookApplicationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CalculationMode
        /// </summary>
        public static PropertyDefinition CalculationMode = new PropertyDefinition(nameof(CalculationMode), typeof(string));

    }


    /// <summary>
    /// WorkbookNamedItemObjectSchema
    /// </summary>
    public class WorkbookNamedItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Comment
        /// </summary>
        public static PropertyDefinition Comment = new PropertyDefinition(nameof(Comment), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Scope
        /// </summary>
        public static PropertyDefinition Scope = new PropertyDefinition(nameof(Scope), typeof(string));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(Json));


        /// <summary>
        /// Visible
        /// </summary>
        public static PropertyDefinition Visible = new PropertyDefinition(nameof(Visible), typeof(bool));


        /// <summary>
        /// Worksheet
        /// </summary>
        public static PropertyDefinition Worksheet = new PropertyDefinition(nameof(Worksheet), typeof(WorkbookWorksheet));

    }


    /// <summary>
    /// WorkbookTableObjectSchema
    /// </summary>
    public class WorkbookTableObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// HighlightFirstColumn
        /// </summary>
        public static PropertyDefinition HighlightFirstColumn = new PropertyDefinition(nameof(HighlightFirstColumn), typeof(bool));


        /// <summary>
        /// HighlightLastColumn
        /// </summary>
        public static PropertyDefinition HighlightLastColumn = new PropertyDefinition(nameof(HighlightLastColumn), typeof(bool));


        /// <summary>
        /// LegacyId
        /// </summary>
        public static PropertyDefinition LegacyId = new PropertyDefinition(nameof(LegacyId), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// ShowBandedColumns
        /// </summary>
        public static PropertyDefinition ShowBandedColumns = new PropertyDefinition(nameof(ShowBandedColumns), typeof(bool));


        /// <summary>
        /// ShowBandedRows
        /// </summary>
        public static PropertyDefinition ShowBandedRows = new PropertyDefinition(nameof(ShowBandedRows), typeof(bool));


        /// <summary>
        /// ShowFilterButton
        /// </summary>
        public static PropertyDefinition ShowFilterButton = new PropertyDefinition(nameof(ShowFilterButton), typeof(bool));


        /// <summary>
        /// ShowHeaders
        /// </summary>
        public static PropertyDefinition ShowHeaders = new PropertyDefinition(nameof(ShowHeaders), typeof(bool));


        /// <summary>
        /// ShowTotals
        /// </summary>
        public static PropertyDefinition ShowTotals = new PropertyDefinition(nameof(ShowTotals), typeof(bool));


        /// <summary>
        /// Style
        /// </summary>
        public static PropertyDefinition Style = new PropertyDefinition(nameof(Style), typeof(string));


        /// <summary>
        /// Columns
        /// </summary>
        public static PropertyDefinition Columns = new PropertyDefinition(nameof(Columns), typeof(IList<WorkbookTableColumn>));


        /// <summary>
        /// Rows
        /// </summary>
        public static PropertyDefinition Rows = new PropertyDefinition(nameof(Rows), typeof(IList<WorkbookTableRow>));


        /// <summary>
        /// Sort
        /// </summary>
        public static PropertyDefinition Sort = new PropertyDefinition(nameof(Sort), typeof(WorkbookTableSort));


        /// <summary>
        /// Worksheet
        /// </summary>
        public static PropertyDefinition Worksheet = new PropertyDefinition(nameof(Worksheet), typeof(WorkbookWorksheet));

    }


    /// <summary>
    /// WorkbookWorksheetObjectSchema
    /// </summary>
    public class WorkbookWorksheetObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Position
        /// </summary>
        public static PropertyDefinition Position = new PropertyDefinition(nameof(Position), typeof(int));


        /// <summary>
        /// Visibility
        /// </summary>
        public static PropertyDefinition Visibility = new PropertyDefinition(nameof(Visibility), typeof(string));


        /// <summary>
        /// Charts
        /// </summary>
        public static PropertyDefinition Charts = new PropertyDefinition(nameof(Charts), typeof(IList<WorkbookChart>));


        /// <summary>
        /// Names
        /// </summary>
        public static PropertyDefinition Names = new PropertyDefinition(nameof(Names), typeof(IList<WorkbookNamedItem>));


        /// <summary>
        /// PivotTables
        /// </summary>
        public static PropertyDefinition PivotTables = new PropertyDefinition(nameof(PivotTables), typeof(IList<WorkbookPivotTable>));


        /// <summary>
        /// Protection
        /// </summary>
        public static PropertyDefinition Protection = new PropertyDefinition(nameof(Protection), typeof(WorkbookWorksheetProtection));


        /// <summary>
        /// Tables
        /// </summary>
        public static PropertyDefinition Tables = new PropertyDefinition(nameof(Tables), typeof(IList<WorkbookTable>));

    }


    /// <summary>
    /// WorkbookCommentObjectSchema
    /// </summary>
    public class WorkbookCommentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// ContentType
        /// </summary>
        public static PropertyDefinition ContentType = new PropertyDefinition(nameof(ContentType), typeof(string));


        /// <summary>
        /// Replies
        /// </summary>
        public static PropertyDefinition Replies = new PropertyDefinition(nameof(Replies), typeof(IList<WorkbookCommentReply>));

    }


    /// <summary>
    /// WorkbookFunctionsObjectSchema
    /// </summary>
    public class WorkbookFunctionsObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// WorkbookChartObjectSchema
    /// </summary>
    public class WorkbookChartObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Height
        /// </summary>
        public static PropertyDefinition Height = new PropertyDefinition(nameof(Height), typeof(Double));


        /// <summary>
        /// Left
        /// </summary>
        public static PropertyDefinition Left = new PropertyDefinition(nameof(Left), typeof(Double));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Top
        /// </summary>
        public static PropertyDefinition Top = new PropertyDefinition(nameof(Top), typeof(Double));


        /// <summary>
        /// Width
        /// </summary>
        public static PropertyDefinition Width = new PropertyDefinition(nameof(Width), typeof(Double));


        /// <summary>
        /// Axes
        /// </summary>
        public static PropertyDefinition Axes = new PropertyDefinition(nameof(Axes), typeof(WorkbookChartAxes));


        /// <summary>
        /// DataLabels
        /// </summary>
        public static PropertyDefinition DataLabels = new PropertyDefinition(nameof(DataLabels), typeof(WorkbookChartDataLabels));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartAreaFormat));


        /// <summary>
        /// Legend
        /// </summary>
        public static PropertyDefinition Legend = new PropertyDefinition(nameof(Legend), typeof(WorkbookChartLegend));


        /// <summary>
        /// Series
        /// </summary>
        public static PropertyDefinition Series = new PropertyDefinition(nameof(Series), typeof(IList<WorkbookChartSeries>));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(WorkbookChartTitle));


        /// <summary>
        /// Worksheet
        /// </summary>
        public static PropertyDefinition Worksheet = new PropertyDefinition(nameof(Worksheet), typeof(WorkbookWorksheet));

    }


    /// <summary>
    /// WorkbookChartAxesObjectSchema
    /// </summary>
    public class WorkbookChartAxesObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CategoryAxis
        /// </summary>
        public static PropertyDefinition CategoryAxis = new PropertyDefinition(nameof(CategoryAxis), typeof(WorkbookChartAxis));


        /// <summary>
        /// SeriesAxis
        /// </summary>
        public static PropertyDefinition SeriesAxis = new PropertyDefinition(nameof(SeriesAxis), typeof(WorkbookChartAxis));


        /// <summary>
        /// ValueAxis
        /// </summary>
        public static PropertyDefinition ValueAxis = new PropertyDefinition(nameof(ValueAxis), typeof(WorkbookChartAxis));

    }


    /// <summary>
    /// WorkbookChartDataLabelsObjectSchema
    /// </summary>
    public class WorkbookChartDataLabelsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Position
        /// </summary>
        public static PropertyDefinition Position = new PropertyDefinition(nameof(Position), typeof(string));


        /// <summary>
        /// Separator
        /// </summary>
        public static PropertyDefinition Separator = new PropertyDefinition(nameof(Separator), typeof(string));


        /// <summary>
        /// ShowBubbleSize
        /// </summary>
        public static PropertyDefinition ShowBubbleSize = new PropertyDefinition(nameof(ShowBubbleSize), typeof(bool));


        /// <summary>
        /// ShowCategoryName
        /// </summary>
        public static PropertyDefinition ShowCategoryName = new PropertyDefinition(nameof(ShowCategoryName), typeof(bool));


        /// <summary>
        /// ShowLegendKey
        /// </summary>
        public static PropertyDefinition ShowLegendKey = new PropertyDefinition(nameof(ShowLegendKey), typeof(bool));


        /// <summary>
        /// ShowPercentage
        /// </summary>
        public static PropertyDefinition ShowPercentage = new PropertyDefinition(nameof(ShowPercentage), typeof(bool));


        /// <summary>
        /// ShowSeriesName
        /// </summary>
        public static PropertyDefinition ShowSeriesName = new PropertyDefinition(nameof(ShowSeriesName), typeof(bool));


        /// <summary>
        /// ShowValue
        /// </summary>
        public static PropertyDefinition ShowValue = new PropertyDefinition(nameof(ShowValue), typeof(bool));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartDataLabelFormat));

    }


    /// <summary>
    /// WorkbookChartAreaFormatObjectSchema
    /// </summary>
    public class WorkbookChartAreaFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));


        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));

    }


    /// <summary>
    /// WorkbookChartLegendObjectSchema
    /// </summary>
    public class WorkbookChartLegendObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Overlay
        /// </summary>
        public static PropertyDefinition Overlay = new PropertyDefinition(nameof(Overlay), typeof(bool));


        /// <summary>
        /// Position
        /// </summary>
        public static PropertyDefinition Position = new PropertyDefinition(nameof(Position), typeof(string));


        /// <summary>
        /// Visible
        /// </summary>
        public static PropertyDefinition Visible = new PropertyDefinition(nameof(Visible), typeof(bool));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartLegendFormat));

    }


    /// <summary>
    /// WorkbookChartSeriesObjectSchema
    /// </summary>
    public class WorkbookChartSeriesObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartSeriesFormat));


        /// <summary>
        /// Points
        /// </summary>
        public static PropertyDefinition Points = new PropertyDefinition(nameof(Points), typeof(IList<WorkbookChartPoint>));

    }


    /// <summary>
    /// WorkbookChartTitleObjectSchema
    /// </summary>
    public class WorkbookChartTitleObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Overlay
        /// </summary>
        public static PropertyDefinition Overlay = new PropertyDefinition(nameof(Overlay), typeof(bool));


        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(string));


        /// <summary>
        /// Visible
        /// </summary>
        public static PropertyDefinition Visible = new PropertyDefinition(nameof(Visible), typeof(bool));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartTitleFormat));

    }


    /// <summary>
    /// WorkbookChartFillObjectSchema
    /// </summary>
    public class WorkbookChartFillObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// WorkbookChartFontObjectSchema
    /// </summary>
    public class WorkbookChartFontObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Bold
        /// </summary>
        public static PropertyDefinition Bold = new PropertyDefinition(nameof(Bold), typeof(bool));


        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(string));


        /// <summary>
        /// Italic
        /// </summary>
        public static PropertyDefinition Italic = new PropertyDefinition(nameof(Italic), typeof(bool));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Double));


        /// <summary>
        /// Underline
        /// </summary>
        public static PropertyDefinition Underline = new PropertyDefinition(nameof(Underline), typeof(string));

    }


    /// <summary>
    /// WorkbookChartAxisObjectSchema
    /// </summary>
    public class WorkbookChartAxisObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// MajorUnit
        /// </summary>
        public static PropertyDefinition MajorUnit = new PropertyDefinition(nameof(MajorUnit), typeof(Json));


        /// <summary>
        /// Maximum
        /// </summary>
        public static PropertyDefinition Maximum = new PropertyDefinition(nameof(Maximum), typeof(Json));


        /// <summary>
        /// Minimum
        /// </summary>
        public static PropertyDefinition Minimum = new PropertyDefinition(nameof(Minimum), typeof(Json));


        /// <summary>
        /// MinorUnit
        /// </summary>
        public static PropertyDefinition MinorUnit = new PropertyDefinition(nameof(MinorUnit), typeof(Json));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartAxisFormat));


        /// <summary>
        /// MajorGridlines
        /// </summary>
        public static PropertyDefinition MajorGridlines = new PropertyDefinition(nameof(MajorGridlines), typeof(WorkbookChartGridlines));


        /// <summary>
        /// MinorGridlines
        /// </summary>
        public static PropertyDefinition MinorGridlines = new PropertyDefinition(nameof(MinorGridlines), typeof(WorkbookChartGridlines));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(WorkbookChartAxisTitle));

    }


    /// <summary>
    /// WorkbookChartAxisFormatObjectSchema
    /// </summary>
    public class WorkbookChartAxisFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));


        /// <summary>
        /// Line
        /// </summary>
        public static PropertyDefinition Line = new PropertyDefinition(nameof(Line), typeof(WorkbookChartLineFormat));

    }


    /// <summary>
    /// WorkbookChartGridlinesObjectSchema
    /// </summary>
    public class WorkbookChartGridlinesObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Visible
        /// </summary>
        public static PropertyDefinition Visible = new PropertyDefinition(nameof(Visible), typeof(bool));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartGridlinesFormat));

    }


    /// <summary>
    /// WorkbookChartAxisTitleObjectSchema
    /// </summary>
    public class WorkbookChartAxisTitleObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(string));


        /// <summary>
        /// Visible
        /// </summary>
        public static PropertyDefinition Visible = new PropertyDefinition(nameof(Visible), typeof(bool));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartAxisTitleFormat));

    }


    /// <summary>
    /// WorkbookChartLineFormatObjectSchema
    /// </summary>
    public class WorkbookChartLineFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(string));

    }


    /// <summary>
    /// WorkbookChartAxisTitleFormatObjectSchema
    /// </summary>
    public class WorkbookChartAxisTitleFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));

    }


    /// <summary>
    /// WorkbookChartDataLabelFormatObjectSchema
    /// </summary>
    public class WorkbookChartDataLabelFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));


        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));

    }


    /// <summary>
    /// WorkbookChartGridlinesFormatObjectSchema
    /// </summary>
    public class WorkbookChartGridlinesFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Line
        /// </summary>
        public static PropertyDefinition Line = new PropertyDefinition(nameof(Line), typeof(WorkbookChartLineFormat));

    }


    /// <summary>
    /// WorkbookChartLegendFormatObjectSchema
    /// </summary>
    public class WorkbookChartLegendFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));


        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));

    }


    /// <summary>
    /// WorkbookChartPointObjectSchema
    /// </summary>
    public class WorkbookChartPointObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(Json));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookChartPointFormat));

    }


    /// <summary>
    /// WorkbookChartPointFormatObjectSchema
    /// </summary>
    public class WorkbookChartPointFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));

    }


    /// <summary>
    /// WorkbookChartSeriesFormatObjectSchema
    /// </summary>
    public class WorkbookChartSeriesFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));


        /// <summary>
        /// Line
        /// </summary>
        public static PropertyDefinition Line = new PropertyDefinition(nameof(Line), typeof(WorkbookChartLineFormat));

    }


    /// <summary>
    /// WorkbookChartTitleFormatObjectSchema
    /// </summary>
    public class WorkbookChartTitleFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookChartFill));


        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookChartFont));

    }


    /// <summary>
    /// WorkbookCommentReplyObjectSchema
    /// </summary>
    public class WorkbookCommentReplyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// ContentType
        /// </summary>
        public static PropertyDefinition ContentType = new PropertyDefinition(nameof(ContentType), typeof(string));

    }


    /// <summary>
    /// WorkbookFilterObjectSchema
    /// </summary>
    public class WorkbookFilterObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Criteria
        /// </summary>
        public static PropertyDefinition Criteria = new PropertyDefinition(nameof(Criteria), typeof(WorkbookFilterCriteria));

    }


    /// <summary>
    /// WorkbookFormatProtectionObjectSchema
    /// </summary>
    public class WorkbookFormatProtectionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// FormulaHidden
        /// </summary>
        public static PropertyDefinition FormulaHidden = new PropertyDefinition(nameof(FormulaHidden), typeof(bool));


        /// <summary>
        /// Locked
        /// </summary>
        public static PropertyDefinition Locked = new PropertyDefinition(nameof(Locked), typeof(bool));

    }


    /// <summary>
    /// WorkbookFunctionResultObjectSchema
    /// </summary>
    public class WorkbookFunctionResultObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(string));


        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(Json));

    }


    /// <summary>
    /// WorkbookPivotTableObjectSchema
    /// </summary>
    public class WorkbookPivotTableObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Worksheet
        /// </summary>
        public static PropertyDefinition Worksheet = new PropertyDefinition(nameof(Worksheet), typeof(WorkbookWorksheet));

    }


    /// <summary>
    /// WorkbookRangeObjectSchema
    /// </summary>
    public class WorkbookRangeObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Address
        /// </summary>
        public static PropertyDefinition Address = new PropertyDefinition(nameof(Address), typeof(string));


        /// <summary>
        /// AddressLocal
        /// </summary>
        public static PropertyDefinition AddressLocal = new PropertyDefinition(nameof(AddressLocal), typeof(string));


        /// <summary>
        /// CellCount
        /// </summary>
        public static PropertyDefinition CellCount = new PropertyDefinition(nameof(CellCount), typeof(int));


        /// <summary>
        /// ColumnCount
        /// </summary>
        public static PropertyDefinition ColumnCount = new PropertyDefinition(nameof(ColumnCount), typeof(int));


        /// <summary>
        /// ColumnHidden
        /// </summary>
        public static PropertyDefinition ColumnHidden = new PropertyDefinition(nameof(ColumnHidden), typeof(bool));


        /// <summary>
        /// ColumnIndex
        /// </summary>
        public static PropertyDefinition ColumnIndex = new PropertyDefinition(nameof(ColumnIndex), typeof(int));


        /// <summary>
        /// Formulas
        /// </summary>
        public static PropertyDefinition Formulas = new PropertyDefinition(nameof(Formulas), typeof(Json));


        /// <summary>
        /// FormulasLocal
        /// </summary>
        public static PropertyDefinition FormulasLocal = new PropertyDefinition(nameof(FormulasLocal), typeof(Json));


        /// <summary>
        /// FormulasR1C1
        /// </summary>
        public static PropertyDefinition FormulasR1C1 = new PropertyDefinition(nameof(FormulasR1C1), typeof(Json));


        /// <summary>
        /// Hidden
        /// </summary>
        public static PropertyDefinition Hidden = new PropertyDefinition(nameof(Hidden), typeof(bool));


        /// <summary>
        /// NumberFormat
        /// </summary>
        public static PropertyDefinition NumberFormat = new PropertyDefinition(nameof(NumberFormat), typeof(Json));


        /// <summary>
        /// RowCount
        /// </summary>
        public static PropertyDefinition RowCount = new PropertyDefinition(nameof(RowCount), typeof(int));


        /// <summary>
        /// RowHidden
        /// </summary>
        public static PropertyDefinition RowHidden = new PropertyDefinition(nameof(RowHidden), typeof(bool));


        /// <summary>
        /// RowIndex
        /// </summary>
        public static PropertyDefinition RowIndex = new PropertyDefinition(nameof(RowIndex), typeof(int));


        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(Json));


        /// <summary>
        /// ValueTypes
        /// </summary>
        public static PropertyDefinition ValueTypes = new PropertyDefinition(nameof(ValueTypes), typeof(Json));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(Json));


        /// <summary>
        /// Format
        /// </summary>
        public static PropertyDefinition Format = new PropertyDefinition(nameof(Format), typeof(WorkbookRangeFormat));


        /// <summary>
        /// Sort
        /// </summary>
        public static PropertyDefinition Sort = new PropertyDefinition(nameof(Sort), typeof(WorkbookRangeSort));


        /// <summary>
        /// Worksheet
        /// </summary>
        public static PropertyDefinition Worksheet = new PropertyDefinition(nameof(Worksheet), typeof(WorkbookWorksheet));

    }


    /// <summary>
    /// WorkbookRangeFormatObjectSchema
    /// </summary>
    public class WorkbookRangeFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ColumnWidth
        /// </summary>
        public static PropertyDefinition ColumnWidth = new PropertyDefinition(nameof(ColumnWidth), typeof(Double));


        /// <summary>
        /// HorizontalAlignment
        /// </summary>
        public static PropertyDefinition HorizontalAlignment = new PropertyDefinition(nameof(HorizontalAlignment), typeof(string));


        /// <summary>
        /// RowHeight
        /// </summary>
        public static PropertyDefinition RowHeight = new PropertyDefinition(nameof(RowHeight), typeof(Double));


        /// <summary>
        /// VerticalAlignment
        /// </summary>
        public static PropertyDefinition VerticalAlignment = new PropertyDefinition(nameof(VerticalAlignment), typeof(string));


        /// <summary>
        /// WrapText
        /// </summary>
        public static PropertyDefinition WrapText = new PropertyDefinition(nameof(WrapText), typeof(bool));


        /// <summary>
        /// Borders
        /// </summary>
        public static PropertyDefinition Borders = new PropertyDefinition(nameof(Borders), typeof(IList<WorkbookRangeBorder>));


        /// <summary>
        /// Fill
        /// </summary>
        public static PropertyDefinition Fill = new PropertyDefinition(nameof(Fill), typeof(WorkbookRangeFill));


        /// <summary>
        /// Font
        /// </summary>
        public static PropertyDefinition Font = new PropertyDefinition(nameof(Font), typeof(WorkbookRangeFont));


        /// <summary>
        /// Protection
        /// </summary>
        public static PropertyDefinition Protection = new PropertyDefinition(nameof(Protection), typeof(WorkbookFormatProtection));

    }


    /// <summary>
    /// WorkbookRangeSortObjectSchema
    /// </summary>
    public class WorkbookRangeSortObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// WorkbookRangeBorderObjectSchema
    /// </summary>
    public class WorkbookRangeBorderObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(string));


        /// <summary>
        /// SideIndex
        /// </summary>
        public static PropertyDefinition SideIndex = new PropertyDefinition(nameof(SideIndex), typeof(string));


        /// <summary>
        /// Style
        /// </summary>
        public static PropertyDefinition Style = new PropertyDefinition(nameof(Style), typeof(string));


        /// <summary>
        /// Weight
        /// </summary>
        public static PropertyDefinition Weight = new PropertyDefinition(nameof(Weight), typeof(string));

    }


    /// <summary>
    /// WorkbookRangeFillObjectSchema
    /// </summary>
    public class WorkbookRangeFillObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(string));

    }


    /// <summary>
    /// WorkbookRangeFontObjectSchema
    /// </summary>
    public class WorkbookRangeFontObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Bold
        /// </summary>
        public static PropertyDefinition Bold = new PropertyDefinition(nameof(Bold), typeof(bool));


        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(string));


        /// <summary>
        /// Italic
        /// </summary>
        public static PropertyDefinition Italic = new PropertyDefinition(nameof(Italic), typeof(bool));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Double));


        /// <summary>
        /// Underline
        /// </summary>
        public static PropertyDefinition Underline = new PropertyDefinition(nameof(Underline), typeof(string));

    }


    /// <summary>
    /// WorkbookRangeViewObjectSchema
    /// </summary>
    public class WorkbookRangeViewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CellAddresses
        /// </summary>
        public static PropertyDefinition CellAddresses = new PropertyDefinition(nameof(CellAddresses), typeof(Json));


        /// <summary>
        /// ColumnCount
        /// </summary>
        public static PropertyDefinition ColumnCount = new PropertyDefinition(nameof(ColumnCount), typeof(int));


        /// <summary>
        /// Formulas
        /// </summary>
        public static PropertyDefinition Formulas = new PropertyDefinition(nameof(Formulas), typeof(Json));


        /// <summary>
        /// FormulasLocal
        /// </summary>
        public static PropertyDefinition FormulasLocal = new PropertyDefinition(nameof(FormulasLocal), typeof(Json));


        /// <summary>
        /// FormulasR1C1
        /// </summary>
        public static PropertyDefinition FormulasR1C1 = new PropertyDefinition(nameof(FormulasR1C1), typeof(Json));


        /// <summary>
        /// Index
        /// </summary>
        public static PropertyDefinition Index = new PropertyDefinition(nameof(Index), typeof(int));


        /// <summary>
        /// NumberFormat
        /// </summary>
        public static PropertyDefinition NumberFormat = new PropertyDefinition(nameof(NumberFormat), typeof(Json));


        /// <summary>
        /// RowCount
        /// </summary>
        public static PropertyDefinition RowCount = new PropertyDefinition(nameof(RowCount), typeof(int));


        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(Json));


        /// <summary>
        /// ValueTypes
        /// </summary>
        public static PropertyDefinition ValueTypes = new PropertyDefinition(nameof(ValueTypes), typeof(Json));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(Json));


        /// <summary>
        /// Rows
        /// </summary>
        public static PropertyDefinition Rows = new PropertyDefinition(nameof(Rows), typeof(IList<WorkbookRangeView>));

    }


    /// <summary>
    /// WorkbookTableColumnObjectSchema
    /// </summary>
    public class WorkbookTableColumnObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Index
        /// </summary>
        public static PropertyDefinition Index = new PropertyDefinition(nameof(Index), typeof(int));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(Json));


        /// <summary>
        /// Filter
        /// </summary>
        public static PropertyDefinition Filter = new PropertyDefinition(nameof(Filter), typeof(WorkbookFilter));

    }


    /// <summary>
    /// WorkbookTableRowObjectSchema
    /// </summary>
    public class WorkbookTableRowObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Index
        /// </summary>
        public static PropertyDefinition Index = new PropertyDefinition(nameof(Index), typeof(int));


        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(Json));

    }


    /// <summary>
    /// WorkbookTableSortObjectSchema
    /// </summary>
    public class WorkbookTableSortObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Fields
        /// </summary>
        public static PropertyDefinition Fields = new PropertyDefinition(nameof(Fields), typeof(IList<WorkbookSortField>));


        /// <summary>
        /// MatchCase
        /// </summary>
        public static PropertyDefinition MatchCase = new PropertyDefinition(nameof(MatchCase), typeof(bool));


        /// <summary>
        /// Method
        /// </summary>
        public static PropertyDefinition Method = new PropertyDefinition(nameof(Method), typeof(string));

    }


    /// <summary>
    /// WorkbookWorksheetProtectionObjectSchema
    /// </summary>
    public class WorkbookWorksheetProtectionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Options
        /// </summary>
        public static PropertyDefinition Options = new PropertyDefinition(nameof(Options), typeof(WorkbookWorksheetProtectionOptions));


        /// <summary>
        /// Protected
        /// </summary>
        public static PropertyDefinition Protected = new PropertyDefinition(nameof(Protected), typeof(bool));

    }


    /// <summary>
    /// AttachmentObjectSchema
    /// </summary>
    public class AttachmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// ContentType
        /// </summary>
        public static PropertyDefinition ContentType = new PropertyDefinition(nameof(ContentType), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(int));


        /// <summary>
        /// IsInline
        /// </summary>
        public static PropertyDefinition IsInline = new PropertyDefinition(nameof(IsInline), typeof(bool));

    }


    /// <summary>
    /// OutlookCategoryObjectSchema
    /// </summary>
    public class OutlookCategoryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Color
        /// </summary>
        public static PropertyDefinition Color = new PropertyDefinition(nameof(Color), typeof(CategoryColor));

    }


    /// <summary>
    /// OutlookTaskGroupObjectSchema
    /// </summary>
    public class OutlookTaskGroupObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ChangeKey
        /// </summary>
        public static PropertyDefinition ChangeKey = new PropertyDefinition(nameof(ChangeKey), typeof(string));


        /// <summary>
        /// IsDefaultGroup
        /// </summary>
        public static PropertyDefinition IsDefaultGroup = new PropertyDefinition(nameof(IsDefaultGroup), typeof(bool));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// GroupKey
        /// </summary>
        public static PropertyDefinition GroupKey = new PropertyDefinition(nameof(GroupKey), typeof(Guid));


        /// <summary>
        /// TaskFolders
        /// </summary>
        public static PropertyDefinition TaskFolders = new PropertyDefinition(nameof(TaskFolders), typeof(IList<OutlookTaskFolder>));

    }


    /// <summary>
    /// OutlookTaskFolderObjectSchema
    /// </summary>
    public class OutlookTaskFolderObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ChangeKey
        /// </summary>
        public static PropertyDefinition ChangeKey = new PropertyDefinition(nameof(ChangeKey), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// IsDefaultFolder
        /// </summary>
        public static PropertyDefinition IsDefaultFolder = new PropertyDefinition(nameof(IsDefaultFolder), typeof(bool));


        /// <summary>
        /// ParentGroupKey
        /// </summary>
        public static PropertyDefinition ParentGroupKey = new PropertyDefinition(nameof(ParentGroupKey), typeof(Guid));


        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<OutlookTask>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));

    }


    /// <summary>
    /// OutlookTaskObjectSchema
    /// </summary>
    public class OutlookTaskObjectSchema : OutlookItemObjectSchema
    {

        /// <summary>
        /// AssignedTo
        /// </summary>
        public static PropertyDefinition AssignedTo = new PropertyDefinition(nameof(AssignedTo), typeof(string));


        /// <summary>
        /// Body
        /// </summary>
        public static PropertyDefinition Body = new PropertyDefinition(nameof(Body), typeof(ItemBody));


        /// <summary>
        /// CompletedDateTime
        /// </summary>
        public static PropertyDefinition CompletedDateTime = new PropertyDefinition(nameof(CompletedDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// DueDateTime
        /// </summary>
        public static PropertyDefinition DueDateTime = new PropertyDefinition(nameof(DueDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// Importance
        /// </summary>
        public static PropertyDefinition Importance = new PropertyDefinition(nameof(Importance), typeof(Importance));


        /// <summary>
        /// IsReminderOn
        /// </summary>
        public static PropertyDefinition IsReminderOn = new PropertyDefinition(nameof(IsReminderOn), typeof(bool));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(string));


        /// <summary>
        /// ParentFolderId
        /// </summary>
        public static PropertyDefinition ParentFolderId = new PropertyDefinition(nameof(ParentFolderId), typeof(string));


        /// <summary>
        /// Recurrence
        /// </summary>
        public static PropertyDefinition Recurrence = new PropertyDefinition(nameof(Recurrence), typeof(PatternedRecurrence));


        /// <summary>
        /// ReminderDateTime
        /// </summary>
        public static PropertyDefinition ReminderDateTime = new PropertyDefinition(nameof(ReminderDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// Sensitivity
        /// </summary>
        public static PropertyDefinition Sensitivity = new PropertyDefinition(nameof(Sensitivity), typeof(Sensitivity));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(TaskStatus));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));


        /// <summary>
        /// Attachments
        /// </summary>
        public static PropertyDefinition Attachments = new PropertyDefinition(nameof(Attachments), typeof(IList<Attachment>));

    }


    /// <summary>
    /// MessageRuleObjectSchema
    /// </summary>
    public class MessageRuleObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Sequence
        /// </summary>
        public static PropertyDefinition Sequence = new PropertyDefinition(nameof(Sequence), typeof(int));


        /// <summary>
        /// Conditions
        /// </summary>
        public static PropertyDefinition Conditions = new PropertyDefinition(nameof(Conditions), typeof(MessageRulePredicates));


        /// <summary>
        /// Actions
        /// </summary>
        public static PropertyDefinition Actions = new PropertyDefinition(nameof(Actions), typeof(MessageRuleActions));


        /// <summary>
        /// Exceptions
        /// </summary>
        public static PropertyDefinition Exceptions = new PropertyDefinition(nameof(Exceptions), typeof(MessageRulePredicates));


        /// <summary>
        /// IsEnabled
        /// </summary>
        public static PropertyDefinition IsEnabled = new PropertyDefinition(nameof(IsEnabled), typeof(bool));


        /// <summary>
        /// HasError
        /// </summary>
        public static PropertyDefinition HasError = new PropertyDefinition(nameof(HasError), typeof(bool));


        /// <summary>
        /// IsReadOnly
        /// </summary>
        public static PropertyDefinition IsReadOnly = new PropertyDefinition(nameof(IsReadOnly), typeof(bool));

    }


    /// <summary>
    /// UserConfigurationObjectSchema
    /// </summary>
    public class UserConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// BinaryData
        /// </summary>
        public static PropertyDefinition BinaryData = new PropertyDefinition(nameof(BinaryData), typeof(string));

    }


    /// <summary>
    /// SingleValueLegacyExtendedPropertyObjectSchema
    /// </summary>
    public class SingleValueLegacyExtendedPropertyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(string));

    }


    /// <summary>
    /// MultiValueLegacyExtendedPropertyObjectSchema
    /// </summary>
    public class MultiValueLegacyExtendedPropertyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(IList<String>));

    }


    /// <summary>
    /// MentionObjectSchema
    /// </summary>
    public class MentionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Mentioned
        /// </summary>
        public static PropertyDefinition Mentioned = new PropertyDefinition(nameof(Mentioned), typeof(EmailAddress));


        /// <summary>
        /// MentionText
        /// </summary>
        public static PropertyDefinition MentionText = new PropertyDefinition(nameof(MentionText), typeof(string));


        /// <summary>
        /// ClientReference
        /// </summary>
        public static PropertyDefinition ClientReference = new PropertyDefinition(nameof(ClientReference), typeof(string));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(EmailAddress));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ServerCreatedDateTime
        /// </summary>
        public static PropertyDefinition ServerCreatedDateTime = new PropertyDefinition(nameof(ServerCreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeepLink
        /// </summary>
        public static PropertyDefinition DeepLink = new PropertyDefinition(nameof(DeepLink), typeof(string));


        /// <summary>
        /// Application
        /// </summary>
        public static PropertyDefinition Application = new PropertyDefinition(nameof(Application), typeof(string));

    }


    /// <summary>
    /// FileAttachmentObjectSchema
    /// </summary>
    public class FileAttachmentObjectSchema : AttachmentObjectSchema
    {

        /// <summary>
        /// ContentId
        /// </summary>
        public static PropertyDefinition ContentId = new PropertyDefinition(nameof(ContentId), typeof(string));


        /// <summary>
        /// ContentLocation
        /// </summary>
        public static PropertyDefinition ContentLocation = new PropertyDefinition(nameof(ContentLocation), typeof(string));


        /// <summary>
        /// ContentBytes
        /// </summary>
        public static PropertyDefinition ContentBytes = new PropertyDefinition(nameof(ContentBytes), typeof(string));

    }


    /// <summary>
    /// ItemAttachmentObjectSchema
    /// </summary>
    public class ItemAttachmentObjectSchema : AttachmentObjectSchema
    {

        /// <summary>
        /// Item
        /// </summary>
        public static PropertyDefinition Item = new PropertyDefinition(nameof(Item), typeof(OutlookItem));

    }


    /// <summary>
    /// EventMessageObjectSchema
    /// </summary>
    public class EventMessageObjectSchema : MessageObjectSchema
    {

        /// <summary>
        /// MeetingMessageType
        /// </summary>
        public static PropertyDefinition MeetingMessageType = new PropertyDefinition(nameof(MeetingMessageType), typeof(MeetingMessageType));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(Location));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(EventType));


        /// <summary>
        /// Recurrence
        /// </summary>
        public static PropertyDefinition Recurrence = new PropertyDefinition(nameof(Recurrence), typeof(PatternedRecurrence));


        /// <summary>
        /// IsOutOfDate
        /// </summary>
        public static PropertyDefinition IsOutOfDate = new PropertyDefinition(nameof(IsOutOfDate), typeof(bool));


        /// <summary>
        /// IsAllDay
        /// </summary>
        public static PropertyDefinition IsAllDay = new PropertyDefinition(nameof(IsAllDay), typeof(bool));


        /// <summary>
        /// IsDelegated
        /// </summary>
        public static PropertyDefinition IsDelegated = new PropertyDefinition(nameof(IsDelegated), typeof(bool));


        /// <summary>
        /// Event
        /// </summary>
        public static PropertyDefinition Event = new PropertyDefinition(nameof(Event), typeof(Event));

    }


    /// <summary>
    /// MailSearchFolderObjectSchema
    /// </summary>
    public class MailSearchFolderObjectSchema : MailFolderObjectSchema
    {

        /// <summary>
        /// IsSupported
        /// </summary>
        public static PropertyDefinition IsSupported = new PropertyDefinition(nameof(IsSupported), typeof(bool));


        /// <summary>
        /// IncludeNestedFolders
        /// </summary>
        public static PropertyDefinition IncludeNestedFolders = new PropertyDefinition(nameof(IncludeNestedFolders), typeof(bool));


        /// <summary>
        /// SourceFolderIDs
        /// </summary>
        public static PropertyDefinition SourceFolderIDs = new PropertyDefinition(nameof(SourceFolderIDs), typeof(IList<String>));


        /// <summary>
        /// FilterQuery
        /// </summary>
        public static PropertyDefinition FilterQuery = new PropertyDefinition(nameof(FilterQuery), typeof(string));

    }


    /// <summary>
    /// EventMessageRequestObjectSchema
    /// </summary>
    public class EventMessageRequestObjectSchema : EventMessageObjectSchema
    {

        /// <summary>
        /// PreviousLocation
        /// </summary>
        public static PropertyDefinition PreviousLocation = new PropertyDefinition(nameof(PreviousLocation), typeof(Location));


        /// <summary>
        /// PreviousStartDateTime
        /// </summary>
        public static PropertyDefinition PreviousStartDateTime = new PropertyDefinition(nameof(PreviousStartDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// PreviousEndDateTime
        /// </summary>
        public static PropertyDefinition PreviousEndDateTime = new PropertyDefinition(nameof(PreviousEndDateTime), typeof(DateTimeTimeZone));


        /// <summary>
        /// ResponseRequested
        /// </summary>
        public static PropertyDefinition ResponseRequested = new PropertyDefinition(nameof(ResponseRequested), typeof(bool));

    }


    /// <summary>
    /// ReferenceAttachmentObjectSchema
    /// </summary>
    public class ReferenceAttachmentObjectSchema : AttachmentObjectSchema
    {

        /// <summary>
        /// SourceUrl
        /// </summary>
        public static PropertyDefinition SourceUrl = new PropertyDefinition(nameof(SourceUrl), typeof(string));


        /// <summary>
        /// ProviderType
        /// </summary>
        public static PropertyDefinition ProviderType = new PropertyDefinition(nameof(ProviderType), typeof(ReferenceAttachmentProvider));


        /// <summary>
        /// ThumbnailUrl
        /// </summary>
        public static PropertyDefinition ThumbnailUrl = new PropertyDefinition(nameof(ThumbnailUrl), typeof(string));


        /// <summary>
        /// PreviewUrl
        /// </summary>
        public static PropertyDefinition PreviewUrl = new PropertyDefinition(nameof(PreviewUrl), typeof(string));


        /// <summary>
        /// Permission
        /// </summary>
        public static PropertyDefinition Permission = new PropertyDefinition(nameof(Permission), typeof(ReferenceAttachmentPermission));


        /// <summary>
        /// IsFolder
        /// </summary>
        public static PropertyDefinition IsFolder = new PropertyDefinition(nameof(IsFolder), typeof(bool));

    }


    /// <summary>
    /// OpenTypeExtensionObjectSchema
    /// </summary>
    public class OpenTypeExtensionObjectSchema : ExtensionObjectSchema
    {

        /// <summary>
        /// ExtensionName
        /// </summary>
        public static PropertyDefinition ExtensionName = new PropertyDefinition(nameof(ExtensionName), typeof(string));

    }


    /// <summary>
    /// PostObjectSchema
    /// </summary>
    public class PostObjectSchema : OutlookItemObjectSchema
    {

        /// <summary>
        /// Body
        /// </summary>
        public static PropertyDefinition Body = new PropertyDefinition(nameof(Body), typeof(ItemBody));


        /// <summary>
        /// ReceivedDateTime
        /// </summary>
        public static PropertyDefinition ReceivedDateTime = new PropertyDefinition(nameof(ReceivedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// HasAttachments
        /// </summary>
        public static PropertyDefinition HasAttachments = new PropertyDefinition(nameof(HasAttachments), typeof(bool));


        /// <summary>
        /// From
        /// </summary>
        public static PropertyDefinition From = new PropertyDefinition(nameof(From), typeof(Recipient));


        /// <summary>
        /// Sender
        /// </summary>
        public static PropertyDefinition Sender = new PropertyDefinition(nameof(Sender), typeof(Recipient));


        /// <summary>
        /// ConversationThreadId
        /// </summary>
        public static PropertyDefinition ConversationThreadId = new PropertyDefinition(nameof(ConversationThreadId), typeof(string));


        /// <summary>
        /// NewParticipants
        /// </summary>
        public static PropertyDefinition NewParticipants = new PropertyDefinition(nameof(NewParticipants), typeof(IList<Recipient>));


        /// <summary>
        /// ConversationId
        /// </summary>
        public static PropertyDefinition ConversationId = new PropertyDefinition(nameof(ConversationId), typeof(string));


        /// <summary>
        /// Importance
        /// </summary>
        public static PropertyDefinition Importance = new PropertyDefinition(nameof(Importance), typeof(Importance));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<Extension>));


        /// <summary>
        /// InReplyTo
        /// </summary>
        public static PropertyDefinition InReplyTo = new PropertyDefinition(nameof(InReplyTo), typeof(Post));


        /// <summary>
        /// Attachments
        /// </summary>
        public static PropertyDefinition Attachments = new PropertyDefinition(nameof(Attachments), typeof(IList<Attachment>));


        /// <summary>
        /// SingleValueExtendedProperties
        /// </summary>
        public static PropertyDefinition SingleValueExtendedProperties = new PropertyDefinition(nameof(SingleValueExtendedProperties), typeof(IList<SingleValueLegacyExtendedProperty>));


        /// <summary>
        /// MultiValueExtendedProperties
        /// </summary>
        public static PropertyDefinition MultiValueExtendedProperties = new PropertyDefinition(nameof(MultiValueExtendedProperties), typeof(IList<MultiValueLegacyExtendedProperty>));


        /// <summary>
        /// Mentions
        /// </summary>
        public static PropertyDefinition Mentions = new PropertyDefinition(nameof(Mentions), typeof(IList<Mention>));

    }


    /// <summary>
    /// InferenceClassificationOverrideObjectSchema
    /// </summary>
    public class InferenceClassificationOverrideObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ClassifyAs
        /// </summary>
        public static PropertyDefinition ClassifyAs = new PropertyDefinition(nameof(ClassifyAs), typeof(InferenceClassificationType));


        /// <summary>
        /// SenderEmailAddress
        /// </summary>
        public static PropertyDefinition SenderEmailAddress = new PropertyDefinition(nameof(SenderEmailAddress), typeof(EmailAddress));

    }


    /// <summary>
    /// ColumnLinkObjectSchema
    /// </summary>
    public class ColumnLinkObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));

    }


    /// <summary>
    /// FieldValueSetObjectSchema
    /// </summary>
    public class FieldValueSetObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// ItemActivityObjectSchema
    /// </summary>
    public class ItemActivityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Access
        /// </summary>
        public static PropertyDefinition Access = new PropertyDefinition(nameof(Access), typeof(AccessAction));


        /// <summary>
        /// ActivityDateTime
        /// </summary>
        public static PropertyDefinition ActivityDateTime = new PropertyDefinition(nameof(ActivityDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Actor
        /// </summary>
        public static PropertyDefinition Actor = new PropertyDefinition(nameof(Actor), typeof(IdentitySet));


        /// <summary>
        /// DriveItem
        /// </summary>
        public static PropertyDefinition DriveItem = new PropertyDefinition(nameof(DriveItem), typeof(DriveItem));

    }


    /// <summary>
    /// ItemActivityStatObjectSchema
    /// </summary>
    public class ItemActivityStatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Access
        /// </summary>
        public static PropertyDefinition Access = new PropertyDefinition(nameof(Access), typeof(ItemActionStat));


        /// <summary>
        /// Create
        /// </summary>
        public static PropertyDefinition Create = new PropertyDefinition(nameof(Create), typeof(ItemActionStat));


        /// <summary>
        /// Delete
        /// </summary>
        public static PropertyDefinition Delete = new PropertyDefinition(nameof(Delete), typeof(ItemActionStat));


        /// <summary>
        /// Edit
        /// </summary>
        public static PropertyDefinition Edit = new PropertyDefinition(nameof(Edit), typeof(ItemActionStat));


        /// <summary>
        /// Move
        /// </summary>
        public static PropertyDefinition Move = new PropertyDefinition(nameof(Move), typeof(ItemActionStat));


        /// <summary>
        /// IsTrending
        /// </summary>
        public static PropertyDefinition IsTrending = new PropertyDefinition(nameof(IsTrending), typeof(bool));


        /// <summary>
        /// IncompleteData
        /// </summary>
        public static PropertyDefinition IncompleteData = new PropertyDefinition(nameof(IncompleteData), typeof(IncompleteData));

    }


    /// <summary>
    /// ListItemVersionObjectSchema
    /// </summary>
    public class ListItemVersionObjectSchema : BaseItemVersionObjectSchema
    {

        /// <summary>
        /// Fields
        /// </summary>
        public static PropertyDefinition Fields = new PropertyDefinition(nameof(Fields), typeof(FieldValueSet));

    }


    /// <summary>
    /// SharedDriveItemObjectSchema
    /// </summary>
    public class SharedDriveItemObjectSchema : BaseItemObjectSchema
    {

        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(IdentitySet));


        /// <summary>
        /// DriveItem
        /// </summary>
        public static PropertyDefinition DriveItem = new PropertyDefinition(nameof(DriveItem), typeof(DriveItem));


        /// <summary>
        /// Items
        /// </summary>
        public static PropertyDefinition Items = new PropertyDefinition(nameof(Items), typeof(IList<DriveItem>));


        /// <summary>
        /// List
        /// </summary>
        public static PropertyDefinition List = new PropertyDefinition(nameof(List), typeof(List));


        /// <summary>
        /// ListItem
        /// </summary>
        public static PropertyDefinition ListItem = new PropertyDefinition(nameof(ListItem), typeof(ListItem));


        /// <summary>
        /// Permission
        /// </summary>
        public static PropertyDefinition Permission = new PropertyDefinition(nameof(Permission), typeof(Permission));


        /// <summary>
        /// Root
        /// </summary>
        public static PropertyDefinition Root = new PropertyDefinition(nameof(Root), typeof(DriveItem));


        /// <summary>
        /// Site
        /// </summary>
        public static PropertyDefinition Site = new PropertyDefinition(nameof(Site), typeof(Site));

    }


    /// <summary>
    /// TrendingObjectSchema
    /// </summary>
    public class TrendingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Weight
        /// </summary>
        public static PropertyDefinition Weight = new PropertyDefinition(nameof(Weight), typeof(Double));


        /// <summary>
        /// ResourceVisualization
        /// </summary>
        public static PropertyDefinition ResourceVisualization = new PropertyDefinition(nameof(ResourceVisualization), typeof(ResourceVisualization));


        /// <summary>
        /// ResourceReference
        /// </summary>
        public static PropertyDefinition ResourceReference = new PropertyDefinition(nameof(ResourceReference), typeof(ResourceReference));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(Entity));

    }


    /// <summary>
    /// SharedInsightObjectSchema
    /// </summary>
    public class SharedInsightObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastShared
        /// </summary>
        public static PropertyDefinition LastShared = new PropertyDefinition(nameof(LastShared), typeof(SharingDetail));


        /// <summary>
        /// SharingHistory
        /// </summary>
        public static PropertyDefinition SharingHistory = new PropertyDefinition(nameof(SharingHistory), typeof(IList<SharingDetail>));


        /// <summary>
        /// ResourceVisualization
        /// </summary>
        public static PropertyDefinition ResourceVisualization = new PropertyDefinition(nameof(ResourceVisualization), typeof(ResourceVisualization));


        /// <summary>
        /// ResourceReference
        /// </summary>
        public static PropertyDefinition ResourceReference = new PropertyDefinition(nameof(ResourceReference), typeof(ResourceReference));


        /// <summary>
        /// LastSharedMethod
        /// </summary>
        public static PropertyDefinition LastSharedMethod = new PropertyDefinition(nameof(LastSharedMethod), typeof(Entity));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(Entity));

    }


    /// <summary>
    /// UsedInsightObjectSchema
    /// </summary>
    public class UsedInsightObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastUsed
        /// </summary>
        public static PropertyDefinition LastUsed = new PropertyDefinition(nameof(LastUsed), typeof(UsageDetails));


        /// <summary>
        /// ResourceVisualization
        /// </summary>
        public static PropertyDefinition ResourceVisualization = new PropertyDefinition(nameof(ResourceVisualization), typeof(ResourceVisualization));


        /// <summary>
        /// ResourceReference
        /// </summary>
        public static PropertyDefinition ResourceReference = new PropertyDefinition(nameof(ResourceReference), typeof(ResourceReference));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(Entity));

    }


    /// <summary>
    /// PlannerTaskObjectSchema
    /// </summary>
    public class PlannerTaskObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// PlanId
        /// </summary>
        public static PropertyDefinition PlanId = new PropertyDefinition(nameof(PlanId), typeof(string));


        /// <summary>
        /// BucketId
        /// </summary>
        public static PropertyDefinition BucketId = new PropertyDefinition(nameof(BucketId), typeof(string));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// OrderHint
        /// </summary>
        public static PropertyDefinition OrderHint = new PropertyDefinition(nameof(OrderHint), typeof(string));


        /// <summary>
        /// AssigneePriority
        /// </summary>
        public static PropertyDefinition AssigneePriority = new PropertyDefinition(nameof(AssigneePriority), typeof(string));


        /// <summary>
        /// PercentComplete
        /// </summary>
        public static PropertyDefinition PercentComplete = new PropertyDefinition(nameof(PercentComplete), typeof(int));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DueDateTime
        /// </summary>
        public static PropertyDefinition DueDateTime = new PropertyDefinition(nameof(DueDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// HasDescription
        /// </summary>
        public static PropertyDefinition HasDescription = new PropertyDefinition(nameof(HasDescription), typeof(bool));


        /// <summary>
        /// PreviewType
        /// </summary>
        public static PropertyDefinition PreviewType = new PropertyDefinition(nameof(PreviewType), typeof(PlannerPreviewType));


        /// <summary>
        /// CompletedDateTime
        /// </summary>
        public static PropertyDefinition CompletedDateTime = new PropertyDefinition(nameof(CompletedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CompletedBy
        /// </summary>
        public static PropertyDefinition CompletedBy = new PropertyDefinition(nameof(CompletedBy), typeof(IdentitySet));


        /// <summary>
        /// ReferenceCount
        /// </summary>
        public static PropertyDefinition ReferenceCount = new PropertyDefinition(nameof(ReferenceCount), typeof(int));


        /// <summary>
        /// ChecklistItemCount
        /// </summary>
        public static PropertyDefinition ChecklistItemCount = new PropertyDefinition(nameof(ChecklistItemCount), typeof(int));


        /// <summary>
        /// ActiveChecklistItemCount
        /// </summary>
        public static PropertyDefinition ActiveChecklistItemCount = new PropertyDefinition(nameof(ActiveChecklistItemCount), typeof(int));


        /// <summary>
        /// AppliedCategories
        /// </summary>
        public static PropertyDefinition AppliedCategories = new PropertyDefinition(nameof(AppliedCategories), typeof(PlannerAppliedCategories));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(PlannerAssignments));


        /// <summary>
        /// ConversationThreadId
        /// </summary>
        public static PropertyDefinition ConversationThreadId = new PropertyDefinition(nameof(ConversationThreadId), typeof(string));


        /// <summary>
        /// Details
        /// </summary>
        public static PropertyDefinition Details = new PropertyDefinition(nameof(Details), typeof(PlannerTaskDetails));


        /// <summary>
        /// AssignedToTaskBoardFormat
        /// </summary>
        public static PropertyDefinition AssignedToTaskBoardFormat = new PropertyDefinition(nameof(AssignedToTaskBoardFormat), typeof(PlannerAssignedToTaskBoardTaskFormat));


        /// <summary>
        /// ProgressTaskBoardFormat
        /// </summary>
        public static PropertyDefinition ProgressTaskBoardFormat = new PropertyDefinition(nameof(ProgressTaskBoardFormat), typeof(PlannerProgressTaskBoardTaskFormat));


        /// <summary>
        /// BucketTaskBoardFormat
        /// </summary>
        public static PropertyDefinition BucketTaskBoardFormat = new PropertyDefinition(nameof(BucketTaskBoardFormat), typeof(PlannerBucketTaskBoardTaskFormat));

    }


    /// <summary>
    /// PlannerPlanObjectSchema
    /// </summary>
    public class PlannerPlanObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(string));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// Contexts
        /// </summary>
        public static PropertyDefinition Contexts = new PropertyDefinition(nameof(Contexts), typeof(PlannerPlanContextCollection));


        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<PlannerTask>));


        /// <summary>
        /// Buckets
        /// </summary>
        public static PropertyDefinition Buckets = new PropertyDefinition(nameof(Buckets), typeof(IList<PlannerBucket>));


        /// <summary>
        /// Details
        /// </summary>
        public static PropertyDefinition Details = new PropertyDefinition(nameof(Details), typeof(PlannerPlanDetails));

    }


    /// <summary>
    /// PlannerDeltaObjectSchema
    /// </summary>
    public class PlannerDeltaObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// PlannerObjectSchema
    /// </summary>
    public class PlannerObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<PlannerTask>));


        /// <summary>
        /// Plans
        /// </summary>
        public static PropertyDefinition Plans = new PropertyDefinition(nameof(Plans), typeof(IList<PlannerPlan>));


        /// <summary>
        /// Buckets
        /// </summary>
        public static PropertyDefinition Buckets = new PropertyDefinition(nameof(Buckets), typeof(IList<PlannerBucket>));

    }


    /// <summary>
    /// PlannerBucketObjectSchema
    /// </summary>
    public class PlannerBucketObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// PlanId
        /// </summary>
        public static PropertyDefinition PlanId = new PropertyDefinition(nameof(PlanId), typeof(string));


        /// <summary>
        /// OrderHint
        /// </summary>
        public static PropertyDefinition OrderHint = new PropertyDefinition(nameof(OrderHint), typeof(string));


        /// <summary>
        /// Tasks
        /// </summary>
        public static PropertyDefinition Tasks = new PropertyDefinition(nameof(Tasks), typeof(IList<PlannerTask>));

    }


    /// <summary>
    /// PlannerTaskDetailsObjectSchema
    /// </summary>
    public class PlannerTaskDetailsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// PreviewType
        /// </summary>
        public static PropertyDefinition PreviewType = new PropertyDefinition(nameof(PreviewType), typeof(PlannerPreviewType));


        /// <summary>
        /// References
        /// </summary>
        public static PropertyDefinition References = new PropertyDefinition(nameof(References), typeof(PlannerExternalReferences));


        /// <summary>
        /// Checklist
        /// </summary>
        public static PropertyDefinition Checklist = new PropertyDefinition(nameof(Checklist), typeof(PlannerChecklistItems));

    }


    /// <summary>
    /// PlannerAssignedToTaskBoardTaskFormatObjectSchema
    /// </summary>
    public class PlannerAssignedToTaskBoardTaskFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UnassignedOrderHint
        /// </summary>
        public static PropertyDefinition UnassignedOrderHint = new PropertyDefinition(nameof(UnassignedOrderHint), typeof(string));


        /// <summary>
        /// OrderHintsByAssignee
        /// </summary>
        public static PropertyDefinition OrderHintsByAssignee = new PropertyDefinition(nameof(OrderHintsByAssignee), typeof(PlannerOrderHintsByAssignee));

    }


    /// <summary>
    /// PlannerProgressTaskBoardTaskFormatObjectSchema
    /// </summary>
    public class PlannerProgressTaskBoardTaskFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OrderHint
        /// </summary>
        public static PropertyDefinition OrderHint = new PropertyDefinition(nameof(OrderHint), typeof(string));

    }


    /// <summary>
    /// PlannerBucketTaskBoardTaskFormatObjectSchema
    /// </summary>
    public class PlannerBucketTaskBoardTaskFormatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OrderHint
        /// </summary>
        public static PropertyDefinition OrderHint = new PropertyDefinition(nameof(OrderHint), typeof(string));

    }


    /// <summary>
    /// PlannerPlanDetailsObjectSchema
    /// </summary>
    public class PlannerPlanDetailsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SharedWith
        /// </summary>
        public static PropertyDefinition SharedWith = new PropertyDefinition(nameof(SharedWith), typeof(PlannerUserIds));


        /// <summary>
        /// CategoryDescriptions
        /// </summary>
        public static PropertyDefinition CategoryDescriptions = new PropertyDefinition(nameof(CategoryDescriptions), typeof(PlannerCategoryDescriptions));


        /// <summary>
        /// ContextDetails
        /// </summary>
        public static PropertyDefinition ContextDetails = new PropertyDefinition(nameof(ContextDetails), typeof(PlannerPlanContextDetailsCollection));

    }


    /// <summary>
    /// OnenoteEntityBaseModelObjectSchema
    /// </summary>
    public class OnenoteEntityBaseModelObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Self
        /// </summary>
        public static PropertyDefinition Self = new PropertyDefinition(nameof(Self), typeof(string));

    }


    /// <summary>
    /// OnenoteEntitySchemaObjectModelObjectSchema
    /// </summary>
    public class OnenoteEntitySchemaObjectModelObjectSchema : OnenoteEntityBaseModelObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// OnenoteEntityHierarchyModelObjectSchema
    /// </summary>
    public class OnenoteEntityHierarchyModelObjectSchema : OnenoteEntitySchemaObjectModelObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// LastModifiedBy
        /// </summary>
        public static PropertyDefinition LastModifiedBy = new PropertyDefinition(nameof(LastModifiedBy), typeof(IdentitySet));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// NotebookObjectSchema
    /// </summary>
    public class NotebookObjectSchema : OnenoteEntityHierarchyModelObjectSchema
    {

        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// UserRole
        /// </summary>
        public static PropertyDefinition UserRole = new PropertyDefinition(nameof(UserRole), typeof(OnenoteUserRole));


        /// <summary>
        /// IsShared
        /// </summary>
        public static PropertyDefinition IsShared = new PropertyDefinition(nameof(IsShared), typeof(bool));


        /// <summary>
        /// SectionsUrl
        /// </summary>
        public static PropertyDefinition SectionsUrl = new PropertyDefinition(nameof(SectionsUrl), typeof(string));


        /// <summary>
        /// SectionGroupsUrl
        /// </summary>
        public static PropertyDefinition SectionGroupsUrl = new PropertyDefinition(nameof(SectionGroupsUrl), typeof(string));


        /// <summary>
        /// Links
        /// </summary>
        public static PropertyDefinition Links = new PropertyDefinition(nameof(Links), typeof(NotebookLinks));


        /// <summary>
        /// Sections
        /// </summary>
        public static PropertyDefinition Sections = new PropertyDefinition(nameof(Sections), typeof(IList<OnenoteSection>));


        /// <summary>
        /// SectionGroups
        /// </summary>
        public static PropertyDefinition SectionGroups = new PropertyDefinition(nameof(SectionGroups), typeof(IList<SectionGroup>));

    }


    /// <summary>
    /// OnenoteSectionObjectSchema
    /// </summary>
    public class OnenoteSectionObjectSchema : OnenoteEntityHierarchyModelObjectSchema
    {

        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// Links
        /// </summary>
        public static PropertyDefinition Links = new PropertyDefinition(nameof(Links), typeof(SectionLinks));


        /// <summary>
        /// PagesUrl
        /// </summary>
        public static PropertyDefinition PagesUrl = new PropertyDefinition(nameof(PagesUrl), typeof(string));


        /// <summary>
        /// ParentNotebook
        /// </summary>
        public static PropertyDefinition ParentNotebook = new PropertyDefinition(nameof(ParentNotebook), typeof(Notebook));


        /// <summary>
        /// ParentSectionGroup
        /// </summary>
        public static PropertyDefinition ParentSectionGroup = new PropertyDefinition(nameof(ParentSectionGroup), typeof(SectionGroup));


        /// <summary>
        /// Pages
        /// </summary>
        public static PropertyDefinition Pages = new PropertyDefinition(nameof(Pages), typeof(IList<OnenotePage>));

    }


    /// <summary>
    /// SectionGroupObjectSchema
    /// </summary>
    public class SectionGroupObjectSchema : OnenoteEntityHierarchyModelObjectSchema
    {

        /// <summary>
        /// SectionsUrl
        /// </summary>
        public static PropertyDefinition SectionsUrl = new PropertyDefinition(nameof(SectionsUrl), typeof(string));


        /// <summary>
        /// SectionGroupsUrl
        /// </summary>
        public static PropertyDefinition SectionGroupsUrl = new PropertyDefinition(nameof(SectionGroupsUrl), typeof(string));


        /// <summary>
        /// ParentNotebook
        /// </summary>
        public static PropertyDefinition ParentNotebook = new PropertyDefinition(nameof(ParentNotebook), typeof(Notebook));


        /// <summary>
        /// ParentSectionGroup
        /// </summary>
        public static PropertyDefinition ParentSectionGroup = new PropertyDefinition(nameof(ParentSectionGroup), typeof(SectionGroup));


        /// <summary>
        /// Sections
        /// </summary>
        public static PropertyDefinition Sections = new PropertyDefinition(nameof(Sections), typeof(IList<OnenoteSection>));


        /// <summary>
        /// SectionGroups
        /// </summary>
        public static PropertyDefinition SectionGroups = new PropertyDefinition(nameof(SectionGroups), typeof(IList<SectionGroup>));

    }


    /// <summary>
    /// OnenotePageObjectSchema
    /// </summary>
    public class OnenotePageObjectSchema : OnenoteEntitySchemaObjectModelObjectSchema
    {

        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// CreatedByAppId
        /// </summary>
        public static PropertyDefinition CreatedByAppId = new PropertyDefinition(nameof(CreatedByAppId), typeof(string));


        /// <summary>
        /// Links
        /// </summary>
        public static PropertyDefinition Links = new PropertyDefinition(nameof(Links), typeof(PageLinks));


        /// <summary>
        /// ContentUrl
        /// </summary>
        public static PropertyDefinition ContentUrl = new PropertyDefinition(nameof(ContentUrl), typeof(string));


        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Level
        /// </summary>
        public static PropertyDefinition Level = new PropertyDefinition(nameof(Level), typeof(int));


        /// <summary>
        /// Order
        /// </summary>
        public static PropertyDefinition Order = new PropertyDefinition(nameof(Order), typeof(int));


        /// <summary>
        /// UserTags
        /// </summary>
        public static PropertyDefinition UserTags = new PropertyDefinition(nameof(UserTags), typeof(IList<String>));


        /// <summary>
        /// ParentSection
        /// </summary>
        public static PropertyDefinition ParentSection = new PropertyDefinition(nameof(ParentSection), typeof(OnenoteSection));


        /// <summary>
        /// ParentNotebook
        /// </summary>
        public static PropertyDefinition ParentNotebook = new PropertyDefinition(nameof(ParentNotebook), typeof(Notebook));

    }


    /// <summary>
    /// OnenoteResourceObjectSchema
    /// </summary>
    public class OnenoteResourceObjectSchema : OnenoteEntityBaseModelObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// ContentUrl
        /// </summary>
        public static PropertyDefinition ContentUrl = new PropertyDefinition(nameof(ContentUrl), typeof(string));

    }


    /// <summary>
    /// OperationObjectSchema
    /// </summary>
    public class OperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(OperationStatus));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastActionDateTime
        /// </summary>
        public static PropertyDefinition LastActionDateTime = new PropertyDefinition(nameof(LastActionDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// OnenoteOperationObjectSchema
    /// </summary>
    public class OnenoteOperationObjectSchema : OperationObjectSchema
    {

        /// <summary>
        /// ResourceLocation
        /// </summary>
        public static PropertyDefinition ResourceLocation = new PropertyDefinition(nameof(ResourceLocation), typeof(string));


        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(OnenoteOperationError));


        /// <summary>
        /// PercentComplete
        /// </summary>
        public static PropertyDefinition PercentComplete = new PropertyDefinition(nameof(PercentComplete), typeof(string));

    }


    /// <summary>
    /// DirectoryAuditObjectSchema
    /// </summary>
    public class DirectoryAuditObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Category
        /// </summary>
        public static PropertyDefinition Category = new PropertyDefinition(nameof(Category), typeof(string));


        /// <summary>
        /// CorrelationId
        /// </summary>
        public static PropertyDefinition CorrelationId = new PropertyDefinition(nameof(CorrelationId), typeof(Guid));


        /// <summary>
        /// Result
        /// </summary>
        public static PropertyDefinition Result = new PropertyDefinition(nameof(Result), typeof(OperationResult));


        /// <summary>
        /// ResultReason
        /// </summary>
        public static PropertyDefinition ResultReason = new PropertyDefinition(nameof(ResultReason), typeof(string));


        /// <summary>
        /// ActivityDisplayName
        /// </summary>
        public static PropertyDefinition ActivityDisplayName = new PropertyDefinition(nameof(ActivityDisplayName), typeof(string));


        /// <summary>
        /// ActivityDateTime
        /// </summary>
        public static PropertyDefinition ActivityDateTime = new PropertyDefinition(nameof(ActivityDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// InitiatedBy
        /// </summary>
        public static PropertyDefinition InitiatedBy = new PropertyDefinition(nameof(InitiatedBy), typeof(AuditActivityInitiator));


        /// <summary>
        /// TargetResources
        /// </summary>
        public static PropertyDefinition TargetResources = new PropertyDefinition(nameof(TargetResources), typeof(IList<TargetResource>));


        /// <summary>
        /// LoggedByService
        /// </summary>
        public static PropertyDefinition LoggedByService = new PropertyDefinition(nameof(LoggedByService), typeof(string));


        /// <summary>
        /// AdditionalDetails
        /// </summary>
        public static PropertyDefinition AdditionalDetails = new PropertyDefinition(nameof(AdditionalDetails), typeof(IList<KeyValue>));

    }


    /// <summary>
    /// SignInObjectSchema
    /// </summary>
    public class SignInObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// AppId
        /// </summary>
        public static PropertyDefinition AppId = new PropertyDefinition(nameof(AppId), typeof(string));


        /// <summary>
        /// AppDisplayName
        /// </summary>
        public static PropertyDefinition AppDisplayName = new PropertyDefinition(nameof(AppDisplayName), typeof(string));


        /// <summary>
        /// IpAddress
        /// </summary>
        public static PropertyDefinition IpAddress = new PropertyDefinition(nameof(IpAddress), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(SignInStatus));


        /// <summary>
        /// ClientAppUsed
        /// </summary>
        public static PropertyDefinition ClientAppUsed = new PropertyDefinition(nameof(ClientAppUsed), typeof(string));


        /// <summary>
        /// DeviceDetail
        /// </summary>
        public static PropertyDefinition DeviceDetail = new PropertyDefinition(nameof(DeviceDetail), typeof(DeviceDetail));


        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(SignInLocation));


        /// <summary>
        /// MfaDetail
        /// </summary>
        public static PropertyDefinition MfaDetail = new PropertyDefinition(nameof(MfaDetail), typeof(MfaDetail));


        /// <summary>
        /// CorrelationId
        /// </summary>
        public static PropertyDefinition CorrelationId = new PropertyDefinition(nameof(CorrelationId), typeof(string));


        /// <summary>
        /// ConditionalAccessStatus
        /// </summary>
        public static PropertyDefinition ConditionalAccessStatus = new PropertyDefinition(nameof(ConditionalAccessStatus), typeof(ConditionalAccessStatus));


        /// <summary>
        /// AppliedConditionalAccessPolicies
        /// </summary>
        public static PropertyDefinition AppliedConditionalAccessPolicies = new PropertyDefinition(nameof(AppliedConditionalAccessPolicies), typeof(IList<AppliedConditionalAccessPolicy>));


        /// <summary>
        /// OriginalRequestId
        /// </summary>
        public static PropertyDefinition OriginalRequestId = new PropertyDefinition(nameof(OriginalRequestId), typeof(Guid));


        /// <summary>
        /// IsInteractive
        /// </summary>
        public static PropertyDefinition IsInteractive = new PropertyDefinition(nameof(IsInteractive), typeof(bool));


        /// <summary>
        /// TokenIssuerName
        /// </summary>
        public static PropertyDefinition TokenIssuerName = new PropertyDefinition(nameof(TokenIssuerName), typeof(string));


        /// <summary>
        /// TokenIssuerType
        /// </summary>
        public static PropertyDefinition TokenIssuerType = new PropertyDefinition(nameof(TokenIssuerType), typeof(TokenIssuerType));


        /// <summary>
        /// AuthenticationProcessingDetails
        /// </summary>
        public static PropertyDefinition AuthenticationProcessingDetails = new PropertyDefinition(nameof(AuthenticationProcessingDetails), typeof(IList<KeyValue>));


        /// <summary>
        /// NetworkLocationDetails
        /// </summary>
        public static PropertyDefinition NetworkLocationDetails = new PropertyDefinition(nameof(NetworkLocationDetails), typeof(IList<NetworkLocationDetail>));


        /// <summary>
        /// ProcessingTimeInMilliseconds
        /// </summary>
        public static PropertyDefinition ProcessingTimeInMilliseconds = new PropertyDefinition(nameof(ProcessingTimeInMilliseconds), typeof(int));


        /// <summary>
        /// RiskDetail
        /// </summary>
        public static PropertyDefinition RiskDetail = new PropertyDefinition(nameof(RiskDetail), typeof(RiskDetail));


        /// <summary>
        /// RiskLevelAggregated
        /// </summary>
        public static PropertyDefinition RiskLevelAggregated = new PropertyDefinition(nameof(RiskLevelAggregated), typeof(RiskLevel));


        /// <summary>
        /// RiskLevelDuringSignIn
        /// </summary>
        public static PropertyDefinition RiskLevelDuringSignIn = new PropertyDefinition(nameof(RiskLevelDuringSignIn), typeof(RiskLevel));


        /// <summary>
        /// RiskState
        /// </summary>
        public static PropertyDefinition RiskState = new PropertyDefinition(nameof(RiskState), typeof(RiskState));


        /// <summary>
        /// RiskEventTypes
        /// </summary>
        public static PropertyDefinition RiskEventTypes = new PropertyDefinition(nameof(RiskEventTypes), typeof(IList<RiskEventType>));


        /// <summary>
        /// ResourceDisplayName
        /// </summary>
        public static PropertyDefinition ResourceDisplayName = new PropertyDefinition(nameof(ResourceDisplayName), typeof(string));


        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// AuthenticationMethodsUsed
        /// </summary>
        public static PropertyDefinition AuthenticationMethodsUsed = new PropertyDefinition(nameof(AuthenticationMethodsUsed), typeof(IList<String>));

    }


    /// <summary>
    /// RestrictedSignInObjectSchema
    /// </summary>
    public class RestrictedSignInObjectSchema : SignInObjectSchema
    {

        /// <summary>
        /// TargetTenantId
        /// </summary>
        public static PropertyDefinition TargetTenantId = new PropertyDefinition(nameof(TargetTenantId), typeof(Guid));

    }


    /// <summary>
    /// AuditLogRootObjectSchema
    /// </summary>
    public class AuditLogRootObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SignIns
        /// </summary>
        public static PropertyDefinition SignIns = new PropertyDefinition(nameof(SignIns), typeof(IList<SignIn>));


        /// <summary>
        /// DirectoryAudits
        /// </summary>
        public static PropertyDefinition DirectoryAudits = new PropertyDefinition(nameof(DirectoryAudits), typeof(IList<DirectoryAudit>));


        /// <summary>
        /// RestrictedSignIns
        /// </summary>
        public static PropertyDefinition RestrictedSignIns = new PropertyDefinition(nameof(RestrictedSignIns), typeof(IList<RestrictedSignIn>));

    }


    /// <summary>
    /// IdentityRiskEventObjectSchema
    /// </summary>
    public class IdentityRiskEventObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// RiskEventDateTime
        /// </summary>
        public static PropertyDefinition RiskEventDateTime = new PropertyDefinition(nameof(RiskEventDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RiskEventType
        /// </summary>
        public static PropertyDefinition RiskEventType = new PropertyDefinition(nameof(RiskEventType), typeof(string));


        /// <summary>
        /// RiskLevel
        /// </summary>
        public static PropertyDefinition RiskLevel = new PropertyDefinition(nameof(RiskLevel), typeof(RiskLevel));


        /// <summary>
        /// RiskEventStatus
        /// </summary>
        public static PropertyDefinition RiskEventStatus = new PropertyDefinition(nameof(RiskEventStatus), typeof(RiskEventStatus));


        /// <summary>
        /// ClosedDateTime
        /// </summary>
        public static PropertyDefinition ClosedDateTime = new PropertyDefinition(nameof(ClosedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// ImpactedUser
        /// </summary>
        public static PropertyDefinition ImpactedUser = new PropertyDefinition(nameof(ImpactedUser), typeof(User));

    }


    /// <summary>
    /// LocatedRiskEventObjectSchema
    /// </summary>
    public class LocatedRiskEventObjectSchema : IdentityRiskEventObjectSchema
    {

        /// <summary>
        /// Location
        /// </summary>
        public static PropertyDefinition Location = new PropertyDefinition(nameof(Location), typeof(SignInLocation));


        /// <summary>
        /// IpAddress
        /// </summary>
        public static PropertyDefinition IpAddress = new PropertyDefinition(nameof(IpAddress), typeof(string));

    }


    /// <summary>
    /// ImpossibleTravelRiskEventObjectSchema
    /// </summary>
    public class ImpossibleTravelRiskEventObjectSchema : LocatedRiskEventObjectSchema
    {

        /// <summary>
        /// UserAgent
        /// </summary>
        public static PropertyDefinition UserAgent = new PropertyDefinition(nameof(UserAgent), typeof(string));


        /// <summary>
        /// DeviceInformation
        /// </summary>
        public static PropertyDefinition DeviceInformation = new PropertyDefinition(nameof(DeviceInformation), typeof(string));


        /// <summary>
        /// IsAtypicalLocation
        /// </summary>
        public static PropertyDefinition IsAtypicalLocation = new PropertyDefinition(nameof(IsAtypicalLocation), typeof(bool));


        /// <summary>
        /// PreviousSigninDateTime
        /// </summary>
        public static PropertyDefinition PreviousSigninDateTime = new PropertyDefinition(nameof(PreviousSigninDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// PreviousLocation
        /// </summary>
        public static PropertyDefinition PreviousLocation = new PropertyDefinition(nameof(PreviousLocation), typeof(SignInLocation));


        /// <summary>
        /// PreviousIpAddress
        /// </summary>
        public static PropertyDefinition PreviousIpAddress = new PropertyDefinition(nameof(PreviousIpAddress), typeof(string));

    }


    /// <summary>
    /// LeakedCredentialsRiskEventObjectSchema
    /// </summary>
    public class LeakedCredentialsRiskEventObjectSchema : IdentityRiskEventObjectSchema
    {
    }


    /// <summary>
    /// AnonymousIpRiskEventObjectSchema
    /// </summary>
    public class AnonymousIpRiskEventObjectSchema : LocatedRiskEventObjectSchema
    {
    }


    /// <summary>
    /// SuspiciousIpRiskEventObjectSchema
    /// </summary>
    public class SuspiciousIpRiskEventObjectSchema : LocatedRiskEventObjectSchema
    {
    }


    /// <summary>
    /// UnfamiliarLocationRiskEventObjectSchema
    /// </summary>
    public class UnfamiliarLocationRiskEventObjectSchema : LocatedRiskEventObjectSchema
    {
    }


    /// <summary>
    /// MalwareRiskEventObjectSchema
    /// </summary>
    public class MalwareRiskEventObjectSchema : LocatedRiskEventObjectSchema
    {

        /// <summary>
        /// DeviceInformation
        /// </summary>
        public static PropertyDefinition DeviceInformation = new PropertyDefinition(nameof(DeviceInformation), typeof(string));


        /// <summary>
        /// MalwareName
        /// </summary>
        public static PropertyDefinition MalwareName = new PropertyDefinition(nameof(MalwareName), typeof(string));

    }


    /// <summary>
    /// RiskyUserObjectSchema
    /// </summary>
    public class RiskyUserObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// IsGuest
        /// </summary>
        public static PropertyDefinition IsGuest = new PropertyDefinition(nameof(IsGuest), typeof(bool));


        /// <summary>
        /// RiskLastUpdatedDateTime
        /// </summary>
        public static PropertyDefinition RiskLastUpdatedDateTime = new PropertyDefinition(nameof(RiskLastUpdatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RiskLevel
        /// </summary>
        public static PropertyDefinition RiskLevel = new PropertyDefinition(nameof(RiskLevel), typeof(RiskLevel));


        /// <summary>
        /// RiskState
        /// </summary>
        public static PropertyDefinition RiskState = new PropertyDefinition(nameof(RiskState), typeof(RiskState));


        /// <summary>
        /// RiskDetail
        /// </summary>
        public static PropertyDefinition RiskDetail = new PropertyDefinition(nameof(RiskDetail), typeof(RiskDetail));


        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// PrivilegedRoleObjectSchema
    /// </summary>
    public class PrivilegedRoleObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(PrivilegedRoleSettings));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<PrivilegedRoleAssignment>));


        /// <summary>
        /// Summary
        /// </summary>
        public static PropertyDefinition Summary = new PropertyDefinition(nameof(Summary), typeof(PrivilegedRoleSummary));

    }


    /// <summary>
    /// PrivilegedRoleSettingsObjectSchema
    /// </summary>
    public class PrivilegedRoleSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ApproverIds
        /// </summary>
        public static PropertyDefinition ApproverIds = new PropertyDefinition(nameof(ApproverIds), typeof(IList<String>));


        /// <summary>
        /// MinElevationDuration
        /// </summary>
        public static PropertyDefinition MinElevationDuration = new PropertyDefinition(nameof(MinElevationDuration), typeof(TimeSpan));


        /// <summary>
        /// MaxElavationDuration
        /// </summary>
        public static PropertyDefinition MaxElavationDuration = new PropertyDefinition(nameof(MaxElavationDuration), typeof(TimeSpan));


        /// <summary>
        /// ElevationDuration
        /// </summary>
        public static PropertyDefinition ElevationDuration = new PropertyDefinition(nameof(ElevationDuration), typeof(TimeSpan));


        /// <summary>
        /// NotificationToUserOnElevation
        /// </summary>
        public static PropertyDefinition NotificationToUserOnElevation = new PropertyDefinition(nameof(NotificationToUserOnElevation), typeof(bool));


        /// <summary>
        /// TicketingInfoOnElevation
        /// </summary>
        public static PropertyDefinition TicketingInfoOnElevation = new PropertyDefinition(nameof(TicketingInfoOnElevation), typeof(bool));


        /// <summary>
        /// MfaOnElevation
        /// </summary>
        public static PropertyDefinition MfaOnElevation = new PropertyDefinition(nameof(MfaOnElevation), typeof(bool));


        /// <summary>
        /// LastGlobalAdmin
        /// </summary>
        public static PropertyDefinition LastGlobalAdmin = new PropertyDefinition(nameof(LastGlobalAdmin), typeof(bool));


        /// <summary>
        /// IsMfaOnElevationConfigurable
        /// </summary>
        public static PropertyDefinition IsMfaOnElevationConfigurable = new PropertyDefinition(nameof(IsMfaOnElevationConfigurable), typeof(bool));


        /// <summary>
        /// ApprovalOnElevation
        /// </summary>
        public static PropertyDefinition ApprovalOnElevation = new PropertyDefinition(nameof(ApprovalOnElevation), typeof(bool));

    }


    /// <summary>
    /// PrivilegedRoleAssignmentObjectSchema
    /// </summary>
    public class PrivilegedRoleAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// RoleId
        /// </summary>
        public static PropertyDefinition RoleId = new PropertyDefinition(nameof(RoleId), typeof(string));


        /// <summary>
        /// IsElevated
        /// </summary>
        public static PropertyDefinition IsElevated = new PropertyDefinition(nameof(IsElevated), typeof(bool));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ResultMessage
        /// </summary>
        public static PropertyDefinition ResultMessage = new PropertyDefinition(nameof(ResultMessage), typeof(string));


        /// <summary>
        /// RoleInfo
        /// </summary>
        public static PropertyDefinition RoleInfo = new PropertyDefinition(nameof(RoleInfo), typeof(PrivilegedRole));

    }


    /// <summary>
    /// PrivilegedRoleSummaryObjectSchema
    /// </summary>
    public class PrivilegedRoleSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(RoleSummaryStatus));


        /// <summary>
        /// UsersCount
        /// </summary>
        public static PropertyDefinition UsersCount = new PropertyDefinition(nameof(UsersCount), typeof(int));


        /// <summary>
        /// ManagedCount
        /// </summary>
        public static PropertyDefinition ManagedCount = new PropertyDefinition(nameof(ManagedCount), typeof(int));


        /// <summary>
        /// ElevatedCount
        /// </summary>
        public static PropertyDefinition ElevatedCount = new PropertyDefinition(nameof(ElevatedCount), typeof(int));


        /// <summary>
        /// MfaEnabled
        /// </summary>
        public static PropertyDefinition MfaEnabled = new PropertyDefinition(nameof(MfaEnabled), typeof(bool));

    }


    /// <summary>
    /// PrivilegedOperationEventObjectSchema
    /// </summary>
    public class PrivilegedOperationEventObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserMail
        /// </summary>
        public static PropertyDefinition UserMail = new PropertyDefinition(nameof(UserMail), typeof(string));


        /// <summary>
        /// RoleId
        /// </summary>
        public static PropertyDefinition RoleId = new PropertyDefinition(nameof(RoleId), typeof(string));


        /// <summary>
        /// RoleName
        /// </summary>
        public static PropertyDefinition RoleName = new PropertyDefinition(nameof(RoleName), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreationDateTime
        /// </summary>
        public static PropertyDefinition CreationDateTime = new PropertyDefinition(nameof(CreationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RequestorId
        /// </summary>
        public static PropertyDefinition RequestorId = new PropertyDefinition(nameof(RequestorId), typeof(string));


        /// <summary>
        /// RequestorName
        /// </summary>
        public static PropertyDefinition RequestorName = new PropertyDefinition(nameof(RequestorName), typeof(string));


        /// <summary>
        /// TenantId
        /// </summary>
        public static PropertyDefinition TenantId = new PropertyDefinition(nameof(TenantId), typeof(string));


        /// <summary>
        /// RequestType
        /// </summary>
        public static PropertyDefinition RequestType = new PropertyDefinition(nameof(RequestType), typeof(string));


        /// <summary>
        /// AdditionalInformation
        /// </summary>
        public static PropertyDefinition AdditionalInformation = new PropertyDefinition(nameof(AdditionalInformation), typeof(string));


        /// <summary>
        /// ReferenceKey
        /// </summary>
        public static PropertyDefinition ReferenceKey = new PropertyDefinition(nameof(ReferenceKey), typeof(string));


        /// <summary>
        /// ReferenceSystem
        /// </summary>
        public static PropertyDefinition ReferenceSystem = new PropertyDefinition(nameof(ReferenceSystem), typeof(string));

    }


    /// <summary>
    /// PrivilegedSignupStatusObjectSchema
    /// </summary>
    public class PrivilegedSignupStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// IsRegistered
        /// </summary>
        public static PropertyDefinition IsRegistered = new PropertyDefinition(nameof(IsRegistered), typeof(bool));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(SetupStatus));

    }


    /// <summary>
    /// PrivilegedRoleAssignmentRequestObjectSchema
    /// </summary>
    public class PrivilegedRoleAssignmentRequestObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Schedule
        /// </summary>
        public static PropertyDefinition Schedule = new PropertyDefinition(nameof(Schedule), typeof(GovernanceSchedule));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// RoleId
        /// </summary>
        public static PropertyDefinition RoleId = new PropertyDefinition(nameof(RoleId), typeof(string));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// AssignmentState
        /// </summary>
        public static PropertyDefinition AssignmentState = new PropertyDefinition(nameof(AssignmentState), typeof(string));


        /// <summary>
        /// RequestedDateTime
        /// </summary>
        public static PropertyDefinition RequestedDateTime = new PropertyDefinition(nameof(RequestedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Duration
        /// </summary>
        public static PropertyDefinition Duration = new PropertyDefinition(nameof(Duration), typeof(string));


        /// <summary>
        /// Reason
        /// </summary>
        public static PropertyDefinition Reason = new PropertyDefinition(nameof(Reason), typeof(string));


        /// <summary>
        /// TicketNumber
        /// </summary>
        public static PropertyDefinition TicketNumber = new PropertyDefinition(nameof(TicketNumber), typeof(string));


        /// <summary>
        /// TicketSystem
        /// </summary>
        public static PropertyDefinition TicketSystem = new PropertyDefinition(nameof(TicketSystem), typeof(string));


        /// <summary>
        /// RoleInfo
        /// </summary>
        public static PropertyDefinition RoleInfo = new PropertyDefinition(nameof(RoleInfo), typeof(PrivilegedRole));

    }


    /// <summary>
    /// PrivilegedApprovalObjectSchema
    /// </summary>
    public class PrivilegedApprovalObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// RoleId
        /// </summary>
        public static PropertyDefinition RoleId = new PropertyDefinition(nameof(RoleId), typeof(string));


        /// <summary>
        /// ApprovalType
        /// </summary>
        public static PropertyDefinition ApprovalType = new PropertyDefinition(nameof(ApprovalType), typeof(string));


        /// <summary>
        /// ApprovalState
        /// </summary>
        public static PropertyDefinition ApprovalState = new PropertyDefinition(nameof(ApprovalState), typeof(ApprovalState));


        /// <summary>
        /// ApprovalDuration
        /// </summary>
        public static PropertyDefinition ApprovalDuration = new PropertyDefinition(nameof(ApprovalDuration), typeof(TimeSpan));


        /// <summary>
        /// RequestorReason
        /// </summary>
        public static PropertyDefinition RequestorReason = new PropertyDefinition(nameof(RequestorReason), typeof(string));


        /// <summary>
        /// ApproverReason
        /// </summary>
        public static PropertyDefinition ApproverReason = new PropertyDefinition(nameof(ApproverReason), typeof(string));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Request
        /// </summary>
        public static PropertyDefinition Request = new PropertyDefinition(nameof(Request), typeof(PrivilegedRoleAssignmentRequest));


        /// <summary>
        /// RoleInfo
        /// </summary>
        public static PropertyDefinition RoleInfo = new PropertyDefinition(nameof(RoleInfo), typeof(PrivilegedRole));

    }


    /// <summary>
    /// TenantSetupInfoObjectSchema
    /// </summary>
    public class TenantSetupInfoObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserRolesActions
        /// </summary>
        public static PropertyDefinition UserRolesActions = new PropertyDefinition(nameof(UserRolesActions), typeof(string));


        /// <summary>
        /// FirstTimeSetup
        /// </summary>
        public static PropertyDefinition FirstTimeSetup = new PropertyDefinition(nameof(FirstTimeSetup), typeof(bool));


        /// <summary>
        /// RelevantRolesSettings
        /// </summary>
        public static PropertyDefinition RelevantRolesSettings = new PropertyDefinition(nameof(RelevantRolesSettings), typeof(IList<String>));


        /// <summary>
        /// SkipSetup
        /// </summary>
        public static PropertyDefinition SkipSetup = new PropertyDefinition(nameof(SkipSetup), typeof(bool));


        /// <summary>
        /// SetupStatus
        /// </summary>
        public static PropertyDefinition SetupStatus = new PropertyDefinition(nameof(SetupStatus), typeof(SetupStatus));


        /// <summary>
        /// DefaultRolesSettings
        /// </summary>
        public static PropertyDefinition DefaultRolesSettings = new PropertyDefinition(nameof(DefaultRolesSettings), typeof(PrivilegedRoleSettings));

    }


    /// <summary>
    /// InvitationObjectSchema
    /// </summary>
    public class InvitationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// InvitedUserDisplayName
        /// </summary>
        public static PropertyDefinition InvitedUserDisplayName = new PropertyDefinition(nameof(InvitedUserDisplayName), typeof(string));


        /// <summary>
        /// InvitedUserType
        /// </summary>
        public static PropertyDefinition InvitedUserType = new PropertyDefinition(nameof(InvitedUserType), typeof(string));


        /// <summary>
        /// InvitedUserEmailAddress
        /// </summary>
        public static PropertyDefinition InvitedUserEmailAddress = new PropertyDefinition(nameof(InvitedUserEmailAddress), typeof(string));


        /// <summary>
        /// InvitedUserMessageInfo
        /// </summary>
        public static PropertyDefinition InvitedUserMessageInfo = new PropertyDefinition(nameof(InvitedUserMessageInfo), typeof(InvitedUserMessageInfo));


        /// <summary>
        /// SendInvitationMessage
        /// </summary>
        public static PropertyDefinition SendInvitationMessage = new PropertyDefinition(nameof(SendInvitationMessage), typeof(bool));


        /// <summary>
        /// InviteRedirectUrl
        /// </summary>
        public static PropertyDefinition InviteRedirectUrl = new PropertyDefinition(nameof(InviteRedirectUrl), typeof(string));


        /// <summary>
        /// InviteRedeemUrl
        /// </summary>
        public static PropertyDefinition InviteRedeemUrl = new PropertyDefinition(nameof(InviteRedeemUrl), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// InvitedUser
        /// </summary>
        public static PropertyDefinition InvitedUser = new PropertyDefinition(nameof(InvitedUser), typeof(User));

    }


    /// <summary>
    /// DeviceManagementObjectSchema
    /// </summary>
    public class DeviceManagementObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SubscriptionState
        /// </summary>
        public static PropertyDefinition SubscriptionState = new PropertyDefinition(nameof(SubscriptionState), typeof(DeviceManagementSubscriptionState));


        /// <summary>
        /// Subscriptions
        /// </summary>
        public static PropertyDefinition Subscriptions = new PropertyDefinition(nameof(Subscriptions), typeof(DeviceManagementSubscriptions));


        /// <summary>
        /// ManagedDeviceCleanupSettings
        /// </summary>
        public static PropertyDefinition ManagedDeviceCleanupSettings = new PropertyDefinition(nameof(ManagedDeviceCleanupSettings), typeof(ManagedDeviceCleanupSettings));


        /// <summary>
        /// AdminConsent
        /// </summary>
        public static PropertyDefinition AdminConsent = new PropertyDefinition(nameof(AdminConsent), typeof(AdminConsent));


        /// <summary>
        /// DeviceProtectionOverview
        /// </summary>
        public static PropertyDefinition DeviceProtectionOverview = new PropertyDefinition(nameof(DeviceProtectionOverview), typeof(DeviceProtectionOverview));


        /// <summary>
        /// WindowsMalwareOverview
        /// </summary>
        public static PropertyDefinition WindowsMalwareOverview = new PropertyDefinition(nameof(WindowsMalwareOverview), typeof(WindowsMalwareOverview));


        /// <summary>
        /// AccountMoveCompletionDateTime
        /// </summary>
        public static PropertyDefinition AccountMoveCompletionDateTime = new PropertyDefinition(nameof(AccountMoveCompletionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(DeviceManagementSettings));


        /// <summary>
        /// MaximumDepTokens
        /// </summary>
        public static PropertyDefinition MaximumDepTokens = new PropertyDefinition(nameof(MaximumDepTokens), typeof(int));


        /// <summary>
        /// IntuneAccountId
        /// </summary>
        public static PropertyDefinition IntuneAccountId = new PropertyDefinition(nameof(IntuneAccountId), typeof(Guid));


        /// <summary>
        /// LastReportAggregationDateTime
        /// </summary>
        public static PropertyDefinition LastReportAggregationDateTime = new PropertyDefinition(nameof(LastReportAggregationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeviceComplianceReportSummarizationDateTime
        /// </summary>
        public static PropertyDefinition DeviceComplianceReportSummarizationDateTime = new PropertyDefinition(nameof(DeviceComplianceReportSummarizationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LegacyPcManangementEnabled
        /// </summary>
        public static PropertyDefinition LegacyPcManangementEnabled = new PropertyDefinition(nameof(LegacyPcManangementEnabled), typeof(bool));


        /// <summary>
        /// IntuneBrand
        /// </summary>
        public static PropertyDefinition IntuneBrand = new PropertyDefinition(nameof(IntuneBrand), typeof(IntuneBrand));


        /// <summary>
        /// TermsAndConditions
        /// </summary>
        public static PropertyDefinition TermsAndConditions = new PropertyDefinition(nameof(TermsAndConditions), typeof(IList<TermsAndConditions>));


        /// <summary>
        /// AndroidForWorkSettings
        /// </summary>
        public static PropertyDefinition AndroidForWorkSettings = new PropertyDefinition(nameof(AndroidForWorkSettings), typeof(AndroidForWorkSettings));


        /// <summary>
        /// AndroidForWorkAppConfigurationSchemas
        /// </summary>
        public static PropertyDefinition AndroidForWorkAppConfigurationSchemas = new PropertyDefinition(nameof(AndroidForWorkAppConfigurationSchemas), typeof(IList<AndroidForWorkAppConfigurationSchema>));


        /// <summary>
        /// AndroidForWorkEnrollmentProfiles
        /// </summary>
        public static PropertyDefinition AndroidForWorkEnrollmentProfiles = new PropertyDefinition(nameof(AndroidForWorkEnrollmentProfiles), typeof(IList<AndroidForWorkEnrollmentProfile>));


        /// <summary>
        /// AndroidManagedStoreAccountEnterpriseSettings
        /// </summary>
        public static PropertyDefinition AndroidManagedStoreAccountEnterpriseSettings = new PropertyDefinition(nameof(AndroidManagedStoreAccountEnterpriseSettings), typeof(AndroidManagedStoreAccountEnterpriseSettings));


        /// <summary>
        /// AndroidManagedStoreAppConfigurationSchemas
        /// </summary>
        public static PropertyDefinition AndroidManagedStoreAppConfigurationSchemas = new PropertyDefinition(nameof(AndroidManagedStoreAppConfigurationSchemas), typeof(IList<AndroidManagedStoreAppConfigurationSchema>));


        /// <summary>
        /// AndroidDeviceOwnerEnrollmentProfiles
        /// </summary>
        public static PropertyDefinition AndroidDeviceOwnerEnrollmentProfiles = new PropertyDefinition(nameof(AndroidDeviceOwnerEnrollmentProfiles), typeof(IList<AndroidDeviceOwnerEnrollmentProfile>));


        /// <summary>
        /// RemoteActionAudits
        /// </summary>
        public static PropertyDefinition RemoteActionAudits = new PropertyDefinition(nameof(RemoteActionAudits), typeof(IList<RemoteActionAudit>));


        /// <summary>
        /// ApplePushNotificationCertificate
        /// </summary>
        public static PropertyDefinition ApplePushNotificationCertificate = new PropertyDefinition(nameof(ApplePushNotificationCertificate), typeof(ApplePushNotificationCertificate));


        /// <summary>
        /// DeviceManagementScripts
        /// </summary>
        public static PropertyDefinition DeviceManagementScripts = new PropertyDefinition(nameof(DeviceManagementScripts), typeof(IList<DeviceManagementScript>));


        /// <summary>
        /// ManagedDeviceOverview
        /// </summary>
        public static PropertyDefinition ManagedDeviceOverview = new PropertyDefinition(nameof(ManagedDeviceOverview), typeof(ManagedDeviceOverview));


        /// <summary>
        /// DetectedApps
        /// </summary>
        public static PropertyDefinition DetectedApps = new PropertyDefinition(nameof(DetectedApps), typeof(IList<DetectedApp>));


        /// <summary>
        /// ManagedDevices
        /// </summary>
        public static PropertyDefinition ManagedDevices = new PropertyDefinition(nameof(ManagedDevices), typeof(IList<ManagedDevice>));


        /// <summary>
        /// WindowsMalwareInformation
        /// </summary>
        public static PropertyDefinition WindowsMalwareInformation = new PropertyDefinition(nameof(WindowsMalwareInformation), typeof(IList<WindowsMalwareInformation>));


        /// <summary>
        /// DataSharingConsents
        /// </summary>
        public static PropertyDefinition DataSharingConsents = new PropertyDefinition(nameof(DataSharingConsents), typeof(IList<DataSharingConsent>));


        /// <summary>
        /// MobileAppTroubleshootingEvents
        /// </summary>
        public static PropertyDefinition MobileAppTroubleshootingEvents = new PropertyDefinition(nameof(MobileAppTroubleshootingEvents), typeof(IList<MobileAppTroubleshootingEvent>));


        /// <summary>
        /// DeviceConfigurations
        /// </summary>
        public static PropertyDefinition DeviceConfigurations = new PropertyDefinition(nameof(DeviceConfigurations), typeof(IList<DeviceConfiguration>));


        /// <summary>
        /// DeviceCompliancePolicies
        /// </summary>
        public static PropertyDefinition DeviceCompliancePolicies = new PropertyDefinition(nameof(DeviceCompliancePolicies), typeof(IList<DeviceCompliancePolicy>));


        /// <summary>
        /// SoftwareUpdateStatusSummary
        /// </summary>
        public static PropertyDefinition SoftwareUpdateStatusSummary = new PropertyDefinition(nameof(SoftwareUpdateStatusSummary), typeof(SoftwareUpdateStatusSummary));


        /// <summary>
        /// DeviceCompliancePolicyDeviceStateSummary
        /// </summary>
        public static PropertyDefinition DeviceCompliancePolicyDeviceStateSummary = new PropertyDefinition(nameof(DeviceCompliancePolicyDeviceStateSummary), typeof(DeviceCompliancePolicyDeviceStateSummary));


        /// <summary>
        /// DeviceCompliancePolicySettingStateSummaries
        /// </summary>
        public static PropertyDefinition DeviceCompliancePolicySettingStateSummaries = new PropertyDefinition(nameof(DeviceCompliancePolicySettingStateSummaries), typeof(IList<DeviceCompliancePolicySettingStateSummary>));


        /// <summary>
        /// AdvancedThreatProtectionOnboardingStateSummary
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOnboardingStateSummary = new PropertyDefinition(nameof(AdvancedThreatProtectionOnboardingStateSummary), typeof(AdvancedThreatProtectionOnboardingStateSummary));


        /// <summary>
        /// DeviceConfigurationDeviceStateSummaries
        /// </summary>
        public static PropertyDefinition DeviceConfigurationDeviceStateSummaries = new PropertyDefinition(nameof(DeviceConfigurationDeviceStateSummaries), typeof(DeviceConfigurationDeviceStateSummary));


        /// <summary>
        /// DeviceConfigurationUserStateSummaries
        /// </summary>
        public static PropertyDefinition DeviceConfigurationUserStateSummaries = new PropertyDefinition(nameof(DeviceConfigurationUserStateSummaries), typeof(DeviceConfigurationUserStateSummary));


        /// <summary>
        /// CartToClassAssociations
        /// </summary>
        public static PropertyDefinition CartToClassAssociations = new PropertyDefinition(nameof(CartToClassAssociations), typeof(IList<CartToClassAssociation>));


        /// <summary>
        /// IosUpdateStatuses
        /// </summary>
        public static PropertyDefinition IosUpdateStatuses = new PropertyDefinition(nameof(IosUpdateStatuses), typeof(IList<IosUpdateDeviceStatus>));


        /// <summary>
        /// NdesConnectors
        /// </summary>
        public static PropertyDefinition NdesConnectors = new PropertyDefinition(nameof(NdesConnectors), typeof(IList<NdesConnector>));


        /// <summary>
        /// DeviceConfigurationRestrictedAppsViolations
        /// </summary>
        public static PropertyDefinition DeviceConfigurationRestrictedAppsViolations = new PropertyDefinition(nameof(DeviceConfigurationRestrictedAppsViolations), typeof(IList<RestrictedAppsViolation>));


        /// <summary>
        /// DeviceConfigurationConflictSummary
        /// </summary>
        public static PropertyDefinition DeviceConfigurationConflictSummary = new PropertyDefinition(nameof(DeviceConfigurationConflictSummary), typeof(IList<DeviceConfigurationConflictSummary>));


        /// <summary>
        /// DeviceCategories
        /// </summary>
        public static PropertyDefinition DeviceCategories = new PropertyDefinition(nameof(DeviceCategories), typeof(IList<DeviceCategory>));


        /// <summary>
        /// ExchangeConnectors
        /// </summary>
        public static PropertyDefinition ExchangeConnectors = new PropertyDefinition(nameof(ExchangeConnectors), typeof(IList<DeviceManagementExchangeConnector>));


        /// <summary>
        /// DeviceEnrollmentConfigurations
        /// </summary>
        public static PropertyDefinition DeviceEnrollmentConfigurations = new PropertyDefinition(nameof(DeviceEnrollmentConfigurations), typeof(IList<DeviceEnrollmentConfiguration>));


        /// <summary>
        /// ExchangeOnPremisesPolicy
        /// </summary>
        public static PropertyDefinition ExchangeOnPremisesPolicy = new PropertyDefinition(nameof(ExchangeOnPremisesPolicy), typeof(DeviceManagementExchangeOnPremisesPolicy));


        /// <summary>
        /// ExchangeOnPremisesPolicies
        /// </summary>
        public static PropertyDefinition ExchangeOnPremisesPolicies = new PropertyDefinition(nameof(ExchangeOnPremisesPolicies), typeof(IList<DeviceManagementExchangeOnPremisesPolicy>));


        /// <summary>
        /// ConditionalAccessSettings
        /// </summary>
        public static PropertyDefinition ConditionalAccessSettings = new PropertyDefinition(nameof(ConditionalAccessSettings), typeof(OnPremisesConditionalAccessSettings));


        /// <summary>
        /// MobileThreatDefenseConnectors
        /// </summary>
        public static PropertyDefinition MobileThreatDefenseConnectors = new PropertyDefinition(nameof(MobileThreatDefenseConnectors), typeof(IList<MobileThreatDefenseConnector>));


        /// <summary>
        /// DeviceManagementPartners
        /// </summary>
        public static PropertyDefinition DeviceManagementPartners = new PropertyDefinition(nameof(DeviceManagementPartners), typeof(IList<DeviceManagementPartner>));


        /// <summary>
        /// ManagementConditions
        /// </summary>
        public static PropertyDefinition ManagementConditions = new PropertyDefinition(nameof(ManagementConditions), typeof(IList<ManagementCondition>));


        /// <summary>
        /// ManagementConditionStatements
        /// </summary>
        public static PropertyDefinition ManagementConditionStatements = new PropertyDefinition(nameof(ManagementConditionStatements), typeof(IList<ManagementConditionStatement>));


        /// <summary>
        /// NotificationMessageTemplates
        /// </summary>
        public static PropertyDefinition NotificationMessageTemplates = new PropertyDefinition(nameof(NotificationMessageTemplates), typeof(IList<NotificationMessageTemplate>));


        /// <summary>
        /// RoleDefinitions
        /// </summary>
        public static PropertyDefinition RoleDefinitions = new PropertyDefinition(nameof(RoleDefinitions), typeof(IList<RoleDefinition>));


        /// <summary>
        /// RoleAssignments
        /// </summary>
        public static PropertyDefinition RoleAssignments = new PropertyDefinition(nameof(RoleAssignments), typeof(IList<DeviceAndAppManagementRoleAssignment>));


        /// <summary>
        /// RoleScopeTags
        /// </summary>
        public static PropertyDefinition RoleScopeTags = new PropertyDefinition(nameof(RoleScopeTags), typeof(IList<RoleScopeTag>));


        /// <summary>
        /// ResourceOperations
        /// </summary>
        public static PropertyDefinition ResourceOperations = new PropertyDefinition(nameof(ResourceOperations), typeof(IList<ResourceOperation>));


        /// <summary>
        /// EmbeddedSIMActivationCodePools
        /// </summary>
        public static PropertyDefinition EmbeddedSIMActivationCodePools = new PropertyDefinition(nameof(EmbeddedSIMActivationCodePools), typeof(IList<EmbeddedSIMActivationCodePool>));


        /// <summary>
        /// TelecomExpenseManagementPartners
        /// </summary>
        public static PropertyDefinition TelecomExpenseManagementPartners = new PropertyDefinition(nameof(TelecomExpenseManagementPartners), typeof(IList<TelecomExpenseManagementPartner>));


        /// <summary>
        /// WindowsAutopilotSettings
        /// </summary>
        public static PropertyDefinition WindowsAutopilotSettings = new PropertyDefinition(nameof(WindowsAutopilotSettings), typeof(WindowsAutopilotSettings));


        /// <summary>
        /// WindowsAutopilotDeviceIdentities
        /// </summary>
        public static PropertyDefinition WindowsAutopilotDeviceIdentities = new PropertyDefinition(nameof(WindowsAutopilotDeviceIdentities), typeof(IList<WindowsAutopilotDeviceIdentity>));


        /// <summary>
        /// WindowsAutopilotDeploymentProfiles
        /// </summary>
        public static PropertyDefinition WindowsAutopilotDeploymentProfiles = new PropertyDefinition(nameof(WindowsAutopilotDeploymentProfiles), typeof(IList<WindowsAutopilotDeploymentProfile>));


        /// <summary>
        /// ImportedDeviceIdentities
        /// </summary>
        public static PropertyDefinition ImportedDeviceIdentities = new PropertyDefinition(nameof(ImportedDeviceIdentities), typeof(IList<ImportedDeviceIdentity>));


        /// <summary>
        /// DepOnboardingSettings
        /// </summary>
        public static PropertyDefinition DepOnboardingSettings = new PropertyDefinition(nameof(DepOnboardingSettings), typeof(IList<DepOnboardingSetting>));


        /// <summary>
        /// ImportedWindowsAutopilotDeviceIdentityUploads
        /// </summary>
        public static PropertyDefinition ImportedWindowsAutopilotDeviceIdentityUploads = new PropertyDefinition(nameof(ImportedWindowsAutopilotDeviceIdentityUploads), typeof(IList<ImportedWindowsAutopilotDeviceIdentityUpload>));


        /// <summary>
        /// ImportedWindowsAutopilotDeviceIdentities
        /// </summary>
        public static PropertyDefinition ImportedWindowsAutopilotDeviceIdentities = new PropertyDefinition(nameof(ImportedWindowsAutopilotDeviceIdentities), typeof(IList<ImportedWindowsAutopilotDeviceIdentity>));


        /// <summary>
        /// RemoteAssistancePartners
        /// </summary>
        public static PropertyDefinition RemoteAssistancePartners = new PropertyDefinition(nameof(RemoteAssistancePartners), typeof(IList<RemoteAssistancePartner>));


        /// <summary>
        /// WindowsInformationProtectionAppLearningSummaries
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionAppLearningSummaries = new PropertyDefinition(nameof(WindowsInformationProtectionAppLearningSummaries), typeof(IList<WindowsInformationProtectionAppLearningSummary>));


        /// <summary>
        /// WindowsInformationProtectionNetworkLearningSummaries
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionNetworkLearningSummaries = new PropertyDefinition(nameof(WindowsInformationProtectionNetworkLearningSummaries), typeof(IList<WindowsInformationProtectionNetworkLearningSummary>));


        /// <summary>
        /// IntuneBrandingProfiles
        /// </summary>
        public static PropertyDefinition IntuneBrandingProfiles = new PropertyDefinition(nameof(IntuneBrandingProfiles), typeof(IList<IntuneBrandingProfile>));


        /// <summary>
        /// AuditEvents
        /// </summary>
        public static PropertyDefinition AuditEvents = new PropertyDefinition(nameof(AuditEvents), typeof(IList<AuditEvent>));


        /// <summary>
        /// TroubleshootingEvents
        /// </summary>
        public static PropertyDefinition TroubleshootingEvents = new PropertyDefinition(nameof(TroubleshootingEvents), typeof(IList<DeviceManagementTroubleshootingEvent>));


        /// <summary>
        /// UserPfxCertificates
        /// </summary>
        public static PropertyDefinition UserPfxCertificates = new PropertyDefinition(nameof(UserPfxCertificates), typeof(IList<UserPFXCertificate>));


        /// <summary>
        /// GroupPolicyConfigurations
        /// </summary>
        public static PropertyDefinition GroupPolicyConfigurations = new PropertyDefinition(nameof(GroupPolicyConfigurations), typeof(IList<GroupPolicyConfiguration>));


        /// <summary>
        /// GroupPolicyDefinitions
        /// </summary>
        public static PropertyDefinition GroupPolicyDefinitions = new PropertyDefinition(nameof(GroupPolicyDefinitions), typeof(IList<GroupPolicyDefinition>));


        /// <summary>
        /// GroupPolicyDefinitionFiles
        /// </summary>
        public static PropertyDefinition GroupPolicyDefinitionFiles = new PropertyDefinition(nameof(GroupPolicyDefinitionFiles), typeof(IList<GroupPolicyDefinitionFile>));

    }


    /// <summary>
    /// TermsAndConditionsObjectSchema
    /// </summary>
    public class TermsAndConditionsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ModifiedDateTime
        /// </summary>
        public static PropertyDefinition ModifiedDateTime = new PropertyDefinition(nameof(ModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// BodyText
        /// </summary>
        public static PropertyDefinition BodyText = new PropertyDefinition(nameof(BodyText), typeof(string));


        /// <summary>
        /// AcceptanceStatement
        /// </summary>
        public static PropertyDefinition AcceptanceStatement = new PropertyDefinition(nameof(AcceptanceStatement), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// GroupAssignments
        /// </summary>
        public static PropertyDefinition GroupAssignments = new PropertyDefinition(nameof(GroupAssignments), typeof(IList<TermsAndConditionsGroupAssignment>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<TermsAndConditionsAssignment>));


        /// <summary>
        /// AcceptanceStatuses
        /// </summary>
        public static PropertyDefinition AcceptanceStatuses = new PropertyDefinition(nameof(AcceptanceStatuses), typeof(IList<TermsAndConditionsAcceptanceStatus>));

    }


    /// <summary>
    /// AndroidForWorkSettingsObjectSchema
    /// </summary>
    public class AndroidForWorkSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// BindStatus
        /// </summary>
        public static PropertyDefinition BindStatus = new PropertyDefinition(nameof(BindStatus), typeof(AndroidForWorkBindStatus));


        /// <summary>
        /// LastAppSyncDateTime
        /// </summary>
        public static PropertyDefinition LastAppSyncDateTime = new PropertyDefinition(nameof(LastAppSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastAppSyncStatus
        /// </summary>
        public static PropertyDefinition LastAppSyncStatus = new PropertyDefinition(nameof(LastAppSyncStatus), typeof(AndroidForWorkSyncStatus));


        /// <summary>
        /// OwnerUserPrincipalName
        /// </summary>
        public static PropertyDefinition OwnerUserPrincipalName = new PropertyDefinition(nameof(OwnerUserPrincipalName), typeof(string));


        /// <summary>
        /// OwnerOrganizationName
        /// </summary>
        public static PropertyDefinition OwnerOrganizationName = new PropertyDefinition(nameof(OwnerOrganizationName), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EnrollmentTarget
        /// </summary>
        public static PropertyDefinition EnrollmentTarget = new PropertyDefinition(nameof(EnrollmentTarget), typeof(AndroidForWorkEnrollmentTarget));


        /// <summary>
        /// TargetGroupIds
        /// </summary>
        public static PropertyDefinition TargetGroupIds = new PropertyDefinition(nameof(TargetGroupIds), typeof(IList<String>));


        /// <summary>
        /// DeviceOwnerManagementEnabled
        /// </summary>
        public static PropertyDefinition DeviceOwnerManagementEnabled = new PropertyDefinition(nameof(DeviceOwnerManagementEnabled), typeof(bool));

    }


    /// <summary>
    /// AndroidForWorkAppConfigurationSchemaObjectSchema
    /// </summary>
    public class AndroidForWorkAppConfigurationSchemaObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExampleJson
        /// </summary>
        public static PropertyDefinition ExampleJson = new PropertyDefinition(nameof(ExampleJson), typeof(string));


        /// <summary>
        /// SchemaItems
        /// </summary>
        public static PropertyDefinition SchemaItems = new PropertyDefinition(nameof(SchemaItems), typeof(IList<AndroidForWorkAppConfigurationSchemaItem>));

    }


    /// <summary>
    /// AndroidForWorkEnrollmentProfileObjectSchema
    /// </summary>
    public class AndroidForWorkEnrollmentProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AccountId
        /// </summary>
        public static PropertyDefinition AccountId = new PropertyDefinition(nameof(AccountId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// TokenValue
        /// </summary>
        public static PropertyDefinition TokenValue = new PropertyDefinition(nameof(TokenValue), typeof(string));


        /// <summary>
        /// TokenExpirationDateTime
        /// </summary>
        public static PropertyDefinition TokenExpirationDateTime = new PropertyDefinition(nameof(TokenExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EnrolledDeviceCount
        /// </summary>
        public static PropertyDefinition EnrolledDeviceCount = new PropertyDefinition(nameof(EnrolledDeviceCount), typeof(int));


        /// <summary>
        /// QrCodeContent
        /// </summary>
        public static PropertyDefinition QrCodeContent = new PropertyDefinition(nameof(QrCodeContent), typeof(string));


        /// <summary>
        /// QrCodeImage
        /// </summary>
        public static PropertyDefinition QrCodeImage = new PropertyDefinition(nameof(QrCodeImage), typeof(MimeContent));

    }


    /// <summary>
    /// AndroidManagedStoreAccountEnterpriseSettingsObjectSchema
    /// </summary>
    public class AndroidManagedStoreAccountEnterpriseSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// BindStatus
        /// </summary>
        public static PropertyDefinition BindStatus = new PropertyDefinition(nameof(BindStatus), typeof(AndroidManagedStoreAccountBindStatus));


        /// <summary>
        /// LastAppSyncDateTime
        /// </summary>
        public static PropertyDefinition LastAppSyncDateTime = new PropertyDefinition(nameof(LastAppSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastAppSyncStatus
        /// </summary>
        public static PropertyDefinition LastAppSyncStatus = new PropertyDefinition(nameof(LastAppSyncStatus), typeof(AndroidManagedStoreAccountAppSyncStatus));


        /// <summary>
        /// OwnerUserPrincipalName
        /// </summary>
        public static PropertyDefinition OwnerUserPrincipalName = new PropertyDefinition(nameof(OwnerUserPrincipalName), typeof(string));


        /// <summary>
        /// OwnerOrganizationName
        /// </summary>
        public static PropertyDefinition OwnerOrganizationName = new PropertyDefinition(nameof(OwnerOrganizationName), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EnrollmentTarget
        /// </summary>
        public static PropertyDefinition EnrollmentTarget = new PropertyDefinition(nameof(EnrollmentTarget), typeof(AndroidManagedStoreAccountEnrollmentTarget));


        /// <summary>
        /// TargetGroupIds
        /// </summary>
        public static PropertyDefinition TargetGroupIds = new PropertyDefinition(nameof(TargetGroupIds), typeof(IList<String>));


        /// <summary>
        /// DeviceOwnerManagementEnabled
        /// </summary>
        public static PropertyDefinition DeviceOwnerManagementEnabled = new PropertyDefinition(nameof(DeviceOwnerManagementEnabled), typeof(bool));


        /// <summary>
        /// CompanyCodes
        /// </summary>
        public static PropertyDefinition CompanyCodes = new PropertyDefinition(nameof(CompanyCodes), typeof(IList<AndroidEnrollmentCompanyCode>));


        /// <summary>
        /// AndroidDeviceOwnerFullyManagedEnrollmentEnabled
        /// </summary>
        public static PropertyDefinition AndroidDeviceOwnerFullyManagedEnrollmentEnabled = new PropertyDefinition(nameof(AndroidDeviceOwnerFullyManagedEnrollmentEnabled), typeof(bool));

    }


    /// <summary>
    /// AndroidManagedStoreAppConfigurationSchemaObjectSchema
    /// </summary>
    public class AndroidManagedStoreAppConfigurationSchemaObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExampleJson
        /// </summary>
        public static PropertyDefinition ExampleJson = new PropertyDefinition(nameof(ExampleJson), typeof(string));


        /// <summary>
        /// SchemaItems
        /// </summary>
        public static PropertyDefinition SchemaItems = new PropertyDefinition(nameof(SchemaItems), typeof(IList<AndroidManagedStoreAppConfigurationSchemaItem>));

    }


    /// <summary>
    /// AndroidDeviceOwnerEnrollmentProfileObjectSchema
    /// </summary>
    public class AndroidDeviceOwnerEnrollmentProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AccountId
        /// </summary>
        public static PropertyDefinition AccountId = new PropertyDefinition(nameof(AccountId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// TokenValue
        /// </summary>
        public static PropertyDefinition TokenValue = new PropertyDefinition(nameof(TokenValue), typeof(string));


        /// <summary>
        /// TokenCreationDateTime
        /// </summary>
        public static PropertyDefinition TokenCreationDateTime = new PropertyDefinition(nameof(TokenCreationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// TokenExpirationDateTime
        /// </summary>
        public static PropertyDefinition TokenExpirationDateTime = new PropertyDefinition(nameof(TokenExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EnrolledDeviceCount
        /// </summary>
        public static PropertyDefinition EnrolledDeviceCount = new PropertyDefinition(nameof(EnrolledDeviceCount), typeof(int));


        /// <summary>
        /// QrCodeContent
        /// </summary>
        public static PropertyDefinition QrCodeContent = new PropertyDefinition(nameof(QrCodeContent), typeof(string));


        /// <summary>
        /// QrCodeImage
        /// </summary>
        public static PropertyDefinition QrCodeImage = new PropertyDefinition(nameof(QrCodeImage), typeof(MimeContent));

    }


    /// <summary>
    /// RemoteActionAuditObjectSchema
    /// </summary>
    public class RemoteActionAuditObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// InitiatedByUserPrincipalName
        /// </summary>
        public static PropertyDefinition InitiatedByUserPrincipalName = new PropertyDefinition(nameof(InitiatedByUserPrincipalName), typeof(string));


        /// <summary>
        /// Action
        /// </summary>
        public static PropertyDefinition Action = new PropertyDefinition(nameof(Action), typeof(RemoteAction));


        /// <summary>
        /// RequestDateTime
        /// </summary>
        public static PropertyDefinition RequestDateTime = new PropertyDefinition(nameof(RequestDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeviceOwnerUserPrincipalName
        /// </summary>
        public static PropertyDefinition DeviceOwnerUserPrincipalName = new PropertyDefinition(nameof(DeviceOwnerUserPrincipalName), typeof(string));


        /// <summary>
        /// DeviceIMEI
        /// </summary>
        public static PropertyDefinition DeviceIMEI = new PropertyDefinition(nameof(DeviceIMEI), typeof(string));


        /// <summary>
        /// ActionState
        /// </summary>
        public static PropertyDefinition ActionState = new PropertyDefinition(nameof(ActionState), typeof(ActionState));

    }


    /// <summary>
    /// ApplePushNotificationCertificateObjectSchema
    /// </summary>
    public class ApplePushNotificationCertificateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AppleIdentifier
        /// </summary>
        public static PropertyDefinition AppleIdentifier = new PropertyDefinition(nameof(AppleIdentifier), typeof(string));


        /// <summary>
        /// TopicIdentifier
        /// </summary>
        public static PropertyDefinition TopicIdentifier = new PropertyDefinition(nameof(TopicIdentifier), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CertificateUploadStatus
        /// </summary>
        public static PropertyDefinition CertificateUploadStatus = new PropertyDefinition(nameof(CertificateUploadStatus), typeof(string));


        /// <summary>
        /// CertificateUploadFailureReason
        /// </summary>
        public static PropertyDefinition CertificateUploadFailureReason = new PropertyDefinition(nameof(CertificateUploadFailureReason), typeof(string));


        /// <summary>
        /// Certificate
        /// </summary>
        public static PropertyDefinition Certificate = new PropertyDefinition(nameof(Certificate), typeof(string));

    }


    /// <summary>
    /// DeviceManagementScriptObjectSchema
    /// </summary>
    public class DeviceManagementScriptObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// RunSchedule
        /// </summary>
        public static PropertyDefinition RunSchedule = new PropertyDefinition(nameof(RunSchedule), typeof(RunSchedule));


        /// <summary>
        /// ScriptContent
        /// </summary>
        public static PropertyDefinition ScriptContent = new PropertyDefinition(nameof(ScriptContent), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RunAsAccount
        /// </summary>
        public static PropertyDefinition RunAsAccount = new PropertyDefinition(nameof(RunAsAccount), typeof(RunAsAccountType));


        /// <summary>
        /// EnforceSignatureCheck
        /// </summary>
        public static PropertyDefinition EnforceSignatureCheck = new PropertyDefinition(nameof(EnforceSignatureCheck), typeof(bool));


        /// <summary>
        /// FileName
        /// </summary>
        public static PropertyDefinition FileName = new PropertyDefinition(nameof(FileName), typeof(string));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// RunAs32Bit
        /// </summary>
        public static PropertyDefinition RunAs32Bit = new PropertyDefinition(nameof(RunAs32Bit), typeof(bool));


        /// <summary>
        /// GroupAssignments
        /// </summary>
        public static PropertyDefinition GroupAssignments = new PropertyDefinition(nameof(GroupAssignments), typeof(IList<DeviceManagementScriptGroupAssignment>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<DeviceManagementScriptAssignment>));


        /// <summary>
        /// RunSummary
        /// </summary>
        public static PropertyDefinition RunSummary = new PropertyDefinition(nameof(RunSummary), typeof(DeviceManagementScriptRunSummary));


        /// <summary>
        /// DeviceRunStates
        /// </summary>
        public static PropertyDefinition DeviceRunStates = new PropertyDefinition(nameof(DeviceRunStates), typeof(IList<DeviceManagementScriptDeviceState>));


        /// <summary>
        /// UserRunStates
        /// </summary>
        public static PropertyDefinition UserRunStates = new PropertyDefinition(nameof(UserRunStates), typeof(IList<DeviceManagementScriptUserState>));

    }


    /// <summary>
    /// ManagedDeviceOverviewObjectSchema
    /// </summary>
    public class ManagedDeviceOverviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// EnrolledDeviceCount
        /// </summary>
        public static PropertyDefinition EnrolledDeviceCount = new PropertyDefinition(nameof(EnrolledDeviceCount), typeof(int));


        /// <summary>
        /// MdmEnrolledCount
        /// </summary>
        public static PropertyDefinition MdmEnrolledCount = new PropertyDefinition(nameof(MdmEnrolledCount), typeof(int));


        /// <summary>
        /// DualEnrolledDeviceCount
        /// </summary>
        public static PropertyDefinition DualEnrolledDeviceCount = new PropertyDefinition(nameof(DualEnrolledDeviceCount), typeof(int));


        /// <summary>
        /// DeviceOperatingSystemSummary
        /// </summary>
        public static PropertyDefinition DeviceOperatingSystemSummary = new PropertyDefinition(nameof(DeviceOperatingSystemSummary), typeof(DeviceOperatingSystemSummary));


        /// <summary>
        /// DeviceExchangeAccessStateSummary
        /// </summary>
        public static PropertyDefinition DeviceExchangeAccessStateSummary = new PropertyDefinition(nameof(DeviceExchangeAccessStateSummary), typeof(DeviceExchangeAccessStateSummary));


        /// <summary>
        /// ManagedDeviceModelsAndManufacturers
        /// </summary>
        public static PropertyDefinition ManagedDeviceModelsAndManufacturers = new PropertyDefinition(nameof(ManagedDeviceModelsAndManufacturers), typeof(ManagedDeviceModelsAndManufacturers));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// DetectedAppObjectSchema
    /// </summary>
    public class DetectedAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));


        /// <summary>
        /// SizeInByte
        /// </summary>
        public static PropertyDefinition SizeInByte = new PropertyDefinition(nameof(SizeInByte), typeof(Int64));


        /// <summary>
        /// DeviceCount
        /// </summary>
        public static PropertyDefinition DeviceCount = new PropertyDefinition(nameof(DeviceCount), typeof(int));


        /// <summary>
        /// ManagedDevices
        /// </summary>
        public static PropertyDefinition ManagedDevices = new PropertyDefinition(nameof(ManagedDevices), typeof(IList<ManagedDevice>));

    }


    /// <summary>
    /// WindowsMalwareInformationObjectSchema
    /// </summary>
    public class WindowsMalwareInformationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// AdditionalInformationUrl
        /// </summary>
        public static PropertyDefinition AdditionalInformationUrl = new PropertyDefinition(nameof(AdditionalInformationUrl), typeof(string));


        /// <summary>
        /// Severity
        /// </summary>
        public static PropertyDefinition Severity = new PropertyDefinition(nameof(Severity), typeof(WindowsMalwareSeverity));


        /// <summary>
        /// Category
        /// </summary>
        public static PropertyDefinition Category = new PropertyDefinition(nameof(Category), typeof(WindowsMalwareCategory));


        /// <summary>
        /// LastDetectionDateTime
        /// </summary>
        public static PropertyDefinition LastDetectionDateTime = new PropertyDefinition(nameof(LastDetectionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// WindowsDevicesProtectionState
        /// </summary>
        public static PropertyDefinition WindowsDevicesProtectionState = new PropertyDefinition(nameof(WindowsDevicesProtectionState), typeof(IList<WindowsProtectionState>));

    }


    /// <summary>
    /// DataSharingConsentObjectSchema
    /// </summary>
    public class DataSharingConsentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ServiceDisplayName
        /// </summary>
        public static PropertyDefinition ServiceDisplayName = new PropertyDefinition(nameof(ServiceDisplayName), typeof(string));


        /// <summary>
        /// TermsUrl
        /// </summary>
        public static PropertyDefinition TermsUrl = new PropertyDefinition(nameof(TermsUrl), typeof(string));


        /// <summary>
        /// Granted
        /// </summary>
        public static PropertyDefinition Granted = new PropertyDefinition(nameof(Granted), typeof(bool));


        /// <summary>
        /// GrantDateTime
        /// </summary>
        public static PropertyDefinition GrantDateTime = new PropertyDefinition(nameof(GrantDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// GrantedByUpn
        /// </summary>
        public static PropertyDefinition GrantedByUpn = new PropertyDefinition(nameof(GrantedByUpn), typeof(string));


        /// <summary>
        /// GrantedByUserId
        /// </summary>
        public static PropertyDefinition GrantedByUserId = new PropertyDefinition(nameof(GrantedByUserId), typeof(string));

    }


    /// <summary>
    /// DeviceConfigurationObjectSchema
    /// </summary>
    public class DeviceConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// SupportsScopeTags
        /// </summary>
        public static PropertyDefinition SupportsScopeTags = new PropertyDefinition(nameof(SupportsScopeTags), typeof(bool));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// GroupAssignments
        /// </summary>
        public static PropertyDefinition GroupAssignments = new PropertyDefinition(nameof(GroupAssignments), typeof(IList<DeviceConfigurationGroupAssignment>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<DeviceConfigurationAssignment>));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<DeviceConfigurationDeviceStatus>));


        /// <summary>
        /// UserStatuses
        /// </summary>
        public static PropertyDefinition UserStatuses = new PropertyDefinition(nameof(UserStatuses), typeof(IList<DeviceConfigurationUserStatus>));


        /// <summary>
        /// DeviceStatusOverview
        /// </summary>
        public static PropertyDefinition DeviceStatusOverview = new PropertyDefinition(nameof(DeviceStatusOverview), typeof(DeviceConfigurationDeviceOverview));


        /// <summary>
        /// UserStatusOverview
        /// </summary>
        public static PropertyDefinition UserStatusOverview = new PropertyDefinition(nameof(UserStatusOverview), typeof(DeviceConfigurationUserOverview));


        /// <summary>
        /// DeviceSettingStateSummaries
        /// </summary>
        public static PropertyDefinition DeviceSettingStateSummaries = new PropertyDefinition(nameof(DeviceSettingStateSummaries), typeof(IList<SettingStateDeviceSummary>));

    }


    /// <summary>
    /// DeviceCompliancePolicyObjectSchema
    /// </summary>
    public class DeviceCompliancePolicyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// ScheduledActionsForRule
        /// </summary>
        public static PropertyDefinition ScheduledActionsForRule = new PropertyDefinition(nameof(ScheduledActionsForRule), typeof(IList<DeviceComplianceScheduledActionForRule>));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<DeviceComplianceDeviceStatus>));


        /// <summary>
        /// UserStatuses
        /// </summary>
        public static PropertyDefinition UserStatuses = new PropertyDefinition(nameof(UserStatuses), typeof(IList<DeviceComplianceUserStatus>));


        /// <summary>
        /// DeviceStatusOverview
        /// </summary>
        public static PropertyDefinition DeviceStatusOverview = new PropertyDefinition(nameof(DeviceStatusOverview), typeof(DeviceComplianceDeviceOverview));


        /// <summary>
        /// UserStatusOverview
        /// </summary>
        public static PropertyDefinition UserStatusOverview = new PropertyDefinition(nameof(UserStatusOverview), typeof(DeviceComplianceUserOverview));


        /// <summary>
        /// DeviceSettingStateSummaries
        /// </summary>
        public static PropertyDefinition DeviceSettingStateSummaries = new PropertyDefinition(nameof(DeviceSettingStateSummaries), typeof(IList<SettingStateDeviceSummary>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<DeviceCompliancePolicyAssignment>));

    }


    /// <summary>
    /// SoftwareUpdateStatusSummaryObjectSchema
    /// </summary>
    public class SoftwareUpdateStatusSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantUserCount
        /// </summary>
        public static PropertyDefinition CompliantUserCount = new PropertyDefinition(nameof(CompliantUserCount), typeof(int));


        /// <summary>
        /// NonCompliantUserCount
        /// </summary>
        public static PropertyDefinition NonCompliantUserCount = new PropertyDefinition(nameof(NonCompliantUserCount), typeof(int));


        /// <summary>
        /// RemediatedUserCount
        /// </summary>
        public static PropertyDefinition RemediatedUserCount = new PropertyDefinition(nameof(RemediatedUserCount), typeof(int));


        /// <summary>
        /// ErrorUserCount
        /// </summary>
        public static PropertyDefinition ErrorUserCount = new PropertyDefinition(nameof(ErrorUserCount), typeof(int));


        /// <summary>
        /// UnknownUserCount
        /// </summary>
        public static PropertyDefinition UnknownUserCount = new PropertyDefinition(nameof(UnknownUserCount), typeof(int));


        /// <summary>
        /// ConflictUserCount
        /// </summary>
        public static PropertyDefinition ConflictUserCount = new PropertyDefinition(nameof(ConflictUserCount), typeof(int));


        /// <summary>
        /// NotApplicableUserCount
        /// </summary>
        public static PropertyDefinition NotApplicableUserCount = new PropertyDefinition(nameof(NotApplicableUserCount), typeof(int));

    }


    /// <summary>
    /// DeviceCompliancePolicyDeviceStateSummaryObjectSchema
    /// </summary>
    public class DeviceCompliancePolicyDeviceStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// InGracePeriodCount
        /// </summary>
        public static PropertyDefinition InGracePeriodCount = new PropertyDefinition(nameof(InGracePeriodCount), typeof(int));


        /// <summary>
        /// ConfigManagerCount
        /// </summary>
        public static PropertyDefinition ConfigManagerCount = new PropertyDefinition(nameof(ConfigManagerCount), typeof(int));


        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));

    }


    /// <summary>
    /// DeviceCompliancePolicySettingStateSummaryObjectSchema
    /// </summary>
    public class DeviceCompliancePolicySettingStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Setting
        /// </summary>
        public static PropertyDefinition Setting = new PropertyDefinition(nameof(Setting), typeof(string));


        /// <summary>
        /// SettingName
        /// </summary>
        public static PropertyDefinition SettingName = new PropertyDefinition(nameof(SettingName), typeof(string));


        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(PolicyPlatformType));


        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));


        /// <summary>
        /// DeviceComplianceSettingStates
        /// </summary>
        public static PropertyDefinition DeviceComplianceSettingStates = new PropertyDefinition(nameof(DeviceComplianceSettingStates), typeof(IList<DeviceComplianceSettingState>));

    }


    /// <summary>
    /// AdvancedThreatProtectionOnboardingStateSummaryObjectSchema
    /// </summary>
    public class AdvancedThreatProtectionOnboardingStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));


        /// <summary>
        /// NotAssignedDeviceCount
        /// </summary>
        public static PropertyDefinition NotAssignedDeviceCount = new PropertyDefinition(nameof(NotAssignedDeviceCount), typeof(int));


        /// <summary>
        /// AdvancedThreatProtectionOnboardingDeviceSettingStates
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOnboardingDeviceSettingStates = new PropertyDefinition(nameof(AdvancedThreatProtectionOnboardingDeviceSettingStates), typeof(IList<AdvancedThreatProtectionOnboardingDeviceSettingState>));

    }


    /// <summary>
    /// DeviceConfigurationDeviceStateSummaryObjectSchema
    /// </summary>
    public class DeviceConfigurationDeviceStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));

    }


    /// <summary>
    /// DeviceConfigurationUserStateSummaryObjectSchema
    /// </summary>
    public class DeviceConfigurationUserStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UnknownUserCount
        /// </summary>
        public static PropertyDefinition UnknownUserCount = new PropertyDefinition(nameof(UnknownUserCount), typeof(int));


        /// <summary>
        /// NotApplicableUserCount
        /// </summary>
        public static PropertyDefinition NotApplicableUserCount = new PropertyDefinition(nameof(NotApplicableUserCount), typeof(int));


        /// <summary>
        /// CompliantUserCount
        /// </summary>
        public static PropertyDefinition CompliantUserCount = new PropertyDefinition(nameof(CompliantUserCount), typeof(int));


        /// <summary>
        /// RemediatedUserCount
        /// </summary>
        public static PropertyDefinition RemediatedUserCount = new PropertyDefinition(nameof(RemediatedUserCount), typeof(int));


        /// <summary>
        /// NonCompliantUserCount
        /// </summary>
        public static PropertyDefinition NonCompliantUserCount = new PropertyDefinition(nameof(NonCompliantUserCount), typeof(int));


        /// <summary>
        /// ErrorUserCount
        /// </summary>
        public static PropertyDefinition ErrorUserCount = new PropertyDefinition(nameof(ErrorUserCount), typeof(int));


        /// <summary>
        /// ConflictUserCount
        /// </summary>
        public static PropertyDefinition ConflictUserCount = new PropertyDefinition(nameof(ConflictUserCount), typeof(int));

    }


    /// <summary>
    /// CartToClassAssociationObjectSchema
    /// </summary>
    public class CartToClassAssociationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DeviceCartIds
        /// </summary>
        public static PropertyDefinition DeviceCartIds = new PropertyDefinition(nameof(DeviceCartIds), typeof(IList<String>));


        /// <summary>
        /// ClassroomIds
        /// </summary>
        public static PropertyDefinition ClassroomIds = new PropertyDefinition(nameof(ClassroomIds), typeof(IList<String>));

    }


    /// <summary>
    /// IosUpdateDeviceStatusObjectSchema
    /// </summary>
    public class IosUpdateDeviceStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// InstallStatus
        /// </summary>
        public static PropertyDefinition InstallStatus = new PropertyDefinition(nameof(InstallStatus), typeof(IosUpdatesInstallStatus));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(int));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// NdesConnectorObjectSchema
    /// </summary>
    public class NdesConnectorObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastConnectionDateTime
        /// </summary>
        public static PropertyDefinition LastConnectionDateTime = new PropertyDefinition(nameof(LastConnectionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(NdesConnectorState));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// RestrictedAppsViolationObjectSchema
    /// </summary>
    public class RestrictedAppsViolationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// ManagedDeviceId
        /// </summary>
        public static PropertyDefinition ManagedDeviceId = new PropertyDefinition(nameof(ManagedDeviceId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// DeviceConfigurationId
        /// </summary>
        public static PropertyDefinition DeviceConfigurationId = new PropertyDefinition(nameof(DeviceConfigurationId), typeof(string));


        /// <summary>
        /// DeviceConfigurationName
        /// </summary>
        public static PropertyDefinition DeviceConfigurationName = new PropertyDefinition(nameof(DeviceConfigurationName), typeof(string));


        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(PolicyPlatformType));


        /// <summary>
        /// RestrictedAppsState
        /// </summary>
        public static PropertyDefinition RestrictedAppsState = new PropertyDefinition(nameof(RestrictedAppsState), typeof(RestrictedAppsState));


        /// <summary>
        /// RestrictedApps
        /// </summary>
        public static PropertyDefinition RestrictedApps = new PropertyDefinition(nameof(RestrictedApps), typeof(IList<ManagedDeviceReportedApp>));

    }


    /// <summary>
    /// DeviceConfigurationConflictSummaryObjectSchema
    /// </summary>
    public class DeviceConfigurationConflictSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ConflictingDeviceConfigurations
        /// </summary>
        public static PropertyDefinition ConflictingDeviceConfigurations = new PropertyDefinition(nameof(ConflictingDeviceConfigurations), typeof(IList<SettingSource>));


        /// <summary>
        /// ContributingSettings
        /// </summary>
        public static PropertyDefinition ContributingSettings = new PropertyDefinition(nameof(ContributingSettings), typeof(IList<String>));


        /// <summary>
        /// DeviceCheckinsImpacted
        /// </summary>
        public static PropertyDefinition DeviceCheckinsImpacted = new PropertyDefinition(nameof(DeviceCheckinsImpacted), typeof(int));

    }


    /// <summary>
    /// DeviceCategoryObjectSchema
    /// </summary>
    public class DeviceCategoryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));

    }


    /// <summary>
    /// DeviceManagementExchangeConnectorObjectSchema
    /// </summary>
    public class DeviceManagementExchangeConnectorObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(DeviceManagementExchangeConnectorStatus));


        /// <summary>
        /// PrimarySmtpAddress
        /// </summary>
        public static PropertyDefinition PrimarySmtpAddress = new PropertyDefinition(nameof(PrimarySmtpAddress), typeof(string));


        /// <summary>
        /// ServerName
        /// </summary>
        public static PropertyDefinition ServerName = new PropertyDefinition(nameof(ServerName), typeof(string));


        /// <summary>
        /// ConnectorServerName
        /// </summary>
        public static PropertyDefinition ConnectorServerName = new PropertyDefinition(nameof(ConnectorServerName), typeof(string));


        /// <summary>
        /// ExchangeConnectorType
        /// </summary>
        public static PropertyDefinition ExchangeConnectorType = new PropertyDefinition(nameof(ExchangeConnectorType), typeof(DeviceManagementExchangeConnectorType));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));


        /// <summary>
        /// ExchangeAlias
        /// </summary>
        public static PropertyDefinition ExchangeAlias = new PropertyDefinition(nameof(ExchangeAlias), typeof(string));


        /// <summary>
        /// ExchangeOrganization
        /// </summary>
        public static PropertyDefinition ExchangeOrganization = new PropertyDefinition(nameof(ExchangeOrganization), typeof(string));

    }


    /// <summary>
    /// DeviceManagementExchangeOnPremisesPolicyObjectSchema
    /// </summary>
    public class DeviceManagementExchangeOnPremisesPolicyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// NotificationContent
        /// </summary>
        public static PropertyDefinition NotificationContent = new PropertyDefinition(nameof(NotificationContent), typeof(string));


        /// <summary>
        /// DefaultAccessLevel
        /// </summary>
        public static PropertyDefinition DefaultAccessLevel = new PropertyDefinition(nameof(DefaultAccessLevel), typeof(DeviceManagementExchangeAccessLevel));


        /// <summary>
        /// AccessRules
        /// </summary>
        public static PropertyDefinition AccessRules = new PropertyDefinition(nameof(AccessRules), typeof(IList<DeviceManagementExchangeAccessRule>));


        /// <summary>
        /// KnownDeviceClasses
        /// </summary>
        public static PropertyDefinition KnownDeviceClasses = new PropertyDefinition(nameof(KnownDeviceClasses), typeof(IList<DeviceManagementExchangeDeviceClass>));


        /// <summary>
        /// ConditionalAccessSettings
        /// </summary>
        public static PropertyDefinition ConditionalAccessSettings = new PropertyDefinition(nameof(ConditionalAccessSettings), typeof(OnPremisesConditionalAccessSettings));

    }


    /// <summary>
    /// OnPremisesConditionalAccessSettingsObjectSchema
    /// </summary>
    public class OnPremisesConditionalAccessSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Enabled
        /// </summary>
        public static PropertyDefinition Enabled = new PropertyDefinition(nameof(Enabled), typeof(bool));


        /// <summary>
        /// IncludedGroups
        /// </summary>
        public static PropertyDefinition IncludedGroups = new PropertyDefinition(nameof(IncludedGroups), typeof(IList<Guid>));


        /// <summary>
        /// ExcludedGroups
        /// </summary>
        public static PropertyDefinition ExcludedGroups = new PropertyDefinition(nameof(ExcludedGroups), typeof(IList<Guid>));


        /// <summary>
        /// OverrideDefaultRule
        /// </summary>
        public static PropertyDefinition OverrideDefaultRule = new PropertyDefinition(nameof(OverrideDefaultRule), typeof(bool));

    }


    /// <summary>
    /// MobileThreatDefenseConnectorObjectSchema
    /// </summary>
    public class MobileThreatDefenseConnectorObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastHeartbeatDateTime
        /// </summary>
        public static PropertyDefinition LastHeartbeatDateTime = new PropertyDefinition(nameof(LastHeartbeatDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// PartnerState
        /// </summary>
        public static PropertyDefinition PartnerState = new PropertyDefinition(nameof(PartnerState), typeof(MobileThreatPartnerTenantState));


        /// <summary>
        /// AndroidEnabled
        /// </summary>
        public static PropertyDefinition AndroidEnabled = new PropertyDefinition(nameof(AndroidEnabled), typeof(bool));


        /// <summary>
        /// IosEnabled
        /// </summary>
        public static PropertyDefinition IosEnabled = new PropertyDefinition(nameof(IosEnabled), typeof(bool));


        /// <summary>
        /// WindowsEnabled
        /// </summary>
        public static PropertyDefinition WindowsEnabled = new PropertyDefinition(nameof(WindowsEnabled), typeof(bool));


        /// <summary>
        /// MacEnabled
        /// </summary>
        public static PropertyDefinition MacEnabled = new PropertyDefinition(nameof(MacEnabled), typeof(bool));


        /// <summary>
        /// AndroidDeviceBlockedOnMissingPartnerData
        /// </summary>
        public static PropertyDefinition AndroidDeviceBlockedOnMissingPartnerData = new PropertyDefinition(nameof(AndroidDeviceBlockedOnMissingPartnerData), typeof(bool));


        /// <summary>
        /// IosDeviceBlockedOnMissingPartnerData
        /// </summary>
        public static PropertyDefinition IosDeviceBlockedOnMissingPartnerData = new PropertyDefinition(nameof(IosDeviceBlockedOnMissingPartnerData), typeof(bool));


        /// <summary>
        /// WindowsDeviceBlockedOnMissingPartnerData
        /// </summary>
        public static PropertyDefinition WindowsDeviceBlockedOnMissingPartnerData = new PropertyDefinition(nameof(WindowsDeviceBlockedOnMissingPartnerData), typeof(bool));


        /// <summary>
        /// MacDeviceBlockedOnMissingPartnerData
        /// </summary>
        public static PropertyDefinition MacDeviceBlockedOnMissingPartnerData = new PropertyDefinition(nameof(MacDeviceBlockedOnMissingPartnerData), typeof(bool));


        /// <summary>
        /// PartnerUnsupportedOsVersionBlocked
        /// </summary>
        public static PropertyDefinition PartnerUnsupportedOsVersionBlocked = new PropertyDefinition(nameof(PartnerUnsupportedOsVersionBlocked), typeof(bool));


        /// <summary>
        /// PartnerUnresponsivenessThresholdInDays
        /// </summary>
        public static PropertyDefinition PartnerUnresponsivenessThresholdInDays = new PropertyDefinition(nameof(PartnerUnresponsivenessThresholdInDays), typeof(int));


        /// <summary>
        /// AllowPartnerToCollectIOSApplicationMetadata
        /// </summary>
        public static PropertyDefinition AllowPartnerToCollectIOSApplicationMetadata = new PropertyDefinition(nameof(AllowPartnerToCollectIOSApplicationMetadata), typeof(bool));

    }


    /// <summary>
    /// DeviceManagementPartnerObjectSchema
    /// </summary>
    public class DeviceManagementPartnerObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastHeartbeatDateTime
        /// </summary>
        public static PropertyDefinition LastHeartbeatDateTime = new PropertyDefinition(nameof(LastHeartbeatDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// PartnerState
        /// </summary>
        public static PropertyDefinition PartnerState = new PropertyDefinition(nameof(PartnerState), typeof(DeviceManagementPartnerTenantState));


        /// <summary>
        /// PartnerAppType
        /// </summary>
        public static PropertyDefinition PartnerAppType = new PropertyDefinition(nameof(PartnerAppType), typeof(DeviceManagementPartnerAppType));


        /// <summary>
        /// SingleTenantAppId
        /// </summary>
        public static PropertyDefinition SingleTenantAppId = new PropertyDefinition(nameof(SingleTenantAppId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsConfigured
        /// </summary>
        public static PropertyDefinition IsConfigured = new PropertyDefinition(nameof(IsConfigured), typeof(bool));


        /// <summary>
        /// WhenPartnerDevicesWillBeRemoved
        /// </summary>
        public static PropertyDefinition WhenPartnerDevicesWillBeRemoved = new PropertyDefinition(nameof(WhenPartnerDevicesWillBeRemoved), typeof(DateTimeOffset));


        /// <summary>
        /// WhenPartnerDevicesWillBeMarkedAsNonCompliant
        /// </summary>
        public static PropertyDefinition WhenPartnerDevicesWillBeMarkedAsNonCompliant = new PropertyDefinition(nameof(WhenPartnerDevicesWillBeMarkedAsNonCompliant), typeof(DateTimeOffset));


        /// <summary>
        /// WhenPartnerDevicesWillBeRemovedDateTime
        /// </summary>
        public static PropertyDefinition WhenPartnerDevicesWillBeRemovedDateTime = new PropertyDefinition(nameof(WhenPartnerDevicesWillBeRemovedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime
        /// </summary>
        public static PropertyDefinition WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime = new PropertyDefinition(nameof(WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// ManagementConditionObjectSchema
    /// </summary>
    public class ManagementConditionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UniqueName
        /// </summary>
        public static PropertyDefinition UniqueName = new PropertyDefinition(nameof(UniqueName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ModifiedDateTime
        /// </summary>
        public static PropertyDefinition ModifiedDateTime = new PropertyDefinition(nameof(ModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ETag
        /// </summary>
        public static PropertyDefinition ETag = new PropertyDefinition(nameof(ETag), typeof(string));


        /// <summary>
        /// ApplicablePlatforms
        /// </summary>
        public static PropertyDefinition ApplicablePlatforms = new PropertyDefinition(nameof(ApplicablePlatforms), typeof(IList<DevicePlatformType>));


        /// <summary>
        /// ManagementConditionStatements
        /// </summary>
        public static PropertyDefinition ManagementConditionStatements = new PropertyDefinition(nameof(ManagementConditionStatements), typeof(IList<ManagementConditionStatement>));

    }


    /// <summary>
    /// ManagementConditionStatementObjectSchema
    /// </summary>
    public class ManagementConditionStatementObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ModifiedDateTime
        /// </summary>
        public static PropertyDefinition ModifiedDateTime = new PropertyDefinition(nameof(ModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Expression
        /// </summary>
        public static PropertyDefinition Expression = new PropertyDefinition(nameof(Expression), typeof(ManagementConditionExpression));


        /// <summary>
        /// ETag
        /// </summary>
        public static PropertyDefinition ETag = new PropertyDefinition(nameof(ETag), typeof(string));


        /// <summary>
        /// ApplicablePlatforms
        /// </summary>
        public static PropertyDefinition ApplicablePlatforms = new PropertyDefinition(nameof(ApplicablePlatforms), typeof(IList<DevicePlatformType>));


        /// <summary>
        /// ManagementConditions
        /// </summary>
        public static PropertyDefinition ManagementConditions = new PropertyDefinition(nameof(ManagementConditions), typeof(IList<ManagementCondition>));

    }


    /// <summary>
    /// NotificationMessageTemplateObjectSchema
    /// </summary>
    public class NotificationMessageTemplateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// DefaultLocale
        /// </summary>
        public static PropertyDefinition DefaultLocale = new PropertyDefinition(nameof(DefaultLocale), typeof(string));


        /// <summary>
        /// BrandingOptions
        /// </summary>
        public static PropertyDefinition BrandingOptions = new PropertyDefinition(nameof(BrandingOptions), typeof(NotificationTemplateBrandingOptions));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// LocalizedNotificationMessages
        /// </summary>
        public static PropertyDefinition LocalizedNotificationMessages = new PropertyDefinition(nameof(LocalizedNotificationMessages), typeof(IList<LocalizedNotificationMessage>));

    }


    /// <summary>
    /// RoleDefinitionObjectSchema
    /// </summary>
    public class RoleDefinitionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Permissions
        /// </summary>
        public static PropertyDefinition Permissions = new PropertyDefinition(nameof(Permissions), typeof(IList<RolePermission>));


        /// <summary>
        /// RolePermissions
        /// </summary>
        public static PropertyDefinition RolePermissions = new PropertyDefinition(nameof(RolePermissions), typeof(IList<RolePermission>));


        /// <summary>
        /// IsBuiltInRoleDefinition
        /// </summary>
        public static PropertyDefinition IsBuiltInRoleDefinition = new PropertyDefinition(nameof(IsBuiltInRoleDefinition), typeof(bool));


        /// <summary>
        /// IsBuiltIn
        /// </summary>
        public static PropertyDefinition IsBuiltIn = new PropertyDefinition(nameof(IsBuiltIn), typeof(bool));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// RoleAssignments
        /// </summary>
        public static PropertyDefinition RoleAssignments = new PropertyDefinition(nameof(RoleAssignments), typeof(IList<RoleAssignment>));

    }


    /// <summary>
    /// RoleAssignmentObjectSchema
    /// </summary>
    public class RoleAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// ScopeMembers
        /// </summary>
        public static PropertyDefinition ScopeMembers = new PropertyDefinition(nameof(ScopeMembers), typeof(IList<String>));


        /// <summary>
        /// ScopeType
        /// </summary>
        public static PropertyDefinition ScopeType = new PropertyDefinition(nameof(ScopeType), typeof(RoleAssignmentScopeType));


        /// <summary>
        /// ResourceScopes
        /// </summary>
        public static PropertyDefinition ResourceScopes = new PropertyDefinition(nameof(ResourceScopes), typeof(IList<String>));


        /// <summary>
        /// RoleDefinition
        /// </summary>
        public static PropertyDefinition RoleDefinition = new PropertyDefinition(nameof(RoleDefinition), typeof(RoleDefinition));

    }


    /// <summary>
    /// DeviceAndAppManagementRoleAssignmentObjectSchema
    /// </summary>
    public class DeviceAndAppManagementRoleAssignmentObjectSchema : RoleAssignmentObjectSchema
    {

        /// <summary>
        /// Members
        /// </summary>
        public static PropertyDefinition Members = new PropertyDefinition(nameof(Members), typeof(IList<String>));


        /// <summary>
        /// RoleScopeTags
        /// </summary>
        public static PropertyDefinition RoleScopeTags = new PropertyDefinition(nameof(RoleScopeTags), typeof(IList<RoleScopeTag>));

    }


    /// <summary>
    /// RoleScopeTagObjectSchema
    /// </summary>
    public class RoleScopeTagObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));

    }


    /// <summary>
    /// ResourceOperationObjectSchema
    /// </summary>
    public class ResourceOperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(string));


        /// <summary>
        /// ResourceName
        /// </summary>
        public static PropertyDefinition ResourceName = new PropertyDefinition(nameof(ResourceName), typeof(string));


        /// <summary>
        /// ActionName
        /// </summary>
        public static PropertyDefinition ActionName = new PropertyDefinition(nameof(ActionName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// EnabledForScopeValidation
        /// </summary>
        public static PropertyDefinition EnabledForScopeValidation = new PropertyDefinition(nameof(EnabledForScopeValidation), typeof(bool));

    }


    /// <summary>
    /// EmbeddedSIMActivationCodePoolObjectSchema
    /// </summary>
    public class EmbeddedSIMActivationCodePoolObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ModifiedDateTime
        /// </summary>
        public static PropertyDefinition ModifiedDateTime = new PropertyDefinition(nameof(ModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ActivationCodes
        /// </summary>
        public static PropertyDefinition ActivationCodes = new PropertyDefinition(nameof(ActivationCodes), typeof(IList<EmbeddedSIMActivationCode>));


        /// <summary>
        /// ActivationCodeCount
        /// </summary>
        public static PropertyDefinition ActivationCodeCount = new PropertyDefinition(nameof(ActivationCodeCount), typeof(int));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<EmbeddedSIMActivationCodePoolAssignment>));


        /// <summary>
        /// DeviceStates
        /// </summary>
        public static PropertyDefinition DeviceStates = new PropertyDefinition(nameof(DeviceStates), typeof(IList<EmbeddedSIMDeviceState>));

    }


    /// <summary>
    /// TelecomExpenseManagementPartnerObjectSchema
    /// </summary>
    public class TelecomExpenseManagementPartnerObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Url
        /// </summary>
        public static PropertyDefinition Url = new PropertyDefinition(nameof(Url), typeof(string));


        /// <summary>
        /// AppAuthorized
        /// </summary>
        public static PropertyDefinition AppAuthorized = new PropertyDefinition(nameof(AppAuthorized), typeof(bool));


        /// <summary>
        /// Enabled
        /// </summary>
        public static PropertyDefinition Enabled = new PropertyDefinition(nameof(Enabled), typeof(bool));


        /// <summary>
        /// LastConnectionDateTime
        /// </summary>
        public static PropertyDefinition LastConnectionDateTime = new PropertyDefinition(nameof(LastConnectionDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// WindowsAutopilotSettingsObjectSchema
    /// </summary>
    public class WindowsAutopilotSettingsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastManualSyncTriggerDateTime
        /// </summary>
        public static PropertyDefinition LastManualSyncTriggerDateTime = new PropertyDefinition(nameof(LastManualSyncTriggerDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// SyncStatus
        /// </summary>
        public static PropertyDefinition SyncStatus = new PropertyDefinition(nameof(SyncStatus), typeof(WindowsAutopilotSyncStatus));

    }


    /// <summary>
    /// WindowsAutopilotDeviceIdentityObjectSchema
    /// </summary>
    public class WindowsAutopilotDeviceIdentityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeploymentProfileAssignmentStatus
        /// </summary>
        public static PropertyDefinition DeploymentProfileAssignmentStatus = new PropertyDefinition(nameof(DeploymentProfileAssignmentStatus), typeof(WindowsAutopilotProfileAssignmentStatus));


        /// <summary>
        /// DeploymentProfileAssignmentDetailedStatus
        /// </summary>
        public static PropertyDefinition DeploymentProfileAssignmentDetailedStatus = new PropertyDefinition(nameof(DeploymentProfileAssignmentDetailedStatus), typeof(WindowsAutopilotProfileAssignmentDetailedStatus));


        /// <summary>
        /// DeploymentProfileAssignedDateTime
        /// </summary>
        public static PropertyDefinition DeploymentProfileAssignedDateTime = new PropertyDefinition(nameof(DeploymentProfileAssignedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OrderIdentifier
        /// </summary>
        public static PropertyDefinition OrderIdentifier = new PropertyDefinition(nameof(OrderIdentifier), typeof(string));


        /// <summary>
        /// PurchaseOrderIdentifier
        /// </summary>
        public static PropertyDefinition PurchaseOrderIdentifier = new PropertyDefinition(nameof(PurchaseOrderIdentifier), typeof(string));


        /// <summary>
        /// SerialNumber
        /// </summary>
        public static PropertyDefinition SerialNumber = new PropertyDefinition(nameof(SerialNumber), typeof(string));


        /// <summary>
        /// ProductKey
        /// </summary>
        public static PropertyDefinition ProductKey = new PropertyDefinition(nameof(ProductKey), typeof(string));


        /// <summary>
        /// Manufacturer
        /// </summary>
        public static PropertyDefinition Manufacturer = new PropertyDefinition(nameof(Manufacturer), typeof(string));


        /// <summary>
        /// Model
        /// </summary>
        public static PropertyDefinition Model = new PropertyDefinition(nameof(Model), typeof(string));


        /// <summary>
        /// EnrollmentState
        /// </summary>
        public static PropertyDefinition EnrollmentState = new PropertyDefinition(nameof(EnrollmentState), typeof(EnrollmentState));


        /// <summary>
        /// LastContactedDateTime
        /// </summary>
        public static PropertyDefinition LastContactedDateTime = new PropertyDefinition(nameof(LastContactedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AddressableUserName
        /// </summary>
        public static PropertyDefinition AddressableUserName = new PropertyDefinition(nameof(AddressableUserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DeploymentProfile
        /// </summary>
        public static PropertyDefinition DeploymentProfile = new PropertyDefinition(nameof(DeploymentProfile), typeof(WindowsAutopilotDeploymentProfile));


        /// <summary>
        /// IntendedDeploymentProfile
        /// </summary>
        public static PropertyDefinition IntendedDeploymentProfile = new PropertyDefinition(nameof(IntendedDeploymentProfile), typeof(WindowsAutopilotDeploymentProfile));

    }


    /// <summary>
    /// WindowsAutopilotDeploymentProfileObjectSchema
    /// </summary>
    public class WindowsAutopilotDeploymentProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Language
        /// </summary>
        public static PropertyDefinition Language = new PropertyDefinition(nameof(Language), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// OutOfBoxExperienceSettings
        /// </summary>
        public static PropertyDefinition OutOfBoxExperienceSettings = new PropertyDefinition(nameof(OutOfBoxExperienceSettings), typeof(OutOfBoxExperienceSettings));


        /// <summary>
        /// EnrollmentStatusScreenSettings
        /// </summary>
        public static PropertyDefinition EnrollmentStatusScreenSettings = new PropertyDefinition(nameof(EnrollmentStatusScreenSettings), typeof(WindowsEnrollmentStatusScreenSettings));


        /// <summary>
        /// ExtractHardwareHash
        /// </summary>
        public static PropertyDefinition ExtractHardwareHash = new PropertyDefinition(nameof(ExtractHardwareHash), typeof(bool));


        /// <summary>
        /// DeviceNameTemplate
        /// </summary>
        public static PropertyDefinition DeviceNameTemplate = new PropertyDefinition(nameof(DeviceNameTemplate), typeof(string));


        /// <summary>
        /// AssignedDevices
        /// </summary>
        public static PropertyDefinition AssignedDevices = new PropertyDefinition(nameof(AssignedDevices), typeof(IList<WindowsAutopilotDeviceIdentity>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<WindowsAutopilotDeploymentProfileAssignment>));

    }


    /// <summary>
    /// ImportedDeviceIdentityObjectSchema
    /// </summary>
    public class ImportedDeviceIdentityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ImportedDeviceIdentifier
        /// </summary>
        public static PropertyDefinition ImportedDeviceIdentifier = new PropertyDefinition(nameof(ImportedDeviceIdentifier), typeof(string));


        /// <summary>
        /// ImportedDeviceIdentityType
        /// </summary>
        public static PropertyDefinition ImportedDeviceIdentityType = new PropertyDefinition(nameof(ImportedDeviceIdentityType), typeof(ImportedDeviceIdentityType));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastContactedDateTime
        /// </summary>
        public static PropertyDefinition LastContactedDateTime = new PropertyDefinition(nameof(LastContactedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// EnrollmentState
        /// </summary>
        public static PropertyDefinition EnrollmentState = new PropertyDefinition(nameof(EnrollmentState), typeof(EnrollmentState));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(Platform));

    }


    /// <summary>
    /// DepOnboardingSettingObjectSchema
    /// </summary>
    public class DepOnboardingSettingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AppleIdentifier
        /// </summary>
        public static PropertyDefinition AppleIdentifier = new PropertyDefinition(nameof(AppleIdentifier), typeof(string));


        /// <summary>
        /// TokenExpirationDateTime
        /// </summary>
        public static PropertyDefinition TokenExpirationDateTime = new PropertyDefinition(nameof(TokenExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSuccessfulSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSuccessfulSyncDateTime = new PropertyDefinition(nameof(LastSuccessfulSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncTriggeredDateTime
        /// </summary>
        public static PropertyDefinition LastSyncTriggeredDateTime = new PropertyDefinition(nameof(LastSyncTriggeredDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ShareTokenWithSchoolDataSyncService
        /// </summary>
        public static PropertyDefinition ShareTokenWithSchoolDataSyncService = new PropertyDefinition(nameof(ShareTokenWithSchoolDataSyncService), typeof(bool));


        /// <summary>
        /// LastSyncErrorCode
        /// </summary>
        public static PropertyDefinition LastSyncErrorCode = new PropertyDefinition(nameof(LastSyncErrorCode), typeof(int));


        /// <summary>
        /// TokenType
        /// </summary>
        public static PropertyDefinition TokenType = new PropertyDefinition(nameof(TokenType), typeof(DepTokenType));


        /// <summary>
        /// TokenName
        /// </summary>
        public static PropertyDefinition TokenName = new PropertyDefinition(nameof(TokenName), typeof(string));


        /// <summary>
        /// SyncedDeviceCount
        /// </summary>
        public static PropertyDefinition SyncedDeviceCount = new PropertyDefinition(nameof(SyncedDeviceCount), typeof(int));


        /// <summary>
        /// DataSharingConsentGranted
        /// </summary>
        public static PropertyDefinition DataSharingConsentGranted = new PropertyDefinition(nameof(DataSharingConsentGranted), typeof(bool));


        /// <summary>
        /// DefaultIosEnrollmentProfile
        /// </summary>
        public static PropertyDefinition DefaultIosEnrollmentProfile = new PropertyDefinition(nameof(DefaultIosEnrollmentProfile), typeof(DepIOSEnrollmentProfile));


        /// <summary>
        /// DefaultMacOsEnrollmentProfile
        /// </summary>
        public static PropertyDefinition DefaultMacOsEnrollmentProfile = new PropertyDefinition(nameof(DefaultMacOsEnrollmentProfile), typeof(DepMacOSEnrollmentProfile));


        /// <summary>
        /// EnrollmentProfiles
        /// </summary>
        public static PropertyDefinition EnrollmentProfiles = new PropertyDefinition(nameof(EnrollmentProfiles), typeof(IList<EnrollmentProfile>));


        /// <summary>
        /// ImportedAppleDeviceIdentities
        /// </summary>
        public static PropertyDefinition ImportedAppleDeviceIdentities = new PropertyDefinition(nameof(ImportedAppleDeviceIdentities), typeof(IList<ImportedAppleDeviceIdentity>));

    }


    /// <summary>
    /// ImportedWindowsAutopilotDeviceIdentityUploadObjectSchema
    /// </summary>
    public class ImportedWindowsAutopilotDeviceIdentityUploadObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTimeUtc
        /// </summary>
        public static PropertyDefinition CreatedDateTimeUtc = new PropertyDefinition(nameof(CreatedDateTimeUtc), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ImportedWindowsAutopilotDeviceIdentityUploadStatus));


        /// <summary>
        /// DeviceIdentities
        /// </summary>
        public static PropertyDefinition DeviceIdentities = new PropertyDefinition(nameof(DeviceIdentities), typeof(IList<ImportedWindowsAutopilotDeviceIdentity>));

    }


    /// <summary>
    /// ImportedWindowsAutopilotDeviceIdentityObjectSchema
    /// </summary>
    public class ImportedWindowsAutopilotDeviceIdentityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OrderIdentifier
        /// </summary>
        public static PropertyDefinition OrderIdentifier = new PropertyDefinition(nameof(OrderIdentifier), typeof(string));


        /// <summary>
        /// SerialNumber
        /// </summary>
        public static PropertyDefinition SerialNumber = new PropertyDefinition(nameof(SerialNumber), typeof(string));


        /// <summary>
        /// ProductKey
        /// </summary>
        public static PropertyDefinition ProductKey = new PropertyDefinition(nameof(ProductKey), typeof(string));


        /// <summary>
        /// HardwareIdentifier
        /// </summary>
        public static PropertyDefinition HardwareIdentifier = new PropertyDefinition(nameof(HardwareIdentifier), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ImportedWindowsAutopilotDeviceIdentityState));

    }


    /// <summary>
    /// RemoteAssistancePartnerObjectSchema
    /// </summary>
    public class RemoteAssistancePartnerObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// OnboardingUrl
        /// </summary>
        public static PropertyDefinition OnboardingUrl = new PropertyDefinition(nameof(OnboardingUrl), typeof(string));


        /// <summary>
        /// OnboardingStatus
        /// </summary>
        public static PropertyDefinition OnboardingStatus = new PropertyDefinition(nameof(OnboardingStatus), typeof(RemoteAssistanceOnboardingStatus));


        /// <summary>
        /// LastConnectionDateTime
        /// </summary>
        public static PropertyDefinition LastConnectionDateTime = new PropertyDefinition(nameof(LastConnectionDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// WindowsInformationProtectionAppLearningSummaryObjectSchema
    /// </summary>
    public class WindowsInformationProtectionAppLearningSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ApplicationName
        /// </summary>
        public static PropertyDefinition ApplicationName = new PropertyDefinition(nameof(ApplicationName), typeof(string));


        /// <summary>
        /// ApplicationType
        /// </summary>
        public static PropertyDefinition ApplicationType = new PropertyDefinition(nameof(ApplicationType), typeof(ApplicationType));


        /// <summary>
        /// DeviceCount
        /// </summary>
        public static PropertyDefinition DeviceCount = new PropertyDefinition(nameof(DeviceCount), typeof(int));

    }


    /// <summary>
    /// WindowsInformationProtectionNetworkLearningSummaryObjectSchema
    /// </summary>
    public class WindowsInformationProtectionNetworkLearningSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Url
        /// </summary>
        public static PropertyDefinition Url = new PropertyDefinition(nameof(Url), typeof(string));


        /// <summary>
        /// DeviceCount
        /// </summary>
        public static PropertyDefinition DeviceCount = new PropertyDefinition(nameof(DeviceCount), typeof(int));

    }


    /// <summary>
    /// IntuneBrandingProfileObjectSchema
    /// </summary>
    public class IntuneBrandingProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ProfileName
        /// </summary>
        public static PropertyDefinition ProfileName = new PropertyDefinition(nameof(ProfileName), typeof(string));


        /// <summary>
        /// ProfileDescription
        /// </summary>
        public static PropertyDefinition ProfileDescription = new PropertyDefinition(nameof(ProfileDescription), typeof(string));


        /// <summary>
        /// IsDefaultProfile
        /// </summary>
        public static PropertyDefinition IsDefaultProfile = new PropertyDefinition(nameof(IsDefaultProfile), typeof(bool));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ContactITName
        /// </summary>
        public static PropertyDefinition ContactITName = new PropertyDefinition(nameof(ContactITName), typeof(string));


        /// <summary>
        /// ContactITPhoneNumber
        /// </summary>
        public static PropertyDefinition ContactITPhoneNumber = new PropertyDefinition(nameof(ContactITPhoneNumber), typeof(string));


        /// <summary>
        /// ContactITEmailAddress
        /// </summary>
        public static PropertyDefinition ContactITEmailAddress = new PropertyDefinition(nameof(ContactITEmailAddress), typeof(string));


        /// <summary>
        /// ContactITNotes
        /// </summary>
        public static PropertyDefinition ContactITNotes = new PropertyDefinition(nameof(ContactITNotes), typeof(string));


        /// <summary>
        /// PrivacyUrl
        /// </summary>
        public static PropertyDefinition PrivacyUrl = new PropertyDefinition(nameof(PrivacyUrl), typeof(string));


        /// <summary>
        /// OnlineSupportSiteUrl
        /// </summary>
        public static PropertyDefinition OnlineSupportSiteUrl = new PropertyDefinition(nameof(OnlineSupportSiteUrl), typeof(string));


        /// <summary>
        /// OnlineSupportSiteName
        /// </summary>
        public static PropertyDefinition OnlineSupportSiteName = new PropertyDefinition(nameof(OnlineSupportSiteName), typeof(string));


        /// <summary>
        /// ThemeColor
        /// </summary>
        public static PropertyDefinition ThemeColor = new PropertyDefinition(nameof(ThemeColor), typeof(RgbColor));


        /// <summary>
        /// ShowLogo
        /// </summary>
        public static PropertyDefinition ShowLogo = new PropertyDefinition(nameof(ShowLogo), typeof(bool));


        /// <summary>
        /// ShowDisplayNameNextToLogo
        /// </summary>
        public static PropertyDefinition ShowDisplayNameNextToLogo = new PropertyDefinition(nameof(ShowDisplayNameNextToLogo), typeof(bool));


        /// <summary>
        /// ThemeColorLogo
        /// </summary>
        public static PropertyDefinition ThemeColorLogo = new PropertyDefinition(nameof(ThemeColorLogo), typeof(MimeContent));


        /// <summary>
        /// LightBackgroundLogo
        /// </summary>
        public static PropertyDefinition LightBackgroundLogo = new PropertyDefinition(nameof(LightBackgroundLogo), typeof(MimeContent));


        /// <summary>
        /// LandingPageCustomizedImage
        /// </summary>
        public static PropertyDefinition LandingPageCustomizedImage = new PropertyDefinition(nameof(LandingPageCustomizedImage), typeof(MimeContent));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<IntuneBrandingProfileAssignment>));

    }


    /// <summary>
    /// AuditEventObjectSchema
    /// </summary>
    public class AuditEventObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ComponentName
        /// </summary>
        public static PropertyDefinition ComponentName = new PropertyDefinition(nameof(ComponentName), typeof(string));


        /// <summary>
        /// Actor
        /// </summary>
        public static PropertyDefinition Actor = new PropertyDefinition(nameof(Actor), typeof(AuditActor));


        /// <summary>
        /// Activity
        /// </summary>
        public static PropertyDefinition Activity = new PropertyDefinition(nameof(Activity), typeof(string));


        /// <summary>
        /// ActivityDateTime
        /// </summary>
        public static PropertyDefinition ActivityDateTime = new PropertyDefinition(nameof(ActivityDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ActivityType
        /// </summary>
        public static PropertyDefinition ActivityType = new PropertyDefinition(nameof(ActivityType), typeof(string));


        /// <summary>
        /// ActivityOperationType
        /// </summary>
        public static PropertyDefinition ActivityOperationType = new PropertyDefinition(nameof(ActivityOperationType), typeof(string));


        /// <summary>
        /// ActivityResult
        /// </summary>
        public static PropertyDefinition ActivityResult = new PropertyDefinition(nameof(ActivityResult), typeof(string));


        /// <summary>
        /// CorrelationId
        /// </summary>
        public static PropertyDefinition CorrelationId = new PropertyDefinition(nameof(CorrelationId), typeof(Guid));


        /// <summary>
        /// Resources
        /// </summary>
        public static PropertyDefinition Resources = new PropertyDefinition(nameof(Resources), typeof(IList<AuditResource>));


        /// <summary>
        /// Category
        /// </summary>
        public static PropertyDefinition Category = new PropertyDefinition(nameof(Category), typeof(string));

    }


    /// <summary>
    /// UserPFXCertificateObjectSchema
    /// </summary>
    public class UserPFXCertificateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Thumbprint
        /// </summary>
        public static PropertyDefinition Thumbprint = new PropertyDefinition(nameof(Thumbprint), typeof(string));


        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(UserPfxIntendedPurpose));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ProviderName
        /// </summary>
        public static PropertyDefinition ProviderName = new PropertyDefinition(nameof(ProviderName), typeof(string));


        /// <summary>
        /// KeyName
        /// </summary>
        public static PropertyDefinition KeyName = new PropertyDefinition(nameof(KeyName), typeof(string));


        /// <summary>
        /// PaddingScheme
        /// </summary>
        public static PropertyDefinition PaddingScheme = new PropertyDefinition(nameof(PaddingScheme), typeof(UserPfxPaddingScheme));


        /// <summary>
        /// EncryptedPfxBlob
        /// </summary>
        public static PropertyDefinition EncryptedPfxBlob = new PropertyDefinition(nameof(EncryptedPfxBlob), typeof(string));


        /// <summary>
        /// EncryptedPfxPassword
        /// </summary>
        public static PropertyDefinition EncryptedPfxPassword = new PropertyDefinition(nameof(EncryptedPfxPassword), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// GroupPolicyConfigurationObjectSchema
    /// </summary>
    public class GroupPolicyConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DefinitionValues
        /// </summary>
        public static PropertyDefinition DefinitionValues = new PropertyDefinition(nameof(DefinitionValues), typeof(IList<GroupPolicyDefinitionValue>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<GroupPolicyConfigurationAssignment>));

    }


    /// <summary>
    /// GroupPolicyDefinitionObjectSchema
    /// </summary>
    public class GroupPolicyDefinitionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ClassType
        /// </summary>
        public static PropertyDefinition ClassType = new PropertyDefinition(nameof(ClassType), typeof(GroupPolicyDefinitionClassType));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ExplainText
        /// </summary>
        public static PropertyDefinition ExplainText = new PropertyDefinition(nameof(ExplainText), typeof(string));


        /// <summary>
        /// CategoryPath
        /// </summary>
        public static PropertyDefinition CategoryPath = new PropertyDefinition(nameof(CategoryPath), typeof(string));


        /// <summary>
        /// SupportedOn
        /// </summary>
        public static PropertyDefinition SupportedOn = new PropertyDefinition(nameof(SupportedOn), typeof(string));


        /// <summary>
        /// PolicyType
        /// </summary>
        public static PropertyDefinition PolicyType = new PropertyDefinition(nameof(PolicyType), typeof(GroupPolicyType));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DefinitionFile
        /// </summary>
        public static PropertyDefinition DefinitionFile = new PropertyDefinition(nameof(DefinitionFile), typeof(GroupPolicyDefinitionFile));


        /// <summary>
        /// Presentations
        /// </summary>
        public static PropertyDefinition Presentations = new PropertyDefinition(nameof(Presentations), typeof(IList<GroupPolicyPresentation>));

    }


    /// <summary>
    /// GroupPolicyDefinitionFileObjectSchema
    /// </summary>
    public class GroupPolicyDefinitionFileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LanguageCodes
        /// </summary>
        public static PropertyDefinition LanguageCodes = new PropertyDefinition(nameof(LanguageCodes), typeof(IList<String>));


        /// <summary>
        /// TargetPrefix
        /// </summary>
        public static PropertyDefinition TargetPrefix = new PropertyDefinition(nameof(TargetPrefix), typeof(string));


        /// <summary>
        /// TargetNamespace
        /// </summary>
        public static PropertyDefinition TargetNamespace = new PropertyDefinition(nameof(TargetNamespace), typeof(string));


        /// <summary>
        /// PolicyType
        /// </summary>
        public static PropertyDefinition PolicyType = new PropertyDefinition(nameof(PolicyType), typeof(GroupPolicyType));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Definitions
        /// </summary>
        public static PropertyDefinition Definitions = new PropertyDefinition(nameof(Definitions), typeof(IList<GroupPolicyDefinition>));

    }


    /// <summary>
    /// DeviceAppManagementObjectSchema
    /// </summary>
    public class DeviceAppManagementObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// MicrosoftStoreForBusinessLastSuccessfulSyncDateTime
        /// </summary>
        public static PropertyDefinition MicrosoftStoreForBusinessLastSuccessfulSyncDateTime = new PropertyDefinition(nameof(MicrosoftStoreForBusinessLastSuccessfulSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IsEnabledForMicrosoftStoreForBusiness
        /// </summary>
        public static PropertyDefinition IsEnabledForMicrosoftStoreForBusiness = new PropertyDefinition(nameof(IsEnabledForMicrosoftStoreForBusiness), typeof(bool));


        /// <summary>
        /// MicrosoftStoreForBusinessLanguage
        /// </summary>
        public static PropertyDefinition MicrosoftStoreForBusinessLanguage = new PropertyDefinition(nameof(MicrosoftStoreForBusinessLanguage), typeof(string));


        /// <summary>
        /// MicrosoftStoreForBusinessLastCompletedApplicationSyncTime
        /// </summary>
        public static PropertyDefinition MicrosoftStoreForBusinessLastCompletedApplicationSyncTime = new PropertyDefinition(nameof(MicrosoftStoreForBusinessLastCompletedApplicationSyncTime), typeof(DateTimeOffset));


        /// <summary>
        /// MicrosoftStoreForBusinessPortalSelection
        /// </summary>
        public static PropertyDefinition MicrosoftStoreForBusinessPortalSelection = new PropertyDefinition(nameof(MicrosoftStoreForBusinessPortalSelection), typeof(MicrosoftStoreForBusinessPortalSelectionOptions));


        /// <summary>
        /// WindowsManagementApp
        /// </summary>
        public static PropertyDefinition WindowsManagementApp = new PropertyDefinition(nameof(WindowsManagementApp), typeof(WindowsManagementApp));


        /// <summary>
        /// MobileApps
        /// </summary>
        public static PropertyDefinition MobileApps = new PropertyDefinition(nameof(MobileApps), typeof(IList<MobileApp>));


        /// <summary>
        /// MobileAppCategories
        /// </summary>
        public static PropertyDefinition MobileAppCategories = new PropertyDefinition(nameof(MobileAppCategories), typeof(IList<MobileAppCategory>));


        /// <summary>
        /// EnterpriseCodeSigningCertificates
        /// </summary>
        public static PropertyDefinition EnterpriseCodeSigningCertificates = new PropertyDefinition(nameof(EnterpriseCodeSigningCertificates), typeof(IList<EnterpriseCodeSigningCertificate>));


        /// <summary>
        /// IosLobAppProvisioningConfigurations
        /// </summary>
        public static PropertyDefinition IosLobAppProvisioningConfigurations = new PropertyDefinition(nameof(IosLobAppProvisioningConfigurations), typeof(IList<IosLobAppProvisioningConfiguration>));


        /// <summary>
        /// SymantecCodeSigningCertificate
        /// </summary>
        public static PropertyDefinition SymantecCodeSigningCertificate = new PropertyDefinition(nameof(SymantecCodeSigningCertificate), typeof(SymantecCodeSigningCertificate));


        /// <summary>
        /// MobileAppConfigurations
        /// </summary>
        public static PropertyDefinition MobileAppConfigurations = new PropertyDefinition(nameof(MobileAppConfigurations), typeof(IList<ManagedDeviceMobileAppConfiguration>));


        /// <summary>
        /// SideLoadingKeys
        /// </summary>
        public static PropertyDefinition SideLoadingKeys = new PropertyDefinition(nameof(SideLoadingKeys), typeof(IList<SideLoadingKey>));


        /// <summary>
        /// VppTokens
        /// </summary>
        public static PropertyDefinition VppTokens = new PropertyDefinition(nameof(VppTokens), typeof(IList<VppToken>));


        /// <summary>
        /// ManagedAppPolicies
        /// </summary>
        public static PropertyDefinition ManagedAppPolicies = new PropertyDefinition(nameof(ManagedAppPolicies), typeof(IList<ManagedAppPolicy>));


        /// <summary>
        /// IosManagedAppProtections
        /// </summary>
        public static PropertyDefinition IosManagedAppProtections = new PropertyDefinition(nameof(IosManagedAppProtections), typeof(IList<IosManagedAppProtection>));


        /// <summary>
        /// AndroidManagedAppProtections
        /// </summary>
        public static PropertyDefinition AndroidManagedAppProtections = new PropertyDefinition(nameof(AndroidManagedAppProtections), typeof(IList<AndroidManagedAppProtection>));


        /// <summary>
        /// DefaultManagedAppProtections
        /// </summary>
        public static PropertyDefinition DefaultManagedAppProtections = new PropertyDefinition(nameof(DefaultManagedAppProtections), typeof(IList<DefaultManagedAppProtection>));


        /// <summary>
        /// TargetedManagedAppConfigurations
        /// </summary>
        public static PropertyDefinition TargetedManagedAppConfigurations = new PropertyDefinition(nameof(TargetedManagedAppConfigurations), typeof(IList<TargetedManagedAppConfiguration>));


        /// <summary>
        /// MdmWindowsInformationProtectionPolicies
        /// </summary>
        public static PropertyDefinition MdmWindowsInformationProtectionPolicies = new PropertyDefinition(nameof(MdmWindowsInformationProtectionPolicies), typeof(IList<MdmWindowsInformationProtectionPolicy>));


        /// <summary>
        /// WindowsInformationProtectionPolicies
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionPolicies = new PropertyDefinition(nameof(WindowsInformationProtectionPolicies), typeof(IList<WindowsInformationProtectionPolicy>));


        /// <summary>
        /// ManagedAppRegistrations
        /// </summary>
        public static PropertyDefinition ManagedAppRegistrations = new PropertyDefinition(nameof(ManagedAppRegistrations), typeof(IList<ManagedAppRegistration>));


        /// <summary>
        /// ManagedAppStatuses
        /// </summary>
        public static PropertyDefinition ManagedAppStatuses = new PropertyDefinition(nameof(ManagedAppStatuses), typeof(IList<ManagedAppStatus>));


        /// <summary>
        /// WindowsInformationProtectionDeviceRegistrations
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionDeviceRegistrations = new PropertyDefinition(nameof(WindowsInformationProtectionDeviceRegistrations), typeof(IList<WindowsInformationProtectionDeviceRegistration>));


        /// <summary>
        /// WindowsInformationProtectionWipeActions
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionWipeActions = new PropertyDefinition(nameof(WindowsInformationProtectionWipeActions), typeof(IList<WindowsInformationProtectionWipeAction>));


        /// <summary>
        /// ManagedEBooks
        /// </summary>
        public static PropertyDefinition ManagedEBooks = new PropertyDefinition(nameof(ManagedEBooks), typeof(IList<ManagedEBook>));


        /// <summary>
        /// ManagedEBookCategories
        /// </summary>
        public static PropertyDefinition ManagedEBookCategories = new PropertyDefinition(nameof(ManagedEBookCategories), typeof(IList<ManagedEBookCategory>));

    }


    /// <summary>
    /// WindowsManagementAppObjectSchema
    /// </summary>
    public class WindowsManagementAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AvailableVersion
        /// </summary>
        public static PropertyDefinition AvailableVersion = new PropertyDefinition(nameof(AvailableVersion), typeof(string));


        /// <summary>
        /// HealthSummary
        /// </summary>
        public static PropertyDefinition HealthSummary = new PropertyDefinition(nameof(HealthSummary), typeof(WindowsManagementAppHealthSummary));


        /// <summary>
        /// HealthStates
        /// </summary>
        public static PropertyDefinition HealthStates = new PropertyDefinition(nameof(HealthStates), typeof(IList<WindowsManagementAppHealthState>));

    }


    /// <summary>
    /// MobileAppObjectSchema
    /// </summary>
    public class MobileAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Publisher
        /// </summary>
        public static PropertyDefinition Publisher = new PropertyDefinition(nameof(Publisher), typeof(string));


        /// <summary>
        /// LargeIcon
        /// </summary>
        public static PropertyDefinition LargeIcon = new PropertyDefinition(nameof(LargeIcon), typeof(MimeContent));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IsFeatured
        /// </summary>
        public static PropertyDefinition IsFeatured = new PropertyDefinition(nameof(IsFeatured), typeof(bool));


        /// <summary>
        /// PrivacyInformationUrl
        /// </summary>
        public static PropertyDefinition PrivacyInformationUrl = new PropertyDefinition(nameof(PrivacyInformationUrl), typeof(string));


        /// <summary>
        /// InformationUrl
        /// </summary>
        public static PropertyDefinition InformationUrl = new PropertyDefinition(nameof(InformationUrl), typeof(string));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(string));


        /// <summary>
        /// Developer
        /// </summary>
        public static PropertyDefinition Developer = new PropertyDefinition(nameof(Developer), typeof(string));


        /// <summary>
        /// Notes
        /// </summary>
        public static PropertyDefinition Notes = new PropertyDefinition(nameof(Notes), typeof(string));


        /// <summary>
        /// UploadState
        /// </summary>
        public static PropertyDefinition UploadState = new PropertyDefinition(nameof(UploadState), typeof(int));


        /// <summary>
        /// PublishingState
        /// </summary>
        public static PropertyDefinition PublishingState = new PropertyDefinition(nameof(PublishingState), typeof(MobileAppPublishingState));


        /// <summary>
        /// IsAssigned
        /// </summary>
        public static PropertyDefinition IsAssigned = new PropertyDefinition(nameof(IsAssigned), typeof(bool));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// Categories
        /// </summary>
        public static PropertyDefinition Categories = new PropertyDefinition(nameof(Categories), typeof(IList<MobileAppCategory>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<MobileAppAssignment>));


        /// <summary>
        /// InstallSummary
        /// </summary>
        public static PropertyDefinition InstallSummary = new PropertyDefinition(nameof(InstallSummary), typeof(MobileAppInstallSummary));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<MobileAppInstallStatus>));


        /// <summary>
        /// UserStatuses
        /// </summary>
        public static PropertyDefinition UserStatuses = new PropertyDefinition(nameof(UserStatuses), typeof(IList<UserAppInstallStatus>));

    }


    /// <summary>
    /// MobileAppCategoryObjectSchema
    /// </summary>
    public class MobileAppCategoryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// EnterpriseCodeSigningCertificateObjectSchema
    /// </summary>
    public class EnterpriseCodeSigningCertificateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(CertificateStatus));


        /// <summary>
        /// SubjectName
        /// </summary>
        public static PropertyDefinition SubjectName = new PropertyDefinition(nameof(SubjectName), typeof(string));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// IssuerName
        /// </summary>
        public static PropertyDefinition IssuerName = new PropertyDefinition(nameof(IssuerName), typeof(string));


        /// <summary>
        /// Issuer
        /// </summary>
        public static PropertyDefinition Issuer = new PropertyDefinition(nameof(Issuer), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UploadDateTime
        /// </summary>
        public static PropertyDefinition UploadDateTime = new PropertyDefinition(nameof(UploadDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// IosLobAppProvisioningConfigurationObjectSchema
    /// </summary>
    public class IosLobAppProvisioningConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// PayloadFileName
        /// </summary>
        public static PropertyDefinition PayloadFileName = new PropertyDefinition(nameof(PayloadFileName), typeof(string));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// GroupAssignments
        /// </summary>
        public static PropertyDefinition GroupAssignments = new PropertyDefinition(nameof(GroupAssignments), typeof(IList<MobileAppProvisioningConfigGroupAssignment>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<IosLobAppProvisioningConfigurationAssignment>));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<ManagedDeviceMobileAppConfigurationDeviceStatus>));


        /// <summary>
        /// UserStatuses
        /// </summary>
        public static PropertyDefinition UserStatuses = new PropertyDefinition(nameof(UserStatuses), typeof(IList<ManagedDeviceMobileAppConfigurationUserStatus>));

    }


    /// <summary>
    /// SymantecCodeSigningCertificateObjectSchema
    /// </summary>
    public class SymantecCodeSigningCertificateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(CertificateStatus));


        /// <summary>
        /// Password
        /// </summary>
        public static PropertyDefinition Password = new PropertyDefinition(nameof(Password), typeof(string));


        /// <summary>
        /// SubjectName
        /// </summary>
        public static PropertyDefinition SubjectName = new PropertyDefinition(nameof(SubjectName), typeof(string));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// IssuerName
        /// </summary>
        public static PropertyDefinition IssuerName = new PropertyDefinition(nameof(IssuerName), typeof(string));


        /// <summary>
        /// Issuer
        /// </summary>
        public static PropertyDefinition Issuer = new PropertyDefinition(nameof(Issuer), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UploadDateTime
        /// </summary>
        public static PropertyDefinition UploadDateTime = new PropertyDefinition(nameof(UploadDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetedMobileApps
        /// </summary>
        public static PropertyDefinition TargetedMobileApps = new PropertyDefinition(nameof(TargetedMobileApps), typeof(IList<String>));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<ManagedDeviceMobileAppConfigurationAssignment>));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<ManagedDeviceMobileAppConfigurationDeviceStatus>));


        /// <summary>
        /// UserStatuses
        /// </summary>
        public static PropertyDefinition UserStatuses = new PropertyDefinition(nameof(UserStatuses), typeof(IList<ManagedDeviceMobileAppConfigurationUserStatus>));


        /// <summary>
        /// DeviceStatusSummary
        /// </summary>
        public static PropertyDefinition DeviceStatusSummary = new PropertyDefinition(nameof(DeviceStatusSummary), typeof(ManagedDeviceMobileAppConfigurationDeviceSummary));


        /// <summary>
        /// UserStatusSummary
        /// </summary>
        public static PropertyDefinition UserStatusSummary = new PropertyDefinition(nameof(UserStatusSummary), typeof(ManagedDeviceMobileAppConfigurationUserSummary));

    }


    /// <summary>
    /// SideLoadingKeyObjectSchema
    /// </summary>
    public class SideLoadingKeyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// TotalActivation
        /// </summary>
        public static PropertyDefinition TotalActivation = new PropertyDefinition(nameof(TotalActivation), typeof(int));


        /// <summary>
        /// LastUpdatedDateTime
        /// </summary>
        public static PropertyDefinition LastUpdatedDateTime = new PropertyDefinition(nameof(LastUpdatedDateTime), typeof(string));

    }


    /// <summary>
    /// VppTokenObjectSchema
    /// </summary>
    public class VppTokenObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OrganizationName
        /// </summary>
        public static PropertyDefinition OrganizationName = new PropertyDefinition(nameof(OrganizationName), typeof(string));


        /// <summary>
        /// VppTokenAccountType
        /// </summary>
        public static PropertyDefinition VppTokenAccountType = new PropertyDefinition(nameof(VppTokenAccountType), typeof(VppTokenAccountType));


        /// <summary>
        /// AppleId
        /// </summary>
        public static PropertyDefinition AppleId = new PropertyDefinition(nameof(AppleId), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Token
        /// </summary>
        public static PropertyDefinition Token = new PropertyDefinition(nameof(Token), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(VppTokenState));


        /// <summary>
        /// TokenActionResults
        /// </summary>
        public static PropertyDefinition TokenActionResults = new PropertyDefinition(nameof(TokenActionResults), typeof(IList<VppTokenActionResult>));


        /// <summary>
        /// LastSyncStatus
        /// </summary>
        public static PropertyDefinition LastSyncStatus = new PropertyDefinition(nameof(LastSyncStatus), typeof(VppTokenSyncStatus));


        /// <summary>
        /// AutomaticallyUpdateApps
        /// </summary>
        public static PropertyDefinition AutomaticallyUpdateApps = new PropertyDefinition(nameof(AutomaticallyUpdateApps), typeof(bool));


        /// <summary>
        /// CountryOrRegion
        /// </summary>
        public static PropertyDefinition CountryOrRegion = new PropertyDefinition(nameof(CountryOrRegion), typeof(string));


        /// <summary>
        /// DataSharingConsentGranted
        /// </summary>
        public static PropertyDefinition DataSharingConsentGranted = new PropertyDefinition(nameof(DataSharingConsentGranted), typeof(bool));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// LocationName
        /// </summary>
        public static PropertyDefinition LocationName = new PropertyDefinition(nameof(LocationName), typeof(string));


        /// <summary>
        /// ClaimTokenManagementFromExternalMdm
        /// </summary>
        public static PropertyDefinition ClaimTokenManagementFromExternalMdm = new PropertyDefinition(nameof(ClaimTokenManagementFromExternalMdm), typeof(bool));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));

    }


    /// <summary>
    /// ManagedAppPolicyObjectSchema
    /// </summary>
    public class ManagedAppPolicyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// ManagedAppProtectionObjectSchema
    /// </summary>
    public class ManagedAppProtectionObjectSchema : ManagedAppPolicyObjectSchema
    {

        /// <summary>
        /// PeriodOfflineBeforeAccessCheck
        /// </summary>
        public static PropertyDefinition PeriodOfflineBeforeAccessCheck = new PropertyDefinition(nameof(PeriodOfflineBeforeAccessCheck), typeof(TimeSpan));


        /// <summary>
        /// PeriodOnlineBeforeAccessCheck
        /// </summary>
        public static PropertyDefinition PeriodOnlineBeforeAccessCheck = new PropertyDefinition(nameof(PeriodOnlineBeforeAccessCheck), typeof(TimeSpan));


        /// <summary>
        /// AllowedInboundDataTransferSources
        /// </summary>
        public static PropertyDefinition AllowedInboundDataTransferSources = new PropertyDefinition(nameof(AllowedInboundDataTransferSources), typeof(ManagedAppDataTransferLevel));


        /// <summary>
        /// AllowedOutboundDataTransferDestinations
        /// </summary>
        public static PropertyDefinition AllowedOutboundDataTransferDestinations = new PropertyDefinition(nameof(AllowedOutboundDataTransferDestinations), typeof(ManagedAppDataTransferLevel));


        /// <summary>
        /// OrganizationalCredentialsRequired
        /// </summary>
        public static PropertyDefinition OrganizationalCredentialsRequired = new PropertyDefinition(nameof(OrganizationalCredentialsRequired), typeof(bool));


        /// <summary>
        /// AllowedOutboundClipboardSharingLevel
        /// </summary>
        public static PropertyDefinition AllowedOutboundClipboardSharingLevel = new PropertyDefinition(nameof(AllowedOutboundClipboardSharingLevel), typeof(ManagedAppClipboardSharingLevel));


        /// <summary>
        /// DataBackupBlocked
        /// </summary>
        public static PropertyDefinition DataBackupBlocked = new PropertyDefinition(nameof(DataBackupBlocked), typeof(bool));


        /// <summary>
        /// DeviceComplianceRequired
        /// </summary>
        public static PropertyDefinition DeviceComplianceRequired = new PropertyDefinition(nameof(DeviceComplianceRequired), typeof(bool));


        /// <summary>
        /// ManagedBrowserToOpenLinksRequired
        /// </summary>
        public static PropertyDefinition ManagedBrowserToOpenLinksRequired = new PropertyDefinition(nameof(ManagedBrowserToOpenLinksRequired), typeof(bool));


        /// <summary>
        /// SaveAsBlocked
        /// </summary>
        public static PropertyDefinition SaveAsBlocked = new PropertyDefinition(nameof(SaveAsBlocked), typeof(bool));


        /// <summary>
        /// PeriodOfflineBeforeWipeIsEnforced
        /// </summary>
        public static PropertyDefinition PeriodOfflineBeforeWipeIsEnforced = new PropertyDefinition(nameof(PeriodOfflineBeforeWipeIsEnforced), typeof(TimeSpan));


        /// <summary>
        /// PinRequired
        /// </summary>
        public static PropertyDefinition PinRequired = new PropertyDefinition(nameof(PinRequired), typeof(bool));


        /// <summary>
        /// MaximumPinRetries
        /// </summary>
        public static PropertyDefinition MaximumPinRetries = new PropertyDefinition(nameof(MaximumPinRetries), typeof(int));


        /// <summary>
        /// SimplePinBlocked
        /// </summary>
        public static PropertyDefinition SimplePinBlocked = new PropertyDefinition(nameof(SimplePinBlocked), typeof(bool));


        /// <summary>
        /// MinimumPinLength
        /// </summary>
        public static PropertyDefinition MinimumPinLength = new PropertyDefinition(nameof(MinimumPinLength), typeof(int));


        /// <summary>
        /// PinCharacterSet
        /// </summary>
        public static PropertyDefinition PinCharacterSet = new PropertyDefinition(nameof(PinCharacterSet), typeof(ManagedAppPinCharacterSet));


        /// <summary>
        /// PeriodBeforePinReset
        /// </summary>
        public static PropertyDefinition PeriodBeforePinReset = new PropertyDefinition(nameof(PeriodBeforePinReset), typeof(TimeSpan));


        /// <summary>
        /// AllowedDataStorageLocations
        /// </summary>
        public static PropertyDefinition AllowedDataStorageLocations = new PropertyDefinition(nameof(AllowedDataStorageLocations), typeof(IList<ManagedAppDataStorageLocation>));


        /// <summary>
        /// ContactSyncBlocked
        /// </summary>
        public static PropertyDefinition ContactSyncBlocked = new PropertyDefinition(nameof(ContactSyncBlocked), typeof(bool));


        /// <summary>
        /// PrintBlocked
        /// </summary>
        public static PropertyDefinition PrintBlocked = new PropertyDefinition(nameof(PrintBlocked), typeof(bool));


        /// <summary>
        /// FingerprintBlocked
        /// </summary>
        public static PropertyDefinition FingerprintBlocked = new PropertyDefinition(nameof(FingerprintBlocked), typeof(bool));


        /// <summary>
        /// DisableAppPinIfDevicePinIsSet
        /// </summary>
        public static PropertyDefinition DisableAppPinIfDevicePinIsSet = new PropertyDefinition(nameof(DisableAppPinIfDevicePinIsSet), typeof(bool));


        /// <summary>
        /// MinimumRequiredOsVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredOsVersion = new PropertyDefinition(nameof(MinimumRequiredOsVersion), typeof(string));


        /// <summary>
        /// MinimumWarningOsVersion
        /// </summary>
        public static PropertyDefinition MinimumWarningOsVersion = new PropertyDefinition(nameof(MinimumWarningOsVersion), typeof(string));


        /// <summary>
        /// MinimumRequiredAppVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredAppVersion = new PropertyDefinition(nameof(MinimumRequiredAppVersion), typeof(string));


        /// <summary>
        /// MinimumWarningAppVersion
        /// </summary>
        public static PropertyDefinition MinimumWarningAppVersion = new PropertyDefinition(nameof(MinimumWarningAppVersion), typeof(string));


        /// <summary>
        /// MinimumWipeOsVersion
        /// </summary>
        public static PropertyDefinition MinimumWipeOsVersion = new PropertyDefinition(nameof(MinimumWipeOsVersion), typeof(string));


        /// <summary>
        /// MinimumWipeAppVersion
        /// </summary>
        public static PropertyDefinition MinimumWipeAppVersion = new PropertyDefinition(nameof(MinimumWipeAppVersion), typeof(string));


        /// <summary>
        /// AppActionIfDeviceComplianceRequired
        /// </summary>
        public static PropertyDefinition AppActionIfDeviceComplianceRequired = new PropertyDefinition(nameof(AppActionIfDeviceComplianceRequired), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// AppActionIfMaximumPinRetriesExceeded
        /// </summary>
        public static PropertyDefinition AppActionIfMaximumPinRetriesExceeded = new PropertyDefinition(nameof(AppActionIfMaximumPinRetriesExceeded), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// PinRequiredInsteadOfBiometricTimeout
        /// </summary>
        public static PropertyDefinition PinRequiredInsteadOfBiometricTimeout = new PropertyDefinition(nameof(PinRequiredInsteadOfBiometricTimeout), typeof(TimeSpan));

    }


    /// <summary>
    /// TargetedManagedAppProtectionObjectSchema
    /// </summary>
    public class TargetedManagedAppProtectionObjectSchema : ManagedAppProtectionObjectSchema
    {

        /// <summary>
        /// IsAssigned
        /// </summary>
        public static PropertyDefinition IsAssigned = new PropertyDefinition(nameof(IsAssigned), typeof(bool));


        /// <summary>
        /// TargetedAppManagementLevels
        /// </summary>
        public static PropertyDefinition TargetedAppManagementLevels = new PropertyDefinition(nameof(TargetedAppManagementLevels), typeof(AppManagementLevel));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<TargetedManagedAppPolicyAssignment>));

    }


    /// <summary>
    /// IosManagedAppProtectionObjectSchema
    /// </summary>
    public class IosManagedAppProtectionObjectSchema : TargetedManagedAppProtectionObjectSchema
    {

        /// <summary>
        /// AppDataEncryptionType
        /// </summary>
        public static PropertyDefinition AppDataEncryptionType = new PropertyDefinition(nameof(AppDataEncryptionType), typeof(ManagedAppDataEncryptionType));


        /// <summary>
        /// MinimumRequiredSdkVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredSdkVersion = new PropertyDefinition(nameof(MinimumRequiredSdkVersion), typeof(string));


        /// <summary>
        /// DeployedAppCount
        /// </summary>
        public static PropertyDefinition DeployedAppCount = new PropertyDefinition(nameof(DeployedAppCount), typeof(int));


        /// <summary>
        /// FaceIdBlocked
        /// </summary>
        public static PropertyDefinition FaceIdBlocked = new PropertyDefinition(nameof(FaceIdBlocked), typeof(bool));


        /// <summary>
        /// ExemptedAppProtocols
        /// </summary>
        public static PropertyDefinition ExemptedAppProtocols = new PropertyDefinition(nameof(ExemptedAppProtocols), typeof(IList<KeyValuePair>));


        /// <summary>
        /// MinimumWipeSdkVersion
        /// </summary>
        public static PropertyDefinition MinimumWipeSdkVersion = new PropertyDefinition(nameof(MinimumWipeSdkVersion), typeof(string));


        /// <summary>
        /// AllowedIosDeviceModels
        /// </summary>
        public static PropertyDefinition AllowedIosDeviceModels = new PropertyDefinition(nameof(AllowedIosDeviceModels), typeof(string));


        /// <summary>
        /// AppActionIfIosDeviceModelNotAllowed
        /// </summary>
        public static PropertyDefinition AppActionIfIosDeviceModelNotAllowed = new PropertyDefinition(nameof(AppActionIfIosDeviceModelNotAllowed), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// ThirdPartyKeyboardsBlocked
        /// </summary>
        public static PropertyDefinition ThirdPartyKeyboardsBlocked = new PropertyDefinition(nameof(ThirdPartyKeyboardsBlocked), typeof(bool));


        /// <summary>
        /// FilterOpenInToOnlyManagedApps
        /// </summary>
        public static PropertyDefinition FilterOpenInToOnlyManagedApps = new PropertyDefinition(nameof(FilterOpenInToOnlyManagedApps), typeof(bool));


        /// <summary>
        /// DisableProtectionOfManagedOutboundOpenInData
        /// </summary>
        public static PropertyDefinition DisableProtectionOfManagedOutboundOpenInData = new PropertyDefinition(nameof(DisableProtectionOfManagedOutboundOpenInData), typeof(bool));


        /// <summary>
        /// ProtectInboundDataFromUnknownSources
        /// </summary>
        public static PropertyDefinition ProtectInboundDataFromUnknownSources = new PropertyDefinition(nameof(ProtectInboundDataFromUnknownSources), typeof(bool));


        /// <summary>
        /// Apps
        /// </summary>
        public static PropertyDefinition Apps = new PropertyDefinition(nameof(Apps), typeof(IList<ManagedMobileApp>));


        /// <summary>
        /// DeploymentSummary
        /// </summary>
        public static PropertyDefinition DeploymentSummary = new PropertyDefinition(nameof(DeploymentSummary), typeof(ManagedAppPolicyDeploymentSummary));

    }


    /// <summary>
    /// AndroidManagedAppProtectionObjectSchema
    /// </summary>
    public class AndroidManagedAppProtectionObjectSchema : TargetedManagedAppProtectionObjectSchema
    {

        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// DisableAppEncryptionIfDeviceEncryptionIsEnabled
        /// </summary>
        public static PropertyDefinition DisableAppEncryptionIfDeviceEncryptionIsEnabled = new PropertyDefinition(nameof(DisableAppEncryptionIfDeviceEncryptionIsEnabled), typeof(bool));


        /// <summary>
        /// EncryptAppData
        /// </summary>
        public static PropertyDefinition EncryptAppData = new PropertyDefinition(nameof(EncryptAppData), typeof(bool));


        /// <summary>
        /// DeployedAppCount
        /// </summary>
        public static PropertyDefinition DeployedAppCount = new PropertyDefinition(nameof(DeployedAppCount), typeof(int));


        /// <summary>
        /// MinimumRequiredPatchVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredPatchVersion = new PropertyDefinition(nameof(MinimumRequiredPatchVersion), typeof(string));


        /// <summary>
        /// MinimumWarningPatchVersion
        /// </summary>
        public static PropertyDefinition MinimumWarningPatchVersion = new PropertyDefinition(nameof(MinimumWarningPatchVersion), typeof(string));


        /// <summary>
        /// ExemptedAppPackages
        /// </summary>
        public static PropertyDefinition ExemptedAppPackages = new PropertyDefinition(nameof(ExemptedAppPackages), typeof(IList<KeyValuePair>));


        /// <summary>
        /// MinimumWipePatchVersion
        /// </summary>
        public static PropertyDefinition MinimumWipePatchVersion = new PropertyDefinition(nameof(MinimumWipePatchVersion), typeof(string));


        /// <summary>
        /// AllowedAndroidDeviceManufacturers
        /// </summary>
        public static PropertyDefinition AllowedAndroidDeviceManufacturers = new PropertyDefinition(nameof(AllowedAndroidDeviceManufacturers), typeof(string));


        /// <summary>
        /// AppActionIfAndroidDeviceManufacturerNotAllowed
        /// </summary>
        public static PropertyDefinition AppActionIfAndroidDeviceManufacturerNotAllowed = new PropertyDefinition(nameof(AppActionIfAndroidDeviceManufacturerNotAllowed), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// Apps
        /// </summary>
        public static PropertyDefinition Apps = new PropertyDefinition(nameof(Apps), typeof(IList<ManagedMobileApp>));


        /// <summary>
        /// DeploymentSummary
        /// </summary>
        public static PropertyDefinition DeploymentSummary = new PropertyDefinition(nameof(DeploymentSummary), typeof(ManagedAppPolicyDeploymentSummary));

    }


    /// <summary>
    /// DefaultManagedAppProtectionObjectSchema
    /// </summary>
    public class DefaultManagedAppProtectionObjectSchema : ManagedAppProtectionObjectSchema
    {

        /// <summary>
        /// AppDataEncryptionType
        /// </summary>
        public static PropertyDefinition AppDataEncryptionType = new PropertyDefinition(nameof(AppDataEncryptionType), typeof(ManagedAppDataEncryptionType));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// EncryptAppData
        /// </summary>
        public static PropertyDefinition EncryptAppData = new PropertyDefinition(nameof(EncryptAppData), typeof(bool));


        /// <summary>
        /// DisableAppEncryptionIfDeviceEncryptionIsEnabled
        /// </summary>
        public static PropertyDefinition DisableAppEncryptionIfDeviceEncryptionIsEnabled = new PropertyDefinition(nameof(DisableAppEncryptionIfDeviceEncryptionIsEnabled), typeof(bool));


        /// <summary>
        /// MinimumRequiredSdkVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredSdkVersion = new PropertyDefinition(nameof(MinimumRequiredSdkVersion), typeof(string));


        /// <summary>
        /// CustomSettings
        /// </summary>
        public static PropertyDefinition CustomSettings = new PropertyDefinition(nameof(CustomSettings), typeof(IList<KeyValuePair>));


        /// <summary>
        /// DeployedAppCount
        /// </summary>
        public static PropertyDefinition DeployedAppCount = new PropertyDefinition(nameof(DeployedAppCount), typeof(int));


        /// <summary>
        /// MinimumRequiredPatchVersion
        /// </summary>
        public static PropertyDefinition MinimumRequiredPatchVersion = new PropertyDefinition(nameof(MinimumRequiredPatchVersion), typeof(string));


        /// <summary>
        /// MinimumWarningPatchVersion
        /// </summary>
        public static PropertyDefinition MinimumWarningPatchVersion = new PropertyDefinition(nameof(MinimumWarningPatchVersion), typeof(string));


        /// <summary>
        /// ExemptedAppProtocols
        /// </summary>
        public static PropertyDefinition ExemptedAppProtocols = new PropertyDefinition(nameof(ExemptedAppProtocols), typeof(IList<KeyValuePair>));


        /// <summary>
        /// ExemptedAppPackages
        /// </summary>
        public static PropertyDefinition ExemptedAppPackages = new PropertyDefinition(nameof(ExemptedAppPackages), typeof(IList<KeyValuePair>));


        /// <summary>
        /// FaceIdBlocked
        /// </summary>
        public static PropertyDefinition FaceIdBlocked = new PropertyDefinition(nameof(FaceIdBlocked), typeof(bool));


        /// <summary>
        /// MinimumWipeSdkVersion
        /// </summary>
        public static PropertyDefinition MinimumWipeSdkVersion = new PropertyDefinition(nameof(MinimumWipeSdkVersion), typeof(string));


        /// <summary>
        /// MinimumWipePatchVersion
        /// </summary>
        public static PropertyDefinition MinimumWipePatchVersion = new PropertyDefinition(nameof(MinimumWipePatchVersion), typeof(string));


        /// <summary>
        /// AllowedIosDeviceModels
        /// </summary>
        public static PropertyDefinition AllowedIosDeviceModels = new PropertyDefinition(nameof(AllowedIosDeviceModels), typeof(string));


        /// <summary>
        /// AppActionIfIosDeviceModelNotAllowed
        /// </summary>
        public static PropertyDefinition AppActionIfIosDeviceModelNotAllowed = new PropertyDefinition(nameof(AppActionIfIosDeviceModelNotAllowed), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// AllowedAndroidDeviceManufacturers
        /// </summary>
        public static PropertyDefinition AllowedAndroidDeviceManufacturers = new PropertyDefinition(nameof(AllowedAndroidDeviceManufacturers), typeof(string));


        /// <summary>
        /// AppActionIfAndroidDeviceManufacturerNotAllowed
        /// </summary>
        public static PropertyDefinition AppActionIfAndroidDeviceManufacturerNotAllowed = new PropertyDefinition(nameof(AppActionIfAndroidDeviceManufacturerNotAllowed), typeof(ManagedAppRemediationAction));


        /// <summary>
        /// ThirdPartyKeyboardsBlocked
        /// </summary>
        public static PropertyDefinition ThirdPartyKeyboardsBlocked = new PropertyDefinition(nameof(ThirdPartyKeyboardsBlocked), typeof(bool));


        /// <summary>
        /// FilterOpenInToOnlyManagedApps
        /// </summary>
        public static PropertyDefinition FilterOpenInToOnlyManagedApps = new PropertyDefinition(nameof(FilterOpenInToOnlyManagedApps), typeof(bool));


        /// <summary>
        /// DisableProtectionOfManagedOutboundOpenInData
        /// </summary>
        public static PropertyDefinition DisableProtectionOfManagedOutboundOpenInData = new PropertyDefinition(nameof(DisableProtectionOfManagedOutboundOpenInData), typeof(bool));


        /// <summary>
        /// ProtectInboundDataFromUnknownSources
        /// </summary>
        public static PropertyDefinition ProtectInboundDataFromUnknownSources = new PropertyDefinition(nameof(ProtectInboundDataFromUnknownSources), typeof(bool));


        /// <summary>
        /// Apps
        /// </summary>
        public static PropertyDefinition Apps = new PropertyDefinition(nameof(Apps), typeof(IList<ManagedMobileApp>));


        /// <summary>
        /// DeploymentSummary
        /// </summary>
        public static PropertyDefinition DeploymentSummary = new PropertyDefinition(nameof(DeploymentSummary), typeof(ManagedAppPolicyDeploymentSummary));

    }


    /// <summary>
    /// ManagedAppConfigurationObjectSchema
    /// </summary>
    public class ManagedAppConfigurationObjectSchema : ManagedAppPolicyObjectSchema
    {

        /// <summary>
        /// CustomSettings
        /// </summary>
        public static PropertyDefinition CustomSettings = new PropertyDefinition(nameof(CustomSettings), typeof(IList<KeyValuePair>));

    }


    /// <summary>
    /// TargetedManagedAppConfigurationObjectSchema
    /// </summary>
    public class TargetedManagedAppConfigurationObjectSchema : ManagedAppConfigurationObjectSchema
    {

        /// <summary>
        /// DeployedAppCount
        /// </summary>
        public static PropertyDefinition DeployedAppCount = new PropertyDefinition(nameof(DeployedAppCount), typeof(int));


        /// <summary>
        /// IsAssigned
        /// </summary>
        public static PropertyDefinition IsAssigned = new PropertyDefinition(nameof(IsAssigned), typeof(bool));


        /// <summary>
        /// Apps
        /// </summary>
        public static PropertyDefinition Apps = new PropertyDefinition(nameof(Apps), typeof(IList<ManagedMobileApp>));


        /// <summary>
        /// DeploymentSummary
        /// </summary>
        public static PropertyDefinition DeploymentSummary = new PropertyDefinition(nameof(DeploymentSummary), typeof(ManagedAppPolicyDeploymentSummary));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<TargetedManagedAppPolicyAssignment>));

    }


    /// <summary>
    /// WindowsInformationProtectionObjectSchema
    /// </summary>
    public class WindowsInformationProtectionObjectSchema : ManagedAppPolicyObjectSchema
    {

        /// <summary>
        /// EnforcementLevel
        /// </summary>
        public static PropertyDefinition EnforcementLevel = new PropertyDefinition(nameof(EnforcementLevel), typeof(WindowsInformationProtectionEnforcementLevel));


        /// <summary>
        /// EnterpriseDomain
        /// </summary>
        public static PropertyDefinition EnterpriseDomain = new PropertyDefinition(nameof(EnterpriseDomain), typeof(string));


        /// <summary>
        /// EnterpriseProtectedDomainNames
        /// </summary>
        public static PropertyDefinition EnterpriseProtectedDomainNames = new PropertyDefinition(nameof(EnterpriseProtectedDomainNames), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// ProtectionUnderLockConfigRequired
        /// </summary>
        public static PropertyDefinition ProtectionUnderLockConfigRequired = new PropertyDefinition(nameof(ProtectionUnderLockConfigRequired), typeof(bool));


        /// <summary>
        /// DataRecoveryCertificate
        /// </summary>
        public static PropertyDefinition DataRecoveryCertificate = new PropertyDefinition(nameof(DataRecoveryCertificate), typeof(WindowsInformationProtectionDataRecoveryCertificate));


        /// <summary>
        /// RevokeOnUnenrollDisabled
        /// </summary>
        public static PropertyDefinition RevokeOnUnenrollDisabled = new PropertyDefinition(nameof(RevokeOnUnenrollDisabled), typeof(bool));


        /// <summary>
        /// RightsManagementServicesTemplateId
        /// </summary>
        public static PropertyDefinition RightsManagementServicesTemplateId = new PropertyDefinition(nameof(RightsManagementServicesTemplateId), typeof(Guid));


        /// <summary>
        /// AzureRightsManagementServicesAllowed
        /// </summary>
        public static PropertyDefinition AzureRightsManagementServicesAllowed = new PropertyDefinition(nameof(AzureRightsManagementServicesAllowed), typeof(bool));


        /// <summary>
        /// IconsVisible
        /// </summary>
        public static PropertyDefinition IconsVisible = new PropertyDefinition(nameof(IconsVisible), typeof(bool));


        /// <summary>
        /// ProtectedApps
        /// </summary>
        public static PropertyDefinition ProtectedApps = new PropertyDefinition(nameof(ProtectedApps), typeof(IList<WindowsInformationProtectionApp>));


        /// <summary>
        /// ExemptApps
        /// </summary>
        public static PropertyDefinition ExemptApps = new PropertyDefinition(nameof(ExemptApps), typeof(IList<WindowsInformationProtectionApp>));


        /// <summary>
        /// EnterpriseNetworkDomainNames
        /// </summary>
        public static PropertyDefinition EnterpriseNetworkDomainNames = new PropertyDefinition(nameof(EnterpriseNetworkDomainNames), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// EnterpriseProxiedDomains
        /// </summary>
        public static PropertyDefinition EnterpriseProxiedDomains = new PropertyDefinition(nameof(EnterpriseProxiedDomains), typeof(IList<WindowsInformationProtectionProxiedDomainCollection>));


        /// <summary>
        /// EnterpriseIPRanges
        /// </summary>
        public static PropertyDefinition EnterpriseIPRanges = new PropertyDefinition(nameof(EnterpriseIPRanges), typeof(IList<WindowsInformationProtectionIPRangeCollection>));


        /// <summary>
        /// EnterpriseIPRangesAreAuthoritative
        /// </summary>
        public static PropertyDefinition EnterpriseIPRangesAreAuthoritative = new PropertyDefinition(nameof(EnterpriseIPRangesAreAuthoritative), typeof(bool));


        /// <summary>
        /// EnterpriseProxyServers
        /// </summary>
        public static PropertyDefinition EnterpriseProxyServers = new PropertyDefinition(nameof(EnterpriseProxyServers), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// EnterpriseInternalProxyServers
        /// </summary>
        public static PropertyDefinition EnterpriseInternalProxyServers = new PropertyDefinition(nameof(EnterpriseInternalProxyServers), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// EnterpriseProxyServersAreAuthoritative
        /// </summary>
        public static PropertyDefinition EnterpriseProxyServersAreAuthoritative = new PropertyDefinition(nameof(EnterpriseProxyServersAreAuthoritative), typeof(bool));


        /// <summary>
        /// NeutralDomainResources
        /// </summary>
        public static PropertyDefinition NeutralDomainResources = new PropertyDefinition(nameof(NeutralDomainResources), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// IndexingEncryptedStoresOrItemsBlocked
        /// </summary>
        public static PropertyDefinition IndexingEncryptedStoresOrItemsBlocked = new PropertyDefinition(nameof(IndexingEncryptedStoresOrItemsBlocked), typeof(bool));


        /// <summary>
        /// SmbAutoEncryptedFileExtensions
        /// </summary>
        public static PropertyDefinition SmbAutoEncryptedFileExtensions = new PropertyDefinition(nameof(SmbAutoEncryptedFileExtensions), typeof(IList<WindowsInformationProtectionResourceCollection>));


        /// <summary>
        /// IsAssigned
        /// </summary>
        public static PropertyDefinition IsAssigned = new PropertyDefinition(nameof(IsAssigned), typeof(bool));


        /// <summary>
        /// ProtectedAppLockerFiles
        /// </summary>
        public static PropertyDefinition ProtectedAppLockerFiles = new PropertyDefinition(nameof(ProtectedAppLockerFiles), typeof(IList<WindowsInformationProtectionAppLockerFile>));


        /// <summary>
        /// ExemptAppLockerFiles
        /// </summary>
        public static PropertyDefinition ExemptAppLockerFiles = new PropertyDefinition(nameof(ExemptAppLockerFiles), typeof(IList<WindowsInformationProtectionAppLockerFile>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<TargetedManagedAppPolicyAssignment>));

    }


    /// <summary>
    /// MdmWindowsInformationProtectionPolicyObjectSchema
    /// </summary>
    public class MdmWindowsInformationProtectionPolicyObjectSchema : WindowsInformationProtectionObjectSchema
    {
    }


    /// <summary>
    /// WindowsInformationProtectionPolicyObjectSchema
    /// </summary>
    public class WindowsInformationProtectionPolicyObjectSchema : WindowsInformationProtectionObjectSchema
    {

        /// <summary>
        /// RevokeOnMdmHandoffDisabled
        /// </summary>
        public static PropertyDefinition RevokeOnMdmHandoffDisabled = new PropertyDefinition(nameof(RevokeOnMdmHandoffDisabled), typeof(bool));


        /// <summary>
        /// MdmEnrollmentUrl
        /// </summary>
        public static PropertyDefinition MdmEnrollmentUrl = new PropertyDefinition(nameof(MdmEnrollmentUrl), typeof(string));


        /// <summary>
        /// WindowsHelloForBusinessBlocked
        /// </summary>
        public static PropertyDefinition WindowsHelloForBusinessBlocked = new PropertyDefinition(nameof(WindowsHelloForBusinessBlocked), typeof(bool));


        /// <summary>
        /// PinMinimumLength
        /// </summary>
        public static PropertyDefinition PinMinimumLength = new PropertyDefinition(nameof(PinMinimumLength), typeof(int));


        /// <summary>
        /// PinUppercaseLetters
        /// </summary>
        public static PropertyDefinition PinUppercaseLetters = new PropertyDefinition(nameof(PinUppercaseLetters), typeof(WindowsInformationProtectionPinCharacterRequirements));


        /// <summary>
        /// PinLowercaseLetters
        /// </summary>
        public static PropertyDefinition PinLowercaseLetters = new PropertyDefinition(nameof(PinLowercaseLetters), typeof(WindowsInformationProtectionPinCharacterRequirements));


        /// <summary>
        /// PinSpecialCharacters
        /// </summary>
        public static PropertyDefinition PinSpecialCharacters = new PropertyDefinition(nameof(PinSpecialCharacters), typeof(WindowsInformationProtectionPinCharacterRequirements));


        /// <summary>
        /// PinExpirationDays
        /// </summary>
        public static PropertyDefinition PinExpirationDays = new PropertyDefinition(nameof(PinExpirationDays), typeof(int));


        /// <summary>
        /// NumberOfPastPinsRemembered
        /// </summary>
        public static PropertyDefinition NumberOfPastPinsRemembered = new PropertyDefinition(nameof(NumberOfPastPinsRemembered), typeof(int));


        /// <summary>
        /// PasswordMaximumAttemptCount
        /// </summary>
        public static PropertyDefinition PasswordMaximumAttemptCount = new PropertyDefinition(nameof(PasswordMaximumAttemptCount), typeof(int));


        /// <summary>
        /// MinutesOfInactivityBeforeDeviceLock
        /// </summary>
        public static PropertyDefinition MinutesOfInactivityBeforeDeviceLock = new PropertyDefinition(nameof(MinutesOfInactivityBeforeDeviceLock), typeof(int));


        /// <summary>
        /// DaysWithoutContactBeforeUnenroll
        /// </summary>
        public static PropertyDefinition DaysWithoutContactBeforeUnenroll = new PropertyDefinition(nameof(DaysWithoutContactBeforeUnenroll), typeof(int));

    }


    /// <summary>
    /// ManagedAppStatusObjectSchema
    /// </summary>
    public class ManagedAppStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// WindowsInformationProtectionWipeActionObjectSchema
    /// </summary>
    public class WindowsInformationProtectionWipeActionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ActionState));


        /// <summary>
        /// TargetedUserId
        /// </summary>
        public static PropertyDefinition TargetedUserId = new PropertyDefinition(nameof(TargetedUserId), typeof(string));


        /// <summary>
        /// TargetedDeviceRegistrationId
        /// </summary>
        public static PropertyDefinition TargetedDeviceRegistrationId = new PropertyDefinition(nameof(TargetedDeviceRegistrationId), typeof(string));


        /// <summary>
        /// TargetedDeviceName
        /// </summary>
        public static PropertyDefinition TargetedDeviceName = new PropertyDefinition(nameof(TargetedDeviceName), typeof(string));


        /// <summary>
        /// TargetedDeviceMacAddress
        /// </summary>
        public static PropertyDefinition TargetedDeviceMacAddress = new PropertyDefinition(nameof(TargetedDeviceMacAddress), typeof(string));

    }


    /// <summary>
    /// ManagedEBookObjectSchema
    /// </summary>
    public class ManagedEBookObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Publisher
        /// </summary>
        public static PropertyDefinition Publisher = new PropertyDefinition(nameof(Publisher), typeof(string));


        /// <summary>
        /// PublishedDateTime
        /// </summary>
        public static PropertyDefinition PublishedDateTime = new PropertyDefinition(nameof(PublishedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LargeCover
        /// </summary>
        public static PropertyDefinition LargeCover = new PropertyDefinition(nameof(LargeCover), typeof(MimeContent));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// InformationUrl
        /// </summary>
        public static PropertyDefinition InformationUrl = new PropertyDefinition(nameof(InformationUrl), typeof(string));


        /// <summary>
        /// PrivacyInformationUrl
        /// </summary>
        public static PropertyDefinition PrivacyInformationUrl = new PropertyDefinition(nameof(PrivacyInformationUrl), typeof(string));


        /// <summary>
        /// Categories
        /// </summary>
        public static PropertyDefinition Categories = new PropertyDefinition(nameof(Categories), typeof(IList<ManagedEBookCategory>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<ManagedEBookAssignment>));


        /// <summary>
        /// InstallSummary
        /// </summary>
        public static PropertyDefinition InstallSummary = new PropertyDefinition(nameof(InstallSummary), typeof(EBookInstallSummary));


        /// <summary>
        /// DeviceStates
        /// </summary>
        public static PropertyDefinition DeviceStates = new PropertyDefinition(nameof(DeviceStates), typeof(IList<DeviceInstallState>));


        /// <summary>
        /// UserStateSummary
        /// </summary>
        public static PropertyDefinition UserStateSummary = new PropertyDefinition(nameof(UserStateSummary), typeof(IList<UserInstallStateSummary>));

    }


    /// <summary>
    /// ManagedEBookCategoryObjectSchema
    /// </summary>
    public class ManagedEBookCategoryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// MobileAppAssignmentObjectSchema
    /// </summary>
    public class MobileAppAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Intent
        /// </summary>
        public static PropertyDefinition Intent = new PropertyDefinition(nameof(Intent), typeof(InstallIntent));


        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(MobileAppAssignmentSettings));

    }


    /// <summary>
    /// MobileAppInstallSummaryObjectSchema
    /// </summary>
    public class MobileAppInstallSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// InstalledDeviceCount
        /// </summary>
        public static PropertyDefinition InstalledDeviceCount = new PropertyDefinition(nameof(InstalledDeviceCount), typeof(int));


        /// <summary>
        /// FailedDeviceCount
        /// </summary>
        public static PropertyDefinition FailedDeviceCount = new PropertyDefinition(nameof(FailedDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// NotInstalledDeviceCount
        /// </summary>
        public static PropertyDefinition NotInstalledDeviceCount = new PropertyDefinition(nameof(NotInstalledDeviceCount), typeof(int));


        /// <summary>
        /// PendingInstallDeviceCount
        /// </summary>
        public static PropertyDefinition PendingInstallDeviceCount = new PropertyDefinition(nameof(PendingInstallDeviceCount), typeof(int));


        /// <summary>
        /// InstalledUserCount
        /// </summary>
        public static PropertyDefinition InstalledUserCount = new PropertyDefinition(nameof(InstalledUserCount), typeof(int));


        /// <summary>
        /// FailedUserCount
        /// </summary>
        public static PropertyDefinition FailedUserCount = new PropertyDefinition(nameof(FailedUserCount), typeof(int));


        /// <summary>
        /// NotApplicableUserCount
        /// </summary>
        public static PropertyDefinition NotApplicableUserCount = new PropertyDefinition(nameof(NotApplicableUserCount), typeof(int));


        /// <summary>
        /// NotInstalledUserCount
        /// </summary>
        public static PropertyDefinition NotInstalledUserCount = new PropertyDefinition(nameof(NotInstalledUserCount), typeof(int));


        /// <summary>
        /// PendingInstallUserCount
        /// </summary>
        public static PropertyDefinition PendingInstallUserCount = new PropertyDefinition(nameof(PendingInstallUserCount), typeof(int));

    }


    /// <summary>
    /// MobileAppInstallStatusObjectSchema
    /// </summary>
    public class MobileAppInstallStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MobileAppInstallStatusValue
        /// </summary>
        public static PropertyDefinition MobileAppInstallStatusValue = new PropertyDefinition(nameof(MobileAppInstallStatusValue), typeof(ResultantAppState));


        /// <summary>
        /// InstallState
        /// </summary>
        public static PropertyDefinition InstallState = new PropertyDefinition(nameof(InstallState), typeof(ResultantAppState));


        /// <summary>
        /// InstallStateDetail
        /// </summary>
        public static PropertyDefinition InstallStateDetail = new PropertyDefinition(nameof(InstallStateDetail), typeof(ResultantAppStateDetail));


        /// <summary>
        /// ErrorCode
        /// </summary>
        public static PropertyDefinition ErrorCode = new PropertyDefinition(nameof(ErrorCode), typeof(int));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// OsDescription
        /// </summary>
        public static PropertyDefinition OsDescription = new PropertyDefinition(nameof(OsDescription), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayVersion
        /// </summary>
        public static PropertyDefinition DisplayVersion = new PropertyDefinition(nameof(DisplayVersion), typeof(string));


        /// <summary>
        /// App
        /// </summary>
        public static PropertyDefinition App = new PropertyDefinition(nameof(App), typeof(MobileApp));

    }


    /// <summary>
    /// UserAppInstallStatusObjectSchema
    /// </summary>
    public class UserAppInstallStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// InstalledDeviceCount
        /// </summary>
        public static PropertyDefinition InstalledDeviceCount = new PropertyDefinition(nameof(InstalledDeviceCount), typeof(int));


        /// <summary>
        /// FailedDeviceCount
        /// </summary>
        public static PropertyDefinition FailedDeviceCount = new PropertyDefinition(nameof(FailedDeviceCount), typeof(int));


        /// <summary>
        /// NotInstalledDeviceCount
        /// </summary>
        public static PropertyDefinition NotInstalledDeviceCount = new PropertyDefinition(nameof(NotInstalledDeviceCount), typeof(int));


        /// <summary>
        /// App
        /// </summary>
        public static PropertyDefinition App = new PropertyDefinition(nameof(App), typeof(MobileApp));


        /// <summary>
        /// DeviceStatuses
        /// </summary>
        public static PropertyDefinition DeviceStatuses = new PropertyDefinition(nameof(DeviceStatuses), typeof(IList<MobileAppInstallStatus>));

    }


    /// <summary>
    /// MobileAppContentFileObjectSchema
    /// </summary>
    public class MobileAppContentFileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AzureStorageUri
        /// </summary>
        public static PropertyDefinition AzureStorageUri = new PropertyDefinition(nameof(AzureStorageUri), typeof(string));


        /// <summary>
        /// IsCommitted
        /// </summary>
        public static PropertyDefinition IsCommitted = new PropertyDefinition(nameof(IsCommitted), typeof(bool));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));


        /// <summary>
        /// SizeEncrypted
        /// </summary>
        public static PropertyDefinition SizeEncrypted = new PropertyDefinition(nameof(SizeEncrypted), typeof(Int64));


        /// <summary>
        /// AzureStorageUriExpirationDateTime
        /// </summary>
        public static PropertyDefinition AzureStorageUriExpirationDateTime = new PropertyDefinition(nameof(AzureStorageUriExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Manifest
        /// </summary>
        public static PropertyDefinition Manifest = new PropertyDefinition(nameof(Manifest), typeof(string));


        /// <summary>
        /// UploadState
        /// </summary>
        public static PropertyDefinition UploadState = new PropertyDefinition(nameof(UploadState), typeof(MobileAppContentFileUploadState));


        /// <summary>
        /// IsFrameworkFile
        /// </summary>
        public static PropertyDefinition IsFrameworkFile = new PropertyDefinition(nameof(IsFrameworkFile), typeof(bool));


        /// <summary>
        /// IsDependency
        /// </summary>
        public static PropertyDefinition IsDependency = new PropertyDefinition(nameof(IsDependency), typeof(bool));

    }


    /// <summary>
    /// MobileAppProvisioningConfigGroupAssignmentObjectSchema
    /// </summary>
    public class MobileAppProvisioningConfigGroupAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetGroupId
        /// </summary>
        public static PropertyDefinition TargetGroupId = new PropertyDefinition(nameof(TargetGroupId), typeof(string));

    }


    /// <summary>
    /// IosLobAppProvisioningConfigurationAssignmentObjectSchema
    /// </summary>
    public class IosLobAppProvisioningConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationDeviceStatusObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationDeviceStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(int));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationUserStatusObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationUserStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// DevicesCount
        /// </summary>
        public static PropertyDefinition DevicesCount = new PropertyDefinition(nameof(DevicesCount), typeof(int));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationAssignmentObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationDeviceSummaryObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationDeviceSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// NotApplicablePlatformCount
        /// </summary>
        public static PropertyDefinition NotApplicablePlatformCount = new PropertyDefinition(nameof(NotApplicablePlatformCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationUserSummaryObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationUserSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// IosVppAppObjectSchema
    /// </summary>
    public class IosVppAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// ReleaseDateTime
        /// </summary>
        public static PropertyDefinition ReleaseDateTime = new PropertyDefinition(nameof(ReleaseDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// LicensingType
        /// </summary>
        public static PropertyDefinition LicensingType = new PropertyDefinition(nameof(LicensingType), typeof(VppLicensingType));


        /// <summary>
        /// ApplicableDeviceType
        /// </summary>
        public static PropertyDefinition ApplicableDeviceType = new PropertyDefinition(nameof(ApplicableDeviceType), typeof(IosDeviceType));


        /// <summary>
        /// VppTokenOrganizationName
        /// </summary>
        public static PropertyDefinition VppTokenOrganizationName = new PropertyDefinition(nameof(VppTokenOrganizationName), typeof(string));


        /// <summary>
        /// VppTokenAccountType
        /// </summary>
        public static PropertyDefinition VppTokenAccountType = new PropertyDefinition(nameof(VppTokenAccountType), typeof(VppTokenAccountType));


        /// <summary>
        /// VppTokenAppleId
        /// </summary>
        public static PropertyDefinition VppTokenAppleId = new PropertyDefinition(nameof(VppTokenAppleId), typeof(string));


        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// VppTokenId
        /// </summary>
        public static PropertyDefinition VppTokenId = new PropertyDefinition(nameof(VppTokenId), typeof(string));


        /// <summary>
        /// RevokeLicenseActionResults
        /// </summary>
        public static PropertyDefinition RevokeLicenseActionResults = new PropertyDefinition(nameof(RevokeLicenseActionResults), typeof(IList<IosVppAppRevokeLicensesActionResult>));


        /// <summary>
        /// AssignedLicenses
        /// </summary>
        public static PropertyDefinition AssignedLicenses = new PropertyDefinition(nameof(AssignedLicenses), typeof(IList<IosVppAppAssignedLicense>));

    }


    /// <summary>
    /// IosVppAppAssignedLicenseObjectSchema
    /// </summary>
    public class IosVppAppAssignedLicenseObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserEmailAddress
        /// </summary>
        public static PropertyDefinition UserEmailAddress = new PropertyDefinition(nameof(UserEmailAddress), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// MacOSOfficeSuiteAppObjectSchema
    /// </summary>
    public class MacOSOfficeSuiteAppObjectSchema : MobileAppObjectSchema
    {
    }


    /// <summary>
    /// OfficeSuiteAppObjectSchema
    /// </summary>
    public class OfficeSuiteAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// AutoAcceptEula
        /// </summary>
        public static PropertyDefinition AutoAcceptEula = new PropertyDefinition(nameof(AutoAcceptEula), typeof(bool));


        /// <summary>
        /// ProductIds
        /// </summary>
        public static PropertyDefinition ProductIds = new PropertyDefinition(nameof(ProductIds), typeof(IList<OfficeProductId>));


        /// <summary>
        /// ExcludedApps
        /// </summary>
        public static PropertyDefinition ExcludedApps = new PropertyDefinition(nameof(ExcludedApps), typeof(ExcludedApps));


        /// <summary>
        /// UseSharedComputerActivation
        /// </summary>
        public static PropertyDefinition UseSharedComputerActivation = new PropertyDefinition(nameof(UseSharedComputerActivation), typeof(bool));


        /// <summary>
        /// UpdateChannel
        /// </summary>
        public static PropertyDefinition UpdateChannel = new PropertyDefinition(nameof(UpdateChannel), typeof(OfficeUpdateChannel));


        /// <summary>
        /// OfficePlatformArchitecture
        /// </summary>
        public static PropertyDefinition OfficePlatformArchitecture = new PropertyDefinition(nameof(OfficePlatformArchitecture), typeof(WindowsArchitecture));


        /// <summary>
        /// LocalesToInstall
        /// </summary>
        public static PropertyDefinition LocalesToInstall = new PropertyDefinition(nameof(LocalesToInstall), typeof(IList<String>));


        /// <summary>
        /// InstallProgressDisplayLevel
        /// </summary>
        public static PropertyDefinition InstallProgressDisplayLevel = new PropertyDefinition(nameof(InstallProgressDisplayLevel), typeof(OfficeSuiteInstallProgressDisplayLevel));


        /// <summary>
        /// ShouldUninstallOlderVersionsOfOffice
        /// </summary>
        public static PropertyDefinition ShouldUninstallOlderVersionsOfOffice = new PropertyDefinition(nameof(ShouldUninstallOlderVersionsOfOffice), typeof(bool));


        /// <summary>
        /// TargetVersion
        /// </summary>
        public static PropertyDefinition TargetVersion = new PropertyDefinition(nameof(TargetVersion), typeof(string));


        /// <summary>
        /// UpdateVersion
        /// </summary>
        public static PropertyDefinition UpdateVersion = new PropertyDefinition(nameof(UpdateVersion), typeof(string));


        /// <summary>
        /// OfficeConfigurationXml
        /// </summary>
        public static PropertyDefinition OfficeConfigurationXml = new PropertyDefinition(nameof(OfficeConfigurationXml), typeof(string));

    }


    /// <summary>
    /// ManagedAppObjectSchema
    /// </summary>
    public class ManagedAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// AppAvailability
        /// </summary>
        public static PropertyDefinition AppAvailability = new PropertyDefinition(nameof(AppAvailability), typeof(ManagedAppAvailability));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// ManagedAndroidStoreAppObjectSchema
    /// </summary>
    public class ManagedAndroidStoreAppObjectSchema : ManagedAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(AndroidMinimumOperatingSystem));

    }


    /// <summary>
    /// ManagedIOSStoreAppObjectSchema
    /// </summary>
    public class ManagedIOSStoreAppObjectSchema : ManagedAppObjectSchema
    {

        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// ApplicableDeviceType
        /// </summary>
        public static PropertyDefinition ApplicableDeviceType = new PropertyDefinition(nameof(ApplicableDeviceType), typeof(IosDeviceType));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(IosMinimumOperatingSystem));

    }


    /// <summary>
    /// ManagedMobileLobAppObjectSchema
    /// </summary>
    public class ManagedMobileLobAppObjectSchema : ManagedAppObjectSchema
    {

        /// <summary>
        /// CommittedContentVersion
        /// </summary>
        public static PropertyDefinition CommittedContentVersion = new PropertyDefinition(nameof(CommittedContentVersion), typeof(string));


        /// <summary>
        /// FileName
        /// </summary>
        public static PropertyDefinition FileName = new PropertyDefinition(nameof(FileName), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));


        /// <summary>
        /// ContentVersions
        /// </summary>
        public static PropertyDefinition ContentVersions = new PropertyDefinition(nameof(ContentVersions), typeof(IList<MobileAppContent>));

    }


    /// <summary>
    /// MobileAppContentObjectSchema
    /// </summary>
    public class MobileAppContentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Files
        /// </summary>
        public static PropertyDefinition Files = new PropertyDefinition(nameof(Files), typeof(IList<MobileAppContentFile>));


        /// <summary>
        /// ContainedApps
        /// </summary>
        public static PropertyDefinition ContainedApps = new PropertyDefinition(nameof(ContainedApps), typeof(IList<MobileContainedApp>));

    }


    /// <summary>
    /// MobileContainedAppObjectSchema
    /// </summary>
    public class MobileContainedAppObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// WindowsUniversalAppXContainedAppObjectSchema
    /// </summary>
    public class WindowsUniversalAppXContainedAppObjectSchema : MobileContainedAppObjectSchema
    {

        /// <summary>
        /// AppUserModelId
        /// </summary>
        public static PropertyDefinition AppUserModelId = new PropertyDefinition(nameof(AppUserModelId), typeof(string));

    }


    /// <summary>
    /// MicrosoftStoreForBusinessContainedAppObjectSchema
    /// </summary>
    public class MicrosoftStoreForBusinessContainedAppObjectSchema : MobileContainedAppObjectSchema
    {

        /// <summary>
        /// AppUserModelId
        /// </summary>
        public static PropertyDefinition AppUserModelId = new PropertyDefinition(nameof(AppUserModelId), typeof(string));

    }


    /// <summary>
    /// ManagedAndroidLobAppObjectSchema
    /// </summary>
    public class ManagedAndroidLobAppObjectSchema : ManagedMobileLobAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// IdentityName
        /// </summary>
        public static PropertyDefinition IdentityName = new PropertyDefinition(nameof(IdentityName), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(AndroidMinimumOperatingSystem));


        /// <summary>
        /// VersionName
        /// </summary>
        public static PropertyDefinition VersionName = new PropertyDefinition(nameof(VersionName), typeof(string));


        /// <summary>
        /// VersionCode
        /// </summary>
        public static PropertyDefinition VersionCode = new PropertyDefinition(nameof(VersionCode), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// ManagedIOSLobAppObjectSchema
    /// </summary>
    public class ManagedIOSLobAppObjectSchema : ManagedMobileLobAppObjectSchema
    {

        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// ApplicableDeviceType
        /// </summary>
        public static PropertyDefinition ApplicableDeviceType = new PropertyDefinition(nameof(ApplicableDeviceType), typeof(IosDeviceType));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(IosMinimumOperatingSystem));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// VersionNumber
        /// </summary>
        public static PropertyDefinition VersionNumber = new PropertyDefinition(nameof(VersionNumber), typeof(string));


        /// <summary>
        /// BuildNumber
        /// </summary>
        public static PropertyDefinition BuildNumber = new PropertyDefinition(nameof(BuildNumber), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// MobileLobAppObjectSchema
    /// </summary>
    public class MobileLobAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// CommittedContentVersion
        /// </summary>
        public static PropertyDefinition CommittedContentVersion = new PropertyDefinition(nameof(CommittedContentVersion), typeof(string));


        /// <summary>
        /// FileName
        /// </summary>
        public static PropertyDefinition FileName = new PropertyDefinition(nameof(FileName), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));


        /// <summary>
        /// ContentVersions
        /// </summary>
        public static PropertyDefinition ContentVersions = new PropertyDefinition(nameof(ContentVersions), typeof(IList<MobileAppContent>));

    }


    /// <summary>
    /// Win32LobAppObjectSchema
    /// </summary>
    public class Win32LobAppObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// InstallCommandLine
        /// </summary>
        public static PropertyDefinition InstallCommandLine = new PropertyDefinition(nameof(InstallCommandLine), typeof(string));


        /// <summary>
        /// UninstallCommandLine
        /// </summary>
        public static PropertyDefinition UninstallCommandLine = new PropertyDefinition(nameof(UninstallCommandLine), typeof(string));


        /// <summary>
        /// ApplicableArchitectures
        /// </summary>
        public static PropertyDefinition ApplicableArchitectures = new PropertyDefinition(nameof(ApplicableArchitectures), typeof(WindowsArchitecture));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(WindowsMinimumOperatingSystem));


        /// <summary>
        /// MinimumFreeDiskSpaceInMB
        /// </summary>
        public static PropertyDefinition MinimumFreeDiskSpaceInMB = new PropertyDefinition(nameof(MinimumFreeDiskSpaceInMB), typeof(int));


        /// <summary>
        /// MinimumMemoryInMB
        /// </summary>
        public static PropertyDefinition MinimumMemoryInMB = new PropertyDefinition(nameof(MinimumMemoryInMB), typeof(int));


        /// <summary>
        /// MinimumNumberOfProcessors
        /// </summary>
        public static PropertyDefinition MinimumNumberOfProcessors = new PropertyDefinition(nameof(MinimumNumberOfProcessors), typeof(int));


        /// <summary>
        /// MinimumCpuSpeedInMHz
        /// </summary>
        public static PropertyDefinition MinimumCpuSpeedInMHz = new PropertyDefinition(nameof(MinimumCpuSpeedInMHz), typeof(int));


        /// <summary>
        /// DetectionRules
        /// </summary>
        public static PropertyDefinition DetectionRules = new PropertyDefinition(nameof(DetectionRules), typeof(IList<Win32LobAppDetection>));


        /// <summary>
        /// InstallExperience
        /// </summary>
        public static PropertyDefinition InstallExperience = new PropertyDefinition(nameof(InstallExperience), typeof(Win32LobAppInstallExperience));


        /// <summary>
        /// ReturnCodes
        /// </summary>
        public static PropertyDefinition ReturnCodes = new PropertyDefinition(nameof(ReturnCodes), typeof(IList<Win32LobAppReturnCode>));


        /// <summary>
        /// MsiInformation
        /// </summary>
        public static PropertyDefinition MsiInformation = new PropertyDefinition(nameof(MsiInformation), typeof(Win32LobAppMsiInformation));


        /// <summary>
        /// SetupFilePath
        /// </summary>
        public static PropertyDefinition SetupFilePath = new PropertyDefinition(nameof(SetupFilePath), typeof(string));

    }


    /// <summary>
    /// MacOSLobAppObjectSchema
    /// </summary>
    public class MacOSLobAppObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(MacOSMinimumOperatingSystem));


        /// <summary>
        /// BuildNumber
        /// </summary>
        public static PropertyDefinition BuildNumber = new PropertyDefinition(nameof(BuildNumber), typeof(string));


        /// <summary>
        /// VersionNumber
        /// </summary>
        public static PropertyDefinition VersionNumber = new PropertyDefinition(nameof(VersionNumber), typeof(string));


        /// <summary>
        /// ChildApps
        /// </summary>
        public static PropertyDefinition ChildApps = new PropertyDefinition(nameof(ChildApps), typeof(IList<MacOSLobChildApp>));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));


        /// <summary>
        /// Md5HashChunkSize
        /// </summary>
        public static PropertyDefinition Md5HashChunkSize = new PropertyDefinition(nameof(Md5HashChunkSize), typeof(int));


        /// <summary>
        /// Md5Hash
        /// </summary>
        public static PropertyDefinition Md5Hash = new PropertyDefinition(nameof(Md5Hash), typeof(IList<String>));


        /// <summary>
        /// IgnoreVersionDetection
        /// </summary>
        public static PropertyDefinition IgnoreVersionDetection = new PropertyDefinition(nameof(IgnoreVersionDetection), typeof(bool));

    }


    /// <summary>
    /// WindowsMobileMSIObjectSchema
    /// </summary>
    public class WindowsMobileMSIObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// CommandLine
        /// </summary>
        public static PropertyDefinition CommandLine = new PropertyDefinition(nameof(CommandLine), typeof(string));


        /// <summary>
        /// ProductCode
        /// </summary>
        public static PropertyDefinition ProductCode = new PropertyDefinition(nameof(ProductCode), typeof(string));


        /// <summary>
        /// ProductVersion
        /// </summary>
        public static PropertyDefinition ProductVersion = new PropertyDefinition(nameof(ProductVersion), typeof(string));


        /// <summary>
        /// IgnoreVersionDetection
        /// </summary>
        public static PropertyDefinition IgnoreVersionDetection = new PropertyDefinition(nameof(IgnoreVersionDetection), typeof(bool));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));


        /// <summary>
        /// UseDeviceContext
        /// </summary>
        public static PropertyDefinition UseDeviceContext = new PropertyDefinition(nameof(UseDeviceContext), typeof(bool));

    }


    /// <summary>
    /// WindowsPhone81AppXObjectSchema
    /// </summary>
    public class WindowsPhone81AppXObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// ApplicableArchitectures
        /// </summary>
        public static PropertyDefinition ApplicableArchitectures = new PropertyDefinition(nameof(ApplicableArchitectures), typeof(WindowsArchitecture));


        /// <summary>
        /// IdentityName
        /// </summary>
        public static PropertyDefinition IdentityName = new PropertyDefinition(nameof(IdentityName), typeof(string));


        /// <summary>
        /// IdentityPublisherHash
        /// </summary>
        public static PropertyDefinition IdentityPublisherHash = new PropertyDefinition(nameof(IdentityPublisherHash), typeof(string));


        /// <summary>
        /// IdentityResourceIdentifier
        /// </summary>
        public static PropertyDefinition IdentityResourceIdentifier = new PropertyDefinition(nameof(IdentityResourceIdentifier), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(WindowsMinimumOperatingSystem));


        /// <summary>
        /// PhoneProductIdentifier
        /// </summary>
        public static PropertyDefinition PhoneProductIdentifier = new PropertyDefinition(nameof(PhoneProductIdentifier), typeof(string));


        /// <summary>
        /// PhonePublisherId
        /// </summary>
        public static PropertyDefinition PhonePublisherId = new PropertyDefinition(nameof(PhonePublisherId), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// WindowsPhone81AppXBundleObjectSchema
    /// </summary>
    public class WindowsPhone81AppXBundleObjectSchema : WindowsPhone81AppXObjectSchema
    {

        /// <summary>
        /// AppXPackageInformationList
        /// </summary>
        public static PropertyDefinition AppXPackageInformationList = new PropertyDefinition(nameof(AppXPackageInformationList), typeof(IList<WindowsPackageInformation>));

    }


    /// <summary>
    /// WindowsUniversalAppXObjectSchema
    /// </summary>
    public class WindowsUniversalAppXObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// ApplicableArchitectures
        /// </summary>
        public static PropertyDefinition ApplicableArchitectures = new PropertyDefinition(nameof(ApplicableArchitectures), typeof(WindowsArchitecture));


        /// <summary>
        /// ApplicableDeviceTypes
        /// </summary>
        public static PropertyDefinition ApplicableDeviceTypes = new PropertyDefinition(nameof(ApplicableDeviceTypes), typeof(WindowsDeviceType));


        /// <summary>
        /// IdentityName
        /// </summary>
        public static PropertyDefinition IdentityName = new PropertyDefinition(nameof(IdentityName), typeof(string));


        /// <summary>
        /// IdentityPublisherHash
        /// </summary>
        public static PropertyDefinition IdentityPublisherHash = new PropertyDefinition(nameof(IdentityPublisherHash), typeof(string));


        /// <summary>
        /// IdentityResourceIdentifier
        /// </summary>
        public static PropertyDefinition IdentityResourceIdentifier = new PropertyDefinition(nameof(IdentityResourceIdentifier), typeof(string));


        /// <summary>
        /// IsBundle
        /// </summary>
        public static PropertyDefinition IsBundle = new PropertyDefinition(nameof(IsBundle), typeof(bool));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(WindowsMinimumOperatingSystem));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));


        /// <summary>
        /// CommittedContainedApps
        /// </summary>
        public static PropertyDefinition CommittedContainedApps = new PropertyDefinition(nameof(CommittedContainedApps), typeof(IList<MobileContainedApp>));

    }


    /// <summary>
    /// WindowsAppXObjectSchema
    /// </summary>
    public class WindowsAppXObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// ApplicableArchitectures
        /// </summary>
        public static PropertyDefinition ApplicableArchitectures = new PropertyDefinition(nameof(ApplicableArchitectures), typeof(WindowsArchitecture));


        /// <summary>
        /// IdentityName
        /// </summary>
        public static PropertyDefinition IdentityName = new PropertyDefinition(nameof(IdentityName), typeof(string));


        /// <summary>
        /// IdentityPublisherHash
        /// </summary>
        public static PropertyDefinition IdentityPublisherHash = new PropertyDefinition(nameof(IdentityPublisherHash), typeof(string));


        /// <summary>
        /// IdentityResourceIdentifier
        /// </summary>
        public static PropertyDefinition IdentityResourceIdentifier = new PropertyDefinition(nameof(IdentityResourceIdentifier), typeof(string));


        /// <summary>
        /// IsBundle
        /// </summary>
        public static PropertyDefinition IsBundle = new PropertyDefinition(nameof(IsBundle), typeof(bool));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(WindowsMinimumOperatingSystem));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// WindowsPhoneXAPObjectSchema
    /// </summary>
    public class WindowsPhoneXAPObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(WindowsMinimumOperatingSystem));


        /// <summary>
        /// ProductIdentifier
        /// </summary>
        public static PropertyDefinition ProductIdentifier = new PropertyDefinition(nameof(ProductIdentifier), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// AndroidLobAppObjectSchema
    /// </summary>
    public class AndroidLobAppObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// IdentityName
        /// </summary>
        public static PropertyDefinition IdentityName = new PropertyDefinition(nameof(IdentityName), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(AndroidMinimumOperatingSystem));


        /// <summary>
        /// VersionName
        /// </summary>
        public static PropertyDefinition VersionName = new PropertyDefinition(nameof(VersionName), typeof(string));


        /// <summary>
        /// VersionCode
        /// </summary>
        public static PropertyDefinition VersionCode = new PropertyDefinition(nameof(VersionCode), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// IosLobAppObjectSchema
    /// </summary>
    public class IosLobAppObjectSchema : MobileLobAppObjectSchema
    {

        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// ApplicableDeviceType
        /// </summary>
        public static PropertyDefinition ApplicableDeviceType = new PropertyDefinition(nameof(ApplicableDeviceType), typeof(IosDeviceType));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(IosMinimumOperatingSystem));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// VersionNumber
        /// </summary>
        public static PropertyDefinition VersionNumber = new PropertyDefinition(nameof(VersionNumber), typeof(string));


        /// <summary>
        /// BuildNumber
        /// </summary>
        public static PropertyDefinition BuildNumber = new PropertyDefinition(nameof(BuildNumber), typeof(string));


        /// <summary>
        /// IdentityVersion
        /// </summary>
        public static PropertyDefinition IdentityVersion = new PropertyDefinition(nameof(IdentityVersion), typeof(string));

    }


    /// <summary>
    /// AndroidForWorkAppObjectSchema
    /// </summary>
    public class AndroidForWorkAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// AppIdentifier
        /// </summary>
        public static PropertyDefinition AppIdentifier = new PropertyDefinition(nameof(AppIdentifier), typeof(string));


        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));

    }


    /// <summary>
    /// AndroidManagedStoreAppObjectSchema
    /// </summary>
    public class AndroidManagedStoreAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// AppIdentifier
        /// </summary>
        public static PropertyDefinition AppIdentifier = new PropertyDefinition(nameof(AppIdentifier), typeof(string));


        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));

    }


    /// <summary>
    /// MacOsVppAppObjectSchema
    /// </summary>
    public class MacOsVppAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// ReleaseDateTime
        /// </summary>
        public static PropertyDefinition ReleaseDateTime = new PropertyDefinition(nameof(ReleaseDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// LicensingType
        /// </summary>
        public static PropertyDefinition LicensingType = new PropertyDefinition(nameof(LicensingType), typeof(VppLicensingType));


        /// <summary>
        /// VppTokenOrganizationName
        /// </summary>
        public static PropertyDefinition VppTokenOrganizationName = new PropertyDefinition(nameof(VppTokenOrganizationName), typeof(string));


        /// <summary>
        /// VppTokenAccountType
        /// </summary>
        public static PropertyDefinition VppTokenAccountType = new PropertyDefinition(nameof(VppTokenAccountType), typeof(VppTokenAccountType));


        /// <summary>
        /// VppTokenAppleId
        /// </summary>
        public static PropertyDefinition VppTokenAppleId = new PropertyDefinition(nameof(VppTokenAppleId), typeof(string));


        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// VppTokenId
        /// </summary>
        public static PropertyDefinition VppTokenId = new PropertyDefinition(nameof(VppTokenId), typeof(string));


        /// <summary>
        /// RevokeLicenseActionResults
        /// </summary>
        public static PropertyDefinition RevokeLicenseActionResults = new PropertyDefinition(nameof(RevokeLicenseActionResults), typeof(IList<MacOsVppAppRevokeLicensesActionResult>));


        /// <summary>
        /// AssignedLicenses
        /// </summary>
        public static PropertyDefinition AssignedLicenses = new PropertyDefinition(nameof(AssignedLicenses), typeof(IList<MacOsVppAppAssignedLicense>));

    }


    /// <summary>
    /// MacOsVppAppAssignedLicenseObjectSchema
    /// </summary>
    public class MacOsVppAppAssignedLicenseObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserEmailAddress
        /// </summary>
        public static PropertyDefinition UserEmailAddress = new PropertyDefinition(nameof(UserEmailAddress), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// MicrosoftStoreForBusinessAppObjectSchema
    /// </summary>
    public class MicrosoftStoreForBusinessAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// ProductKey
        /// </summary>
        public static PropertyDefinition ProductKey = new PropertyDefinition(nameof(ProductKey), typeof(string));


        /// <summary>
        /// LicenseType
        /// </summary>
        public static PropertyDefinition LicenseType = new PropertyDefinition(nameof(LicenseType), typeof(MicrosoftStoreForBusinessLicenseType));


        /// <summary>
        /// PackageIdentityName
        /// </summary>
        public static PropertyDefinition PackageIdentityName = new PropertyDefinition(nameof(PackageIdentityName), typeof(string));


        /// <summary>
        /// ContainedApps
        /// </summary>
        public static PropertyDefinition ContainedApps = new PropertyDefinition(nameof(ContainedApps), typeof(IList<MobileContainedApp>));

    }


    /// <summary>
    /// WebAppObjectSchema
    /// </summary>
    public class WebAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// AppUrl
        /// </summary>
        public static PropertyDefinition AppUrl = new PropertyDefinition(nameof(AppUrl), typeof(string));


        /// <summary>
        /// UseManagedBrowser
        /// </summary>
        public static PropertyDefinition UseManagedBrowser = new PropertyDefinition(nameof(UseManagedBrowser), typeof(bool));

    }


    /// <summary>
    /// WindowsPhone81StoreAppObjectSchema
    /// </summary>
    public class WindowsPhone81StoreAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));

    }


    /// <summary>
    /// WindowsStoreAppObjectSchema
    /// </summary>
    public class WindowsStoreAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));

    }


    /// <summary>
    /// AndroidStoreAppObjectSchema
    /// </summary>
    public class AndroidStoreAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// AppIdentifier
        /// </summary>
        public static PropertyDefinition AppIdentifier = new PropertyDefinition(nameof(AppIdentifier), typeof(string));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(AndroidMinimumOperatingSystem));

    }


    /// <summary>
    /// IosVppAppAssignedDeviceLicenseObjectSchema
    /// </summary>
    public class IosVppAppAssignedDeviceLicenseObjectSchema : IosVppAppAssignedLicenseObjectSchema
    {

        /// <summary>
        /// ManagedDeviceId
        /// </summary>
        public static PropertyDefinition ManagedDeviceId = new PropertyDefinition(nameof(ManagedDeviceId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));

    }


    /// <summary>
    /// IosVppAppAssignedUserLicenseObjectSchema
    /// </summary>
    public class IosVppAppAssignedUserLicenseObjectSchema : IosVppAppAssignedLicenseObjectSchema
    {
    }


    /// <summary>
    /// IosStoreAppObjectSchema
    /// </summary>
    public class IosStoreAppObjectSchema : MobileAppObjectSchema
    {

        /// <summary>
        /// BundleId
        /// </summary>
        public static PropertyDefinition BundleId = new PropertyDefinition(nameof(BundleId), typeof(string));


        /// <summary>
        /// AppStoreUrl
        /// </summary>
        public static PropertyDefinition AppStoreUrl = new PropertyDefinition(nameof(AppStoreUrl), typeof(string));


        /// <summary>
        /// ApplicableDeviceType
        /// </summary>
        public static PropertyDefinition ApplicableDeviceType = new PropertyDefinition(nameof(ApplicableDeviceType), typeof(IosDeviceType));


        /// <summary>
        /// MinimumSupportedOperatingSystem
        /// </summary>
        public static PropertyDefinition MinimumSupportedOperatingSystem = new PropertyDefinition(nameof(MinimumSupportedOperatingSystem), typeof(IosMinimumOperatingSystem));

    }


    /// <summary>
    /// AndroidForWorkMobileAppConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkMobileAppConfigurationObjectSchema : ManagedDeviceMobileAppConfigurationObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// PayloadJson
        /// </summary>
        public static PropertyDefinition PayloadJson = new PropertyDefinition(nameof(PayloadJson), typeof(string));


        /// <summary>
        /// PermissionActions
        /// </summary>
        public static PropertyDefinition PermissionActions = new PropertyDefinition(nameof(PermissionActions), typeof(IList<AndroidPermissionAction>));

    }


    /// <summary>
    /// AndroidManagedStoreAppConfigurationObjectSchema
    /// </summary>
    public class AndroidManagedStoreAppConfigurationObjectSchema : ManagedDeviceMobileAppConfigurationObjectSchema
    {

        /// <summary>
        /// PackageId
        /// </summary>
        public static PropertyDefinition PackageId = new PropertyDefinition(nameof(PackageId), typeof(string));


        /// <summary>
        /// PayloadJson
        /// </summary>
        public static PropertyDefinition PayloadJson = new PropertyDefinition(nameof(PayloadJson), typeof(string));


        /// <summary>
        /// PermissionActions
        /// </summary>
        public static PropertyDefinition PermissionActions = new PropertyDefinition(nameof(PermissionActions), typeof(IList<AndroidPermissionAction>));

    }


    /// <summary>
    /// IosMobileAppConfigurationObjectSchema
    /// </summary>
    public class IosMobileAppConfigurationObjectSchema : ManagedDeviceMobileAppConfigurationObjectSchema
    {

        /// <summary>
        /// EncodedSettingXml
        /// </summary>
        public static PropertyDefinition EncodedSettingXml = new PropertyDefinition(nameof(EncodedSettingXml), typeof(string));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(IList<AppConfigurationSettingItem>));

    }


    /// <summary>
    /// TermsAndConditionsGroupAssignmentObjectSchema
    /// </summary>
    public class TermsAndConditionsGroupAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetGroupId
        /// </summary>
        public static PropertyDefinition TargetGroupId = new PropertyDefinition(nameof(TargetGroupId), typeof(string));


        /// <summary>
        /// TermsAndConditions
        /// </summary>
        public static PropertyDefinition TermsAndConditions = new PropertyDefinition(nameof(TermsAndConditions), typeof(TermsAndConditions));

    }


    /// <summary>
    /// TermsAndConditionsAssignmentObjectSchema
    /// </summary>
    public class TermsAndConditionsAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// TermsAndConditionsAcceptanceStatusObjectSchema
    /// </summary>
    public class TermsAndConditionsAcceptanceStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// AcceptedVersion
        /// </summary>
        public static PropertyDefinition AcceptedVersion = new PropertyDefinition(nameof(AcceptedVersion), typeof(int));


        /// <summary>
        /// AcceptedDateTime
        /// </summary>
        public static PropertyDefinition AcceptedDateTime = new PropertyDefinition(nameof(AcceptedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// TermsAndConditions
        /// </summary>
        public static PropertyDefinition TermsAndConditions = new PropertyDefinition(nameof(TermsAndConditions), typeof(TermsAndConditions));

    }


    /// <summary>
    /// DeviceManagementScriptAssignmentObjectSchema
    /// </summary>
    public class DeviceManagementScriptAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// DeviceManagementScriptGroupAssignmentObjectSchema
    /// </summary>
    public class DeviceManagementScriptGroupAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetGroupId
        /// </summary>
        public static PropertyDefinition TargetGroupId = new PropertyDefinition(nameof(TargetGroupId), typeof(string));

    }


    /// <summary>
    /// DeviceManagementScriptRunSummaryObjectSchema
    /// </summary>
    public class DeviceManagementScriptRunSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SuccessDeviceCount
        /// </summary>
        public static PropertyDefinition SuccessDeviceCount = new PropertyDefinition(nameof(SuccessDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// SuccessUserCount
        /// </summary>
        public static PropertyDefinition SuccessUserCount = new PropertyDefinition(nameof(SuccessUserCount), typeof(int));


        /// <summary>
        /// ErrorUserCount
        /// </summary>
        public static PropertyDefinition ErrorUserCount = new PropertyDefinition(nameof(ErrorUserCount), typeof(int));

    }


    /// <summary>
    /// DeviceManagementScriptDeviceStateObjectSchema
    /// </summary>
    public class DeviceManagementScriptDeviceStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// RunState
        /// </summary>
        public static PropertyDefinition RunState = new PropertyDefinition(nameof(RunState), typeof(RunState));


        /// <summary>
        /// ResultMessage
        /// </summary>
        public static PropertyDefinition ResultMessage = new PropertyDefinition(nameof(ResultMessage), typeof(string));


        /// <summary>
        /// LastStateUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastStateUpdateDateTime = new PropertyDefinition(nameof(LastStateUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ErrorCode
        /// </summary>
        public static PropertyDefinition ErrorCode = new PropertyDefinition(nameof(ErrorCode), typeof(int));


        /// <summary>
        /// ErrorDescription
        /// </summary>
        public static PropertyDefinition ErrorDescription = new PropertyDefinition(nameof(ErrorDescription), typeof(string));


        /// <summary>
        /// ManagedDevice
        /// </summary>
        public static PropertyDefinition ManagedDevice = new PropertyDefinition(nameof(ManagedDevice), typeof(ManagedDevice));

    }


    /// <summary>
    /// DeviceManagementScriptUserStateObjectSchema
    /// </summary>
    public class DeviceManagementScriptUserStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SuccessDeviceCount
        /// </summary>
        public static PropertyDefinition SuccessDeviceCount = new PropertyDefinition(nameof(SuccessDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DeviceRunStates
        /// </summary>
        public static PropertyDefinition DeviceRunStates = new PropertyDefinition(nameof(DeviceRunStates), typeof(IList<DeviceManagementScriptDeviceState>));

    }


    /// <summary>
    /// DeviceConfigurationStateObjectSchema
    /// </summary>
    public class DeviceConfigurationStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SettingStates
        /// </summary>
        public static PropertyDefinition SettingStates = new PropertyDefinition(nameof(SettingStates), typeof(IList<DeviceConfigurationSettingState>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(PolicyPlatformType));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ComplianceStatus));


        /// <summary>
        /// SettingCount
        /// </summary>
        public static PropertyDefinition SettingCount = new PropertyDefinition(nameof(SettingCount), typeof(int));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// WindowsProtectionStateObjectSchema
    /// </summary>
    public class WindowsProtectionStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// MalwareProtectionEnabled
        /// </summary>
        public static PropertyDefinition MalwareProtectionEnabled = new PropertyDefinition(nameof(MalwareProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceState
        /// </summary>
        public static PropertyDefinition DeviceState = new PropertyDefinition(nameof(DeviceState), typeof(WindowsDeviceHealthState));


        /// <summary>
        /// RealTimeProtectionEnabled
        /// </summary>
        public static PropertyDefinition RealTimeProtectionEnabled = new PropertyDefinition(nameof(RealTimeProtectionEnabled), typeof(bool));


        /// <summary>
        /// NetworkInspectionSystemEnabled
        /// </summary>
        public static PropertyDefinition NetworkInspectionSystemEnabled = new PropertyDefinition(nameof(NetworkInspectionSystemEnabled), typeof(bool));


        /// <summary>
        /// QuickScanOverdue
        /// </summary>
        public static PropertyDefinition QuickScanOverdue = new PropertyDefinition(nameof(QuickScanOverdue), typeof(bool));


        /// <summary>
        /// FullScanOverdue
        /// </summary>
        public static PropertyDefinition FullScanOverdue = new PropertyDefinition(nameof(FullScanOverdue), typeof(bool));


        /// <summary>
        /// SignatureUpdateOverdue
        /// </summary>
        public static PropertyDefinition SignatureUpdateOverdue = new PropertyDefinition(nameof(SignatureUpdateOverdue), typeof(bool));


        /// <summary>
        /// RebootRequired
        /// </summary>
        public static PropertyDefinition RebootRequired = new PropertyDefinition(nameof(RebootRequired), typeof(bool));


        /// <summary>
        /// FullScanRequired
        /// </summary>
        public static PropertyDefinition FullScanRequired = new PropertyDefinition(nameof(FullScanRequired), typeof(bool));


        /// <summary>
        /// EngineVersion
        /// </summary>
        public static PropertyDefinition EngineVersion = new PropertyDefinition(nameof(EngineVersion), typeof(string));


        /// <summary>
        /// SignatureVersion
        /// </summary>
        public static PropertyDefinition SignatureVersion = new PropertyDefinition(nameof(SignatureVersion), typeof(string));


        /// <summary>
        /// AntiMalwareVersion
        /// </summary>
        public static PropertyDefinition AntiMalwareVersion = new PropertyDefinition(nameof(AntiMalwareVersion), typeof(string));


        /// <summary>
        /// LastQuickScanDateTime
        /// </summary>
        public static PropertyDefinition LastQuickScanDateTime = new PropertyDefinition(nameof(LastQuickScanDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastFullScanDateTime
        /// </summary>
        public static PropertyDefinition LastFullScanDateTime = new PropertyDefinition(nameof(LastFullScanDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastQuickScanSignatureVersion
        /// </summary>
        public static PropertyDefinition LastQuickScanSignatureVersion = new PropertyDefinition(nameof(LastQuickScanSignatureVersion), typeof(string));


        /// <summary>
        /// LastFullScanSignatureVersion
        /// </summary>
        public static PropertyDefinition LastFullScanSignatureVersion = new PropertyDefinition(nameof(LastFullScanSignatureVersion), typeof(string));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DetectedMalwareState
        /// </summary>
        public static PropertyDefinition DetectedMalwareState = new PropertyDefinition(nameof(DetectedMalwareState), typeof(IList<WindowsDeviceMalwareState>));

    }


    /// <summary>
    /// DeviceCompliancePolicyStateObjectSchema
    /// </summary>
    public class DeviceCompliancePolicyStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SettingStates
        /// </summary>
        public static PropertyDefinition SettingStates = new PropertyDefinition(nameof(SettingStates), typeof(IList<DeviceCompliancePolicySettingState>));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(PolicyPlatformType));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ComplianceStatus));


        /// <summary>
        /// SettingCount
        /// </summary>
        public static PropertyDefinition SettingCount = new PropertyDefinition(nameof(SettingCount), typeof(int));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// ManagedDeviceMobileAppConfigurationStateObjectSchema
    /// </summary>
    public class ManagedDeviceMobileAppConfigurationStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));


        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(PolicyPlatformType));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ComplianceStatus));


        /// <summary>
        /// SettingCount
        /// </summary>
        public static PropertyDefinition SettingCount = new PropertyDefinition(nameof(SettingCount), typeof(int));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// AppLogCollectionRequestObjectSchema
    /// </summary>
    public class AppLogCollectionRequestObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(AppLogUploadState));


        /// <summary>
        /// ErrorMessage
        /// </summary>
        public static PropertyDefinition ErrorMessage = new PropertyDefinition(nameof(ErrorMessage), typeof(string));


        /// <summary>
        /// CustomLogFolders
        /// </summary>
        public static PropertyDefinition CustomLogFolders = new PropertyDefinition(nameof(CustomLogFolders), typeof(IList<String>));


        /// <summary>
        /// CompletedDateTime
        /// </summary>
        public static PropertyDefinition CompletedDateTime = new PropertyDefinition(nameof(CompletedDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// WindowsDeviceMalwareStateObjectSchema
    /// </summary>
    public class WindowsDeviceMalwareStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// AdditionalInformationUrl
        /// </summary>
        public static PropertyDefinition AdditionalInformationUrl = new PropertyDefinition(nameof(AdditionalInformationUrl), typeof(string));


        /// <summary>
        /// Severity
        /// </summary>
        public static PropertyDefinition Severity = new PropertyDefinition(nameof(Severity), typeof(WindowsMalwareSeverity));


        /// <summary>
        /// Catetgory
        /// </summary>
        public static PropertyDefinition Catetgory = new PropertyDefinition(nameof(Catetgory), typeof(WindowsMalwareCategory));


        /// <summary>
        /// ExecutionState
        /// </summary>
        public static PropertyDefinition ExecutionState = new PropertyDefinition(nameof(ExecutionState), typeof(WindowsMalwareExecutionState));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(WindowsMalwareState));


        /// <summary>
        /// ThreatState
        /// </summary>
        public static PropertyDefinition ThreatState = new PropertyDefinition(nameof(ThreatState), typeof(WindowsMalwareThreatState));


        /// <summary>
        /// InitialDetectionDateTime
        /// </summary>
        public static PropertyDefinition InitialDetectionDateTime = new PropertyDefinition(nameof(InitialDetectionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastStateChangeDateTime
        /// </summary>
        public static PropertyDefinition LastStateChangeDateTime = new PropertyDefinition(nameof(LastStateChangeDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DetectionCount
        /// </summary>
        public static PropertyDefinition DetectionCount = new PropertyDefinition(nameof(DetectionCount), typeof(int));


        /// <summary>
        /// Category
        /// </summary>
        public static PropertyDefinition Category = new PropertyDefinition(nameof(Category), typeof(WindowsMalwareCategory));

    }


    /// <summary>
    /// WindowsManagedDeviceObjectSchema
    /// </summary>
    public class WindowsManagedDeviceObjectSchema : ManagedDeviceObjectSchema
    {
    }


    /// <summary>
    /// WindowsManagementAppHealthSummaryObjectSchema
    /// </summary>
    public class WindowsManagementAppHealthSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// HealthyDeviceCount
        /// </summary>
        public static PropertyDefinition HealthyDeviceCount = new PropertyDefinition(nameof(HealthyDeviceCount), typeof(int));


        /// <summary>
        /// UnhealthyDeviceCount
        /// </summary>
        public static PropertyDefinition UnhealthyDeviceCount = new PropertyDefinition(nameof(UnhealthyDeviceCount), typeof(int));


        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));

    }


    /// <summary>
    /// WindowsManagementAppHealthStateObjectSchema
    /// </summary>
    public class WindowsManagementAppHealthStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// HealthState
        /// </summary>
        public static PropertyDefinition HealthState = new PropertyDefinition(nameof(HealthState), typeof(HealthState));


        /// <summary>
        /// InstalledVersion
        /// </summary>
        public static PropertyDefinition InstalledVersion = new PropertyDefinition(nameof(InstalledVersion), typeof(string));


        /// <summary>
        /// LastCheckInDateTime
        /// </summary>
        public static PropertyDefinition LastCheckInDateTime = new PropertyDefinition(nameof(LastCheckInDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// DeviceOSVersion
        /// </summary>
        public static PropertyDefinition DeviceOSVersion = new PropertyDefinition(nameof(DeviceOSVersion), typeof(string));

    }


    /// <summary>
    /// ReportRootObjectSchema
    /// </summary>
    public class ReportRootObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// DeviceConfigurationGroupAssignmentObjectSchema
    /// </summary>
    public class DeviceConfigurationGroupAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetGroupId
        /// </summary>
        public static PropertyDefinition TargetGroupId = new PropertyDefinition(nameof(TargetGroupId), typeof(string));


        /// <summary>
        /// ExcludeGroup
        /// </summary>
        public static PropertyDefinition ExcludeGroup = new PropertyDefinition(nameof(ExcludeGroup), typeof(bool));


        /// <summary>
        /// DeviceConfiguration
        /// </summary>
        public static PropertyDefinition DeviceConfiguration = new PropertyDefinition(nameof(DeviceConfiguration), typeof(DeviceConfiguration));

    }


    /// <summary>
    /// DeviceConfigurationAssignmentObjectSchema
    /// </summary>
    public class DeviceConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// DeviceConfigurationDeviceStatusObjectSchema
    /// </summary>
    public class DeviceConfigurationDeviceStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(int));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// DeviceConfigurationUserStatusObjectSchema
    /// </summary>
    public class DeviceConfigurationUserStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// DevicesCount
        /// </summary>
        public static PropertyDefinition DevicesCount = new PropertyDefinition(nameof(DevicesCount), typeof(int));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// DeviceConfigurationDeviceOverviewObjectSchema
    /// </summary>
    public class DeviceConfigurationDeviceOverviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// NotApplicablePlatformCount
        /// </summary>
        public static PropertyDefinition NotApplicablePlatformCount = new PropertyDefinition(nameof(NotApplicablePlatformCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// DeviceConfigurationUserOverviewObjectSchema
    /// </summary>
    public class DeviceConfigurationUserOverviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// SettingStateDeviceSummaryObjectSchema
    /// </summary>
    public class SettingStateDeviceSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SettingName
        /// </summary>
        public static PropertyDefinition SettingName = new PropertyDefinition(nameof(SettingName), typeof(string));


        /// <summary>
        /// InstancePath
        /// </summary>
        public static PropertyDefinition InstancePath = new PropertyDefinition(nameof(InstancePath), typeof(string));


        /// <summary>
        /// UnknownDeviceCount
        /// </summary>
        public static PropertyDefinition UnknownDeviceCount = new PropertyDefinition(nameof(UnknownDeviceCount), typeof(int));


        /// <summary>
        /// NotApplicableDeviceCount
        /// </summary>
        public static PropertyDefinition NotApplicableDeviceCount = new PropertyDefinition(nameof(NotApplicableDeviceCount), typeof(int));


        /// <summary>
        /// CompliantDeviceCount
        /// </summary>
        public static PropertyDefinition CompliantDeviceCount = new PropertyDefinition(nameof(CompliantDeviceCount), typeof(int));


        /// <summary>
        /// RemediatedDeviceCount
        /// </summary>
        public static PropertyDefinition RemediatedDeviceCount = new PropertyDefinition(nameof(RemediatedDeviceCount), typeof(int));


        /// <summary>
        /// NonCompliantDeviceCount
        /// </summary>
        public static PropertyDefinition NonCompliantDeviceCount = new PropertyDefinition(nameof(NonCompliantDeviceCount), typeof(int));


        /// <summary>
        /// ErrorDeviceCount
        /// </summary>
        public static PropertyDefinition ErrorDeviceCount = new PropertyDefinition(nameof(ErrorDeviceCount), typeof(int));


        /// <summary>
        /// ConflictDeviceCount
        /// </summary>
        public static PropertyDefinition ConflictDeviceCount = new PropertyDefinition(nameof(ConflictDeviceCount), typeof(int));

    }


    /// <summary>
    /// DeviceCompliancePolicyAssignmentObjectSchema
    /// </summary>
    public class DeviceCompliancePolicyAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// DeviceComplianceScheduledActionForRuleObjectSchema
    /// </summary>
    public class DeviceComplianceScheduledActionForRuleObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// RuleName
        /// </summary>
        public static PropertyDefinition RuleName = new PropertyDefinition(nameof(RuleName), typeof(string));


        /// <summary>
        /// ScheduledActionConfigurations
        /// </summary>
        public static PropertyDefinition ScheduledActionConfigurations = new PropertyDefinition(nameof(ScheduledActionConfigurations), typeof(IList<DeviceComplianceActionItem>));

    }


    /// <summary>
    /// DeviceComplianceDeviceStatusObjectSchema
    /// </summary>
    public class DeviceComplianceDeviceStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(int));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// DeviceComplianceUserStatusObjectSchema
    /// </summary>
    public class DeviceComplianceUserStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// DevicesCount
        /// </summary>
        public static PropertyDefinition DevicesCount = new PropertyDefinition(nameof(DevicesCount), typeof(int));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(ComplianceStatus));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// DeviceComplianceDeviceOverviewObjectSchema
    /// </summary>
    public class DeviceComplianceDeviceOverviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// NotApplicablePlatformCount
        /// </summary>
        public static PropertyDefinition NotApplicablePlatformCount = new PropertyDefinition(nameof(NotApplicablePlatformCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// DeviceComplianceUserOverviewObjectSchema
    /// </summary>
    public class DeviceComplianceUserOverviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PendingCount
        /// </summary>
        public static PropertyDefinition PendingCount = new PropertyDefinition(nameof(PendingCount), typeof(int));


        /// <summary>
        /// NotApplicableCount
        /// </summary>
        public static PropertyDefinition NotApplicableCount = new PropertyDefinition(nameof(NotApplicableCount), typeof(int));


        /// <summary>
        /// SuccessCount
        /// </summary>
        public static PropertyDefinition SuccessCount = new PropertyDefinition(nameof(SuccessCount), typeof(int));


        /// <summary>
        /// ErrorCount
        /// </summary>
        public static PropertyDefinition ErrorCount = new PropertyDefinition(nameof(ErrorCount), typeof(int));


        /// <summary>
        /// FailedCount
        /// </summary>
        public static PropertyDefinition FailedCount = new PropertyDefinition(nameof(FailedCount), typeof(int));


        /// <summary>
        /// ConflictCount
        /// </summary>
        public static PropertyDefinition ConflictCount = new PropertyDefinition(nameof(ConflictCount), typeof(int));


        /// <summary>
        /// LastUpdateDateTime
        /// </summary>
        public static PropertyDefinition LastUpdateDateTime = new PropertyDefinition(nameof(LastUpdateDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationVersion
        /// </summary>
        public static PropertyDefinition ConfigurationVersion = new PropertyDefinition(nameof(ConfigurationVersion), typeof(int));

    }


    /// <summary>
    /// DeviceComplianceActionItemObjectSchema
    /// </summary>
    public class DeviceComplianceActionItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// GracePeriodHours
        /// </summary>
        public static PropertyDefinition GracePeriodHours = new PropertyDefinition(nameof(GracePeriodHours), typeof(int));


        /// <summary>
        /// ActionType
        /// </summary>
        public static PropertyDefinition ActionType = new PropertyDefinition(nameof(ActionType), typeof(DeviceComplianceActionType));


        /// <summary>
        /// NotificationTemplateId
        /// </summary>
        public static PropertyDefinition NotificationTemplateId = new PropertyDefinition(nameof(NotificationTemplateId), typeof(string));


        /// <summary>
        /// NotificationMessageCCList
        /// </summary>
        public static PropertyDefinition NotificationMessageCCList = new PropertyDefinition(nameof(NotificationMessageCCList), typeof(IList<String>));

    }


    /// <summary>
    /// WindowsUpdateForBusinessConfigurationObjectSchema
    /// </summary>
    public class WindowsUpdateForBusinessConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// DeliveryOptimizationMode
        /// </summary>
        public static PropertyDefinition DeliveryOptimizationMode = new PropertyDefinition(nameof(DeliveryOptimizationMode), typeof(WindowsDeliveryOptimizationMode));


        /// <summary>
        /// PrereleaseFeatures
        /// </summary>
        public static PropertyDefinition PrereleaseFeatures = new PropertyDefinition(nameof(PrereleaseFeatures), typeof(PrereleaseFeatures));


        /// <summary>
        /// AutomaticUpdateMode
        /// </summary>
        public static PropertyDefinition AutomaticUpdateMode = new PropertyDefinition(nameof(AutomaticUpdateMode), typeof(AutomaticUpdateMode));


        /// <summary>
        /// MicrosoftUpdateServiceAllowed
        /// </summary>
        public static PropertyDefinition MicrosoftUpdateServiceAllowed = new PropertyDefinition(nameof(MicrosoftUpdateServiceAllowed), typeof(bool));


        /// <summary>
        /// DriversExcluded
        /// </summary>
        public static PropertyDefinition DriversExcluded = new PropertyDefinition(nameof(DriversExcluded), typeof(bool));


        /// <summary>
        /// InstallationSchedule
        /// </summary>
        public static PropertyDefinition InstallationSchedule = new PropertyDefinition(nameof(InstallationSchedule), typeof(WindowsUpdateInstallScheduleType));


        /// <summary>
        /// QualityUpdatesDeferralPeriodInDays
        /// </summary>
        public static PropertyDefinition QualityUpdatesDeferralPeriodInDays = new PropertyDefinition(nameof(QualityUpdatesDeferralPeriodInDays), typeof(int));


        /// <summary>
        /// FeatureUpdatesDeferralPeriodInDays
        /// </summary>
        public static PropertyDefinition FeatureUpdatesDeferralPeriodInDays = new PropertyDefinition(nameof(FeatureUpdatesDeferralPeriodInDays), typeof(int));


        /// <summary>
        /// QualityUpdatesPaused
        /// </summary>
        public static PropertyDefinition QualityUpdatesPaused = new PropertyDefinition(nameof(QualityUpdatesPaused), typeof(bool));


        /// <summary>
        /// FeatureUpdatesPaused
        /// </summary>
        public static PropertyDefinition FeatureUpdatesPaused = new PropertyDefinition(nameof(FeatureUpdatesPaused), typeof(bool));


        /// <summary>
        /// QualityUpdatesPauseExpiryDateTime
        /// </summary>
        public static PropertyDefinition QualityUpdatesPauseExpiryDateTime = new PropertyDefinition(nameof(QualityUpdatesPauseExpiryDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FeatureUpdatesPauseExpiryDateTime
        /// </summary>
        public static PropertyDefinition FeatureUpdatesPauseExpiryDateTime = new PropertyDefinition(nameof(FeatureUpdatesPauseExpiryDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// BusinessReadyUpdatesOnly
        /// </summary>
        public static PropertyDefinition BusinessReadyUpdatesOnly = new PropertyDefinition(nameof(BusinessReadyUpdatesOnly), typeof(WindowsUpdateType));


        /// <summary>
        /// SkipChecksBeforeRestart
        /// </summary>
        public static PropertyDefinition SkipChecksBeforeRestart = new PropertyDefinition(nameof(SkipChecksBeforeRestart), typeof(bool));


        /// <summary>
        /// UpdateWeeks
        /// </summary>
        public static PropertyDefinition UpdateWeeks = new PropertyDefinition(nameof(UpdateWeeks), typeof(WindowsUpdateForBusinessUpdateWeeks));


        /// <summary>
        /// QualityUpdatesPauseStartDate
        /// </summary>
        public static PropertyDefinition QualityUpdatesPauseStartDate = new PropertyDefinition(nameof(QualityUpdatesPauseStartDate), typeof(DateTime));


        /// <summary>
        /// FeatureUpdatesPauseStartDate
        /// </summary>
        public static PropertyDefinition FeatureUpdatesPauseStartDate = new PropertyDefinition(nameof(FeatureUpdatesPauseStartDate), typeof(DateTime));


        /// <summary>
        /// FeatureUpdatesRollbackWindowInDays
        /// </summary>
        public static PropertyDefinition FeatureUpdatesRollbackWindowInDays = new PropertyDefinition(nameof(FeatureUpdatesRollbackWindowInDays), typeof(int));


        /// <summary>
        /// QualityUpdatesWillBeRolledBack
        /// </summary>
        public static PropertyDefinition QualityUpdatesWillBeRolledBack = new PropertyDefinition(nameof(QualityUpdatesWillBeRolledBack), typeof(bool));


        /// <summary>
        /// FeatureUpdatesWillBeRolledBack
        /// </summary>
        public static PropertyDefinition FeatureUpdatesWillBeRolledBack = new PropertyDefinition(nameof(FeatureUpdatesWillBeRolledBack), typeof(bool));


        /// <summary>
        /// QualityUpdatesRollbackStartDateTime
        /// </summary>
        public static PropertyDefinition QualityUpdatesRollbackStartDateTime = new PropertyDefinition(nameof(QualityUpdatesRollbackStartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FeatureUpdatesRollbackStartDateTime
        /// </summary>
        public static PropertyDefinition FeatureUpdatesRollbackStartDateTime = new PropertyDefinition(nameof(FeatureUpdatesRollbackStartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EngagedRestartDeadlineInDays
        /// </summary>
        public static PropertyDefinition EngagedRestartDeadlineInDays = new PropertyDefinition(nameof(EngagedRestartDeadlineInDays), typeof(int));


        /// <summary>
        /// EngagedRestartSnoozeScheduleInDays
        /// </summary>
        public static PropertyDefinition EngagedRestartSnoozeScheduleInDays = new PropertyDefinition(nameof(EngagedRestartSnoozeScheduleInDays), typeof(int));


        /// <summary>
        /// EngagedRestartTransitionScheduleInDays
        /// </summary>
        public static PropertyDefinition EngagedRestartTransitionScheduleInDays = new PropertyDefinition(nameof(EngagedRestartTransitionScheduleInDays), typeof(int));


        /// <summary>
        /// AutoRestartNotificationDismissal
        /// </summary>
        public static PropertyDefinition AutoRestartNotificationDismissal = new PropertyDefinition(nameof(AutoRestartNotificationDismissal), typeof(AutoRestartNotificationDismissalMethod));


        /// <summary>
        /// ScheduleRestartWarningInHours
        /// </summary>
        public static PropertyDefinition ScheduleRestartWarningInHours = new PropertyDefinition(nameof(ScheduleRestartWarningInHours), typeof(int));


        /// <summary>
        /// ScheduleImminentRestartWarningInMinutes
        /// </summary>
        public static PropertyDefinition ScheduleImminentRestartWarningInMinutes = new PropertyDefinition(nameof(ScheduleImminentRestartWarningInMinutes), typeof(int));


        /// <summary>
        /// UserPauseAccess
        /// </summary>
        public static PropertyDefinition UserPauseAccess = new PropertyDefinition(nameof(UserPauseAccess), typeof(Enablement));

    }


    /// <summary>
    /// WindowsPrivacyDataAccessControlItemObjectSchema
    /// </summary>
    public class WindowsPrivacyDataAccessControlItemObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AccessLevel
        /// </summary>
        public static PropertyDefinition AccessLevel = new PropertyDefinition(nameof(AccessLevel), typeof(WindowsPrivacyDataAccessLevel));


        /// <summary>
        /// DataCategory
        /// </summary>
        public static PropertyDefinition DataCategory = new PropertyDefinition(nameof(DataCategory), typeof(WindowsPrivacyDataCategory));


        /// <summary>
        /// AppPackageFamilyName
        /// </summary>
        public static PropertyDefinition AppPackageFamilyName = new PropertyDefinition(nameof(AppPackageFamilyName), typeof(string));


        /// <summary>
        /// AppDisplayName
        /// </summary>
        public static PropertyDefinition AppDisplayName = new PropertyDefinition(nameof(AppDisplayName), typeof(string));

    }


    /// <summary>
    /// WindowsAssignedAccessProfileObjectSchema
    /// </summary>
    public class WindowsAssignedAccessProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ProfileName
        /// </summary>
        public static PropertyDefinition ProfileName = new PropertyDefinition(nameof(ProfileName), typeof(string));


        /// <summary>
        /// ShowTaskBar
        /// </summary>
        public static PropertyDefinition ShowTaskBar = new PropertyDefinition(nameof(ShowTaskBar), typeof(bool));


        /// <summary>
        /// AppUserModelIds
        /// </summary>
        public static PropertyDefinition AppUserModelIds = new PropertyDefinition(nameof(AppUserModelIds), typeof(IList<String>));


        /// <summary>
        /// DesktopAppPaths
        /// </summary>
        public static PropertyDefinition DesktopAppPaths = new PropertyDefinition(nameof(DesktopAppPaths), typeof(IList<String>));


        /// <summary>
        /// UserAccounts
        /// </summary>
        public static PropertyDefinition UserAccounts = new PropertyDefinition(nameof(UserAccounts), typeof(IList<String>));


        /// <summary>
        /// StartMenuLayoutXml
        /// </summary>
        public static PropertyDefinition StartMenuLayoutXml = new PropertyDefinition(nameof(StartMenuLayoutXml), typeof(string));

    }


    /// <summary>
    /// AndroidDeviceOwnerGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class AndroidDeviceOwnerGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AccountsBlockModification
        /// </summary>
        public static PropertyDefinition AccountsBlockModification = new PropertyDefinition(nameof(AccountsBlockModification), typeof(bool));


        /// <summary>
        /// AppsAllowInstallFromUnknownSources
        /// </summary>
        public static PropertyDefinition AppsAllowInstallFromUnknownSources = new PropertyDefinition(nameof(AppsAllowInstallFromUnknownSources), typeof(bool));


        /// <summary>
        /// AppsAutoUpdatePolicy
        /// </summary>
        public static PropertyDefinition AppsAutoUpdatePolicy = new PropertyDefinition(nameof(AppsAutoUpdatePolicy), typeof(AndroidDeviceOwnerAppAutoUpdatePolicyType));


        /// <summary>
        /// AppsDefaultPermissionPolicy
        /// </summary>
        public static PropertyDefinition AppsDefaultPermissionPolicy = new PropertyDefinition(nameof(AppsDefaultPermissionPolicy), typeof(AndroidDeviceOwnerDefaultAppPermissionPolicyType));


        /// <summary>
        /// AppsRecommendSkippingFirstUseHints
        /// </summary>
        public static PropertyDefinition AppsRecommendSkippingFirstUseHints = new PropertyDefinition(nameof(AppsRecommendSkippingFirstUseHints), typeof(bool));


        /// <summary>
        /// BluetoothBlockConfiguration
        /// </summary>
        public static PropertyDefinition BluetoothBlockConfiguration = new PropertyDefinition(nameof(BluetoothBlockConfiguration), typeof(bool));


        /// <summary>
        /// BluetoothBlockContactSharing
        /// </summary>
        public static PropertyDefinition BluetoothBlockContactSharing = new PropertyDefinition(nameof(BluetoothBlockContactSharing), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// CellularBlockWiFiTethering
        /// </summary>
        public static PropertyDefinition CellularBlockWiFiTethering = new PropertyDefinition(nameof(CellularBlockWiFiTethering), typeof(bool));


        /// <summary>
        /// DataRoamingBlocked
        /// </summary>
        public static PropertyDefinition DataRoamingBlocked = new PropertyDefinition(nameof(DataRoamingBlocked), typeof(bool));


        /// <summary>
        /// DateTimeConfigurationBlocked
        /// </summary>
        public static PropertyDefinition DateTimeConfigurationBlocked = new PropertyDefinition(nameof(DateTimeConfigurationBlocked), typeof(bool));


        /// <summary>
        /// FactoryResetDeviceAdministratorEmails
        /// </summary>
        public static PropertyDefinition FactoryResetDeviceAdministratorEmails = new PropertyDefinition(nameof(FactoryResetDeviceAdministratorEmails), typeof(IList<String>));


        /// <summary>
        /// FactoryResetBlocked
        /// </summary>
        public static PropertyDefinition FactoryResetBlocked = new PropertyDefinition(nameof(FactoryResetBlocked), typeof(bool));


        /// <summary>
        /// KioskModeApps
        /// </summary>
        public static PropertyDefinition KioskModeApps = new PropertyDefinition(nameof(KioskModeApps), typeof(IList<AppListItem>));


        /// <summary>
        /// KioskModeWallpaperUrl
        /// </summary>
        public static PropertyDefinition KioskModeWallpaperUrl = new PropertyDefinition(nameof(KioskModeWallpaperUrl), typeof(string));


        /// <summary>
        /// KioskModeExitCode
        /// </summary>
        public static PropertyDefinition KioskModeExitCode = new PropertyDefinition(nameof(KioskModeExitCode), typeof(string));


        /// <summary>
        /// KioskModeVirtualHomeButtonEnabled
        /// </summary>
        public static PropertyDefinition KioskModeVirtualHomeButtonEnabled = new PropertyDefinition(nameof(KioskModeVirtualHomeButtonEnabled), typeof(bool));


        /// <summary>
        /// MicrophoneForceMute
        /// </summary>
        public static PropertyDefinition MicrophoneForceMute = new PropertyDefinition(nameof(MicrophoneForceMute), typeof(bool));


        /// <summary>
        /// NetworkEscapeHatchAllowed
        /// </summary>
        public static PropertyDefinition NetworkEscapeHatchAllowed = new PropertyDefinition(nameof(NetworkEscapeHatchAllowed), typeof(bool));


        /// <summary>
        /// NfcBlockOutgoingBeam
        /// </summary>
        public static PropertyDefinition NfcBlockOutgoingBeam = new PropertyDefinition(nameof(NfcBlockOutgoingBeam), typeof(bool));


        /// <summary>
        /// PasswordBlockKeyguard
        /// </summary>
        public static PropertyDefinition PasswordBlockKeyguard = new PropertyDefinition(nameof(PasswordBlockKeyguard), typeof(bool));


        /// <summary>
        /// PasswordBlockKeyguardFeatures
        /// </summary>
        public static PropertyDefinition PasswordBlockKeyguardFeatures = new PropertyDefinition(nameof(PasswordBlockKeyguardFeatures), typeof(IList<AndroidKeyguardFeature>));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordCountToBlock
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordCountToBlock = new PropertyDefinition(nameof(PasswordPreviousPasswordCountToBlock), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidDeviceOwnerRequiredPasswordType));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// SafeBootBlocked
        /// </summary>
        public static PropertyDefinition SafeBootBlocked = new PropertyDefinition(nameof(SafeBootBlocked), typeof(bool));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// SecurityAllowDebuggingFeatures
        /// </summary>
        public static PropertyDefinition SecurityAllowDebuggingFeatures = new PropertyDefinition(nameof(SecurityAllowDebuggingFeatures), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// StatusBarBlocked
        /// </summary>
        public static PropertyDefinition StatusBarBlocked = new PropertyDefinition(nameof(StatusBarBlocked), typeof(bool));


        /// <summary>
        /// StayOnModes
        /// </summary>
        public static PropertyDefinition StayOnModes = new PropertyDefinition(nameof(StayOnModes), typeof(IList<AndroidDeviceOwnerBatteryPluggedMode>));


        /// <summary>
        /// StorageAllowUsb
        /// </summary>
        public static PropertyDefinition StorageAllowUsb = new PropertyDefinition(nameof(StorageAllowUsb), typeof(bool));


        /// <summary>
        /// StorageBlockExternalMedia
        /// </summary>
        public static PropertyDefinition StorageBlockExternalMedia = new PropertyDefinition(nameof(StorageBlockExternalMedia), typeof(bool));


        /// <summary>
        /// StorageBlockUsbFileTransfer
        /// </summary>
        public static PropertyDefinition StorageBlockUsbFileTransfer = new PropertyDefinition(nameof(StorageBlockUsbFileTransfer), typeof(bool));


        /// <summary>
        /// SystemUpdateWindowStartMinutesAfterMidnight
        /// </summary>
        public static PropertyDefinition SystemUpdateWindowStartMinutesAfterMidnight = new PropertyDefinition(nameof(SystemUpdateWindowStartMinutesAfterMidnight), typeof(int));


        /// <summary>
        /// SystemUpdateWindowEndMinutesAfterMidnight
        /// </summary>
        public static PropertyDefinition SystemUpdateWindowEndMinutesAfterMidnight = new PropertyDefinition(nameof(SystemUpdateWindowEndMinutesAfterMidnight), typeof(int));


        /// <summary>
        /// SystemUpdateInstallType
        /// </summary>
        public static PropertyDefinition SystemUpdateInstallType = new PropertyDefinition(nameof(SystemUpdateInstallType), typeof(AndroidDeviceOwnerSystemUpdateInstallType));


        /// <summary>
        /// SystemWindowsBlocked
        /// </summary>
        public static PropertyDefinition SystemWindowsBlocked = new PropertyDefinition(nameof(SystemWindowsBlocked), typeof(bool));


        /// <summary>
        /// UsersBlockAdd
        /// </summary>
        public static PropertyDefinition UsersBlockAdd = new PropertyDefinition(nameof(UsersBlockAdd), typeof(bool));


        /// <summary>
        /// UsersBlockRemove
        /// </summary>
        public static PropertyDefinition UsersBlockRemove = new PropertyDefinition(nameof(UsersBlockRemove), typeof(bool));


        /// <summary>
        /// VolumeBlockAdjustment
        /// </summary>
        public static PropertyDefinition VolumeBlockAdjustment = new PropertyDefinition(nameof(VolumeBlockAdjustment), typeof(bool));


        /// <summary>
        /// VpnAlwaysOnPackageIdentifier
        /// </summary>
        public static PropertyDefinition VpnAlwaysOnPackageIdentifier = new PropertyDefinition(nameof(VpnAlwaysOnPackageIdentifier), typeof(string));


        /// <summary>
        /// VpnAlwaysOnLockdownMode
        /// </summary>
        public static PropertyDefinition VpnAlwaysOnLockdownMode = new PropertyDefinition(nameof(VpnAlwaysOnLockdownMode), typeof(bool));


        /// <summary>
        /// WifiBlockEditConfigurations
        /// </summary>
        public static PropertyDefinition WifiBlockEditConfigurations = new PropertyDefinition(nameof(WifiBlockEditConfigurations), typeof(bool));


        /// <summary>
        /// WifiBlockEditPolicyDefinedConfigurations
        /// </summary>
        public static PropertyDefinition WifiBlockEditPolicyDefinedConfigurations = new PropertyDefinition(nameof(WifiBlockEditPolicyDefinedConfigurations), typeof(bool));

    }


    /// <summary>
    /// AndroidDeviceOwnerWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidDeviceOwnerWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(AndroidDeviceOwnerWiFiSecurityType));


        /// <summary>
        /// PreSharedKey
        /// </summary>
        public static PropertyDefinition PreSharedKey = new PropertyDefinition(nameof(PreSharedKey), typeof(string));


        /// <summary>
        /// PreSharedKeyIsSet
        /// </summary>
        public static PropertyDefinition PreSharedKeyIsSet = new PropertyDefinition(nameof(PreSharedKeyIsSet), typeof(bool));

    }


    /// <summary>
    /// AndroidForWorkEasEmailProfileBaseObjectSchema
    /// </summary>
    public class AndroidForWorkEasEmailProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(EasAuthenticationMethod));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));


        /// <summary>
        /// UsernameSource
        /// </summary>
        public static PropertyDefinition UsernameSource = new PropertyDefinition(nameof(UsernameSource), typeof(AndroidUsernameSource));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidForWorkCertificateProfileBase));

    }


    /// <summary>
    /// AndroidForWorkCertificateProfileBaseObjectSchema
    /// </summary>
    public class AndroidForWorkCertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(AndroidForWorkTrustedRootCertificate));

    }


    /// <summary>
    /// AndroidForWorkTrustedRootCertificateObjectSchema
    /// </summary>
    public class AndroidForWorkTrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// AndroidForWorkPkcsCertificateProfileObjectSchema
    /// </summary>
    public class AndroidForWorkPkcsCertificateProfileObjectSchema : AndroidForWorkCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// CertificationAuthority
        /// </summary>
        public static PropertyDefinition CertificationAuthority = new PropertyDefinition(nameof(CertificationAuthority), typeof(string));


        /// <summary>
        /// CertificationAuthorityName
        /// </summary>
        public static PropertyDefinition CertificationAuthorityName = new PropertyDefinition(nameof(CertificationAuthorityName), typeof(string));


        /// <summary>
        /// CertificateTemplateName
        /// </summary>
        public static PropertyDefinition CertificateTemplateName = new PropertyDefinition(nameof(CertificateTemplateName), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// ManagedDeviceCertificateStateObjectSchema
    /// </summary>
    public class ManagedDeviceCertificateStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DevicePlatform
        /// </summary>
        public static PropertyDefinition DevicePlatform = new PropertyDefinition(nameof(DevicePlatform), typeof(DevicePlatformType));


        /// <summary>
        /// CertificateKeyUsage
        /// </summary>
        public static PropertyDefinition CertificateKeyUsage = new PropertyDefinition(nameof(CertificateKeyUsage), typeof(KeyUsages));


        /// <summary>
        /// CertificateValidityPeriodUnits
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodUnits = new PropertyDefinition(nameof(CertificateValidityPeriodUnits), typeof(CertificateValidityPeriodScale));


        /// <summary>
        /// CertificateIssuanceState
        /// </summary>
        public static PropertyDefinition CertificateIssuanceState = new PropertyDefinition(nameof(CertificateIssuanceState), typeof(CertificateIssuanceStates));


        /// <summary>
        /// CertificateKeyStorageProvider
        /// </summary>
        public static PropertyDefinition CertificateKeyStorageProvider = new PropertyDefinition(nameof(CertificateKeyStorageProvider), typeof(KeyStorageProviderOption));


        /// <summary>
        /// CertificateSubjectNameFormat
        /// </summary>
        public static PropertyDefinition CertificateSubjectNameFormat = new PropertyDefinition(nameof(CertificateSubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// CertificateSubjectAlternativeNameFormat
        /// </summary>
        public static PropertyDefinition CertificateSubjectAlternativeNameFormat = new PropertyDefinition(nameof(CertificateSubjectAlternativeNameFormat), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateRevokeStatus
        /// </summary>
        public static PropertyDefinition CertificateRevokeStatus = new PropertyDefinition(nameof(CertificateRevokeStatus), typeof(CertificateRevocationStatus));


        /// <summary>
        /// CertificateProfileDisplayName
        /// </summary>
        public static PropertyDefinition CertificateProfileDisplayName = new PropertyDefinition(nameof(CertificateProfileDisplayName), typeof(string));


        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserDisplayName
        /// </summary>
        public static PropertyDefinition UserDisplayName = new PropertyDefinition(nameof(UserDisplayName), typeof(string));


        /// <summary>
        /// CertificateExpirationDateTime
        /// </summary>
        public static PropertyDefinition CertificateExpirationDateTime = new PropertyDefinition(nameof(CertificateExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CertificateLastIssuanceStateChangedDateTime
        /// </summary>
        public static PropertyDefinition CertificateLastIssuanceStateChangedDateTime = new PropertyDefinition(nameof(CertificateLastIssuanceStateChangedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastCertificateStateChangeDateTime
        /// </summary>
        public static PropertyDefinition LastCertificateStateChangeDateTime = new PropertyDefinition(nameof(LastCertificateStateChangeDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CertificateIssuer
        /// </summary>
        public static PropertyDefinition CertificateIssuer = new PropertyDefinition(nameof(CertificateIssuer), typeof(string));


        /// <summary>
        /// CertificateThumbprint
        /// </summary>
        public static PropertyDefinition CertificateThumbprint = new PropertyDefinition(nameof(CertificateThumbprint), typeof(string));


        /// <summary>
        /// CertificateSerialNumber
        /// </summary>
        public static PropertyDefinition CertificateSerialNumber = new PropertyDefinition(nameof(CertificateSerialNumber), typeof(string));


        /// <summary>
        /// CertificateKeyLength
        /// </summary>
        public static PropertyDefinition CertificateKeyLength = new PropertyDefinition(nameof(CertificateKeyLength), typeof(int));


        /// <summary>
        /// CertificateEnhancedKeyUsage
        /// </summary>
        public static PropertyDefinition CertificateEnhancedKeyUsage = new PropertyDefinition(nameof(CertificateEnhancedKeyUsage), typeof(string));


        /// <summary>
        /// CertificateValidityPeriod
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriod = new PropertyDefinition(nameof(CertificateValidityPeriod), typeof(int));


        /// <summary>
        /// CertificateSubjectNameFormatString
        /// </summary>
        public static PropertyDefinition CertificateSubjectNameFormatString = new PropertyDefinition(nameof(CertificateSubjectNameFormatString), typeof(string));


        /// <summary>
        /// CertificateSubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition CertificateSubjectAlternativeNameFormatString = new PropertyDefinition(nameof(CertificateSubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateIssuanceDateTime
        /// </summary>
        public static PropertyDefinition CertificateIssuanceDateTime = new PropertyDefinition(nameof(CertificateIssuanceDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CertificateErrorCode
        /// </summary>
        public static PropertyDefinition CertificateErrorCode = new PropertyDefinition(nameof(CertificateErrorCode), typeof(int));

    }


    /// <summary>
    /// AndroidForWorkScepCertificateProfileObjectSchema
    /// </summary>
    public class AndroidForWorkScepCertificateProfileObjectSchema : AndroidForWorkCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateStore
        /// </summary>
        public static PropertyDefinition CertificateStore = new PropertyDefinition(nameof(CertificateStore), typeof(CertificateStore));


        /// <summary>
        /// CustomSubjectAlternativeNames
        /// </summary>
        public static PropertyDefinition CustomSubjectAlternativeNames = new PropertyDefinition(nameof(CustomSubjectAlternativeNames), typeof(IList<CustomSubjectAlternativeName>));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidForWorkGmailEasConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkGmailEasConfigurationObjectSchema : AndroidForWorkEasEmailProfileBaseObjectSchema
    {
    }


    /// <summary>
    /// AndroidForWorkNineWorkEasConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkNineWorkEasConfigurationObjectSchema : AndroidForWorkEasEmailProfileBaseObjectSchema
    {

        /// <summary>
        /// SyncCalendar
        /// </summary>
        public static PropertyDefinition SyncCalendar = new PropertyDefinition(nameof(SyncCalendar), typeof(bool));


        /// <summary>
        /// SyncContacts
        /// </summary>
        public static PropertyDefinition SyncContacts = new PropertyDefinition(nameof(SyncContacts), typeof(bool));


        /// <summary>
        /// SyncTasks
        /// </summary>
        public static PropertyDefinition SyncTasks = new PropertyDefinition(nameof(SyncTasks), typeof(bool));

    }


    /// <summary>
    /// AndroidCertificateProfileBaseObjectSchema
    /// </summary>
    public class AndroidCertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(AndroidTrustedRootCertificate));

    }


    /// <summary>
    /// AndroidTrustedRootCertificateObjectSchema
    /// </summary>
    public class AndroidTrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// AndroidForWorkImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class AndroidForWorkImportedPFXCertificateProfileObjectSchema : AndroidCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class AndroidImportedPFXCertificateProfileObjectSchema : AndroidCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidPkcsCertificateProfileObjectSchema
    /// </summary>
    public class AndroidPkcsCertificateProfileObjectSchema : AndroidCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// CertificationAuthority
        /// </summary>
        public static PropertyDefinition CertificationAuthority = new PropertyDefinition(nameof(CertificationAuthority), typeof(string));


        /// <summary>
        /// CertificationAuthorityName
        /// </summary>
        public static PropertyDefinition CertificationAuthorityName = new PropertyDefinition(nameof(CertificationAuthorityName), typeof(string));


        /// <summary>
        /// CertificateTemplateName
        /// </summary>
        public static PropertyDefinition CertificateTemplateName = new PropertyDefinition(nameof(CertificateTemplateName), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidScepCertificateProfileObjectSchema
    /// </summary>
    public class AndroidScepCertificateProfileObjectSchema : AndroidCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidCustomConfigurationObjectSchema
    /// </summary>
    public class AndroidCustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OmaSettings
        /// </summary>
        public static PropertyDefinition OmaSettings = new PropertyDefinition(nameof(OmaSettings), typeof(IList<OmaSetting>));

    }


    /// <summary>
    /// AndroidEasEmailProfileConfigurationObjectSchema
    /// </summary>
    public class AndroidEasEmailProfileConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AccountName
        /// </summary>
        public static PropertyDefinition AccountName = new PropertyDefinition(nameof(AccountName), typeof(string));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(EasAuthenticationMethod));


        /// <summary>
        /// SyncCalendar
        /// </summary>
        public static PropertyDefinition SyncCalendar = new PropertyDefinition(nameof(SyncCalendar), typeof(bool));


        /// <summary>
        /// SyncContacts
        /// </summary>
        public static PropertyDefinition SyncContacts = new PropertyDefinition(nameof(SyncContacts), typeof(bool));


        /// <summary>
        /// SyncTasks
        /// </summary>
        public static PropertyDefinition SyncTasks = new PropertyDefinition(nameof(SyncTasks), typeof(bool));


        /// <summary>
        /// SyncNotes
        /// </summary>
        public static PropertyDefinition SyncNotes = new PropertyDefinition(nameof(SyncNotes), typeof(bool));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// EmailSyncSchedule
        /// </summary>
        public static PropertyDefinition EmailSyncSchedule = new PropertyDefinition(nameof(EmailSyncSchedule), typeof(EmailSyncSchedule));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSmime
        /// </summary>
        public static PropertyDefinition RequireSmime = new PropertyDefinition(nameof(RequireSmime), typeof(bool));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));


        /// <summary>
        /// UsernameSource
        /// </summary>
        public static PropertyDefinition UsernameSource = new PropertyDefinition(nameof(UsernameSource), typeof(AndroidUsernameSource));


        /// <summary>
        /// UserDomainNameSource
        /// </summary>
        public static PropertyDefinition UserDomainNameSource = new PropertyDefinition(nameof(UserDomainNameSource), typeof(DomainNameSource));


        /// <summary>
        /// CustomDomainName
        /// </summary>
        public static PropertyDefinition CustomDomainName = new PropertyDefinition(nameof(CustomDomainName), typeof(string));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidCertificateProfileBase));


        /// <summary>
        /// SmimeSigningCertificate
        /// </summary>
        public static PropertyDefinition SmimeSigningCertificate = new PropertyDefinition(nameof(SmimeSigningCertificate), typeof(AndroidCertificateProfileBase));

    }


    /// <summary>
    /// AndroidForWorkCustomConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkCustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OmaSettings
        /// </summary>
        public static PropertyDefinition OmaSettings = new PropertyDefinition(nameof(OmaSettings), typeof(IList<OmaSetting>));

    }


    /// <summary>
    /// AndroidForWorkWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(AndroidWiFiSecurityType));

    }


    /// <summary>
    /// AndroidForWorkEnterpriseWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkEnterpriseWiFiConfigurationObjectSchema : AndroidForWorkWiFiConfigurationObjectSchema
    {

        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(AndroidEapType));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEapTtls
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEapTtls = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEapTtls), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// InnerAuthenticationProtocolForPeap
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForPeap = new PropertyDefinition(nameof(InnerAuthenticationProtocolForPeap), typeof(NonEapAuthenticationMethodForPeap));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificateForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificateForServerValidation = new PropertyDefinition(nameof(RootCertificateForServerValidation), typeof(AndroidForWorkTrustedRootCertificate));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(AndroidForWorkCertificateProfileBase));

    }


    /// <summary>
    /// AndroidForWorkGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition PasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(PasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// PasswordBlockTrustAgents
        /// </summary>
        public static PropertyDefinition PasswordBlockTrustAgents = new PropertyDefinition(nameof(PasswordBlockTrustAgents), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidForWorkRequiredPasswordType));


        /// <summary>
        /// WorkProfileDataSharingType
        /// </summary>
        public static PropertyDefinition WorkProfileDataSharingType = new PropertyDefinition(nameof(WorkProfileDataSharingType), typeof(AndroidForWorkCrossProfileDataSharingType));


        /// <summary>
        /// WorkProfileBlockNotificationsWhileDeviceLocked
        /// </summary>
        public static PropertyDefinition WorkProfileBlockNotificationsWhileDeviceLocked = new PropertyDefinition(nameof(WorkProfileBlockNotificationsWhileDeviceLocked), typeof(bool));


        /// <summary>
        /// WorkProfileBlockAddingAccounts
        /// </summary>
        public static PropertyDefinition WorkProfileBlockAddingAccounts = new PropertyDefinition(nameof(WorkProfileBlockAddingAccounts), typeof(bool));


        /// <summary>
        /// WorkProfileBluetoothEnableContactSharing
        /// </summary>
        public static PropertyDefinition WorkProfileBluetoothEnableContactSharing = new PropertyDefinition(nameof(WorkProfileBluetoothEnableContactSharing), typeof(bool));


        /// <summary>
        /// WorkProfileBlockScreenCapture
        /// </summary>
        public static PropertyDefinition WorkProfileBlockScreenCapture = new PropertyDefinition(nameof(WorkProfileBlockScreenCapture), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileCallerId
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileCallerId = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileCallerId), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCamera
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCamera = new PropertyDefinition(nameof(WorkProfileBlockCamera), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileContactsSearch
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileContactsSearch = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileContactsSearch), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileCopyPaste
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileCopyPaste = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileCopyPaste), typeof(bool));


        /// <summary>
        /// WorkProfileDefaultAppPermissionPolicy
        /// </summary>
        public static PropertyDefinition WorkProfileDefaultAppPermissionPolicy = new PropertyDefinition(nameof(WorkProfileDefaultAppPermissionPolicy), typeof(AndroidForWorkDefaultAppPermissionPolicyType));


        /// <summary>
        /// WorkProfilePasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(WorkProfilePasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// WorkProfilePasswordBlockTrustAgents
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordBlockTrustAgents = new PropertyDefinition(nameof(WorkProfilePasswordBlockTrustAgents), typeof(bool));


        /// <summary>
        /// WorkProfilePasswordExpirationDays
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordExpirationDays = new PropertyDefinition(nameof(WorkProfilePasswordExpirationDays), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinimumLength
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinimumLength = new PropertyDefinition(nameof(WorkProfilePasswordMinimumLength), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinNumericCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinNumericCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinNumericCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinNonLetterCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinNonLetterCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinNonLetterCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinLetterCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinLetterCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinLetterCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinLowerCaseCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinLowerCaseCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinLowerCaseCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinUpperCaseCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinUpperCaseCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinUpperCaseCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinSymbolCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinSymbolCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinSymbolCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// WorkProfilePasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(WorkProfilePasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// WorkProfilePasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(WorkProfilePasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// WorkProfilePasswordRequiredType
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordRequiredType = new PropertyDefinition(nameof(WorkProfilePasswordRequiredType), typeof(AndroidForWorkRequiredPasswordType));


        /// <summary>
        /// WorkProfileRequirePassword
        /// </summary>
        public static PropertyDefinition WorkProfileRequirePassword = new PropertyDefinition(nameof(WorkProfileRequirePassword), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// VpnAlwaysOnPackageIdentifier
        /// </summary>
        public static PropertyDefinition VpnAlwaysOnPackageIdentifier = new PropertyDefinition(nameof(VpnAlwaysOnPackageIdentifier), typeof(string));


        /// <summary>
        /// VpnEnableAlwaysOnLockdownMode
        /// </summary>
        public static PropertyDefinition VpnEnableAlwaysOnLockdownMode = new PropertyDefinition(nameof(VpnEnableAlwaysOnLockdownMode), typeof(bool));

    }


    /// <summary>
    /// AndroidForWorkVpnConfigurationObjectSchema
    /// </summary>
    public class AndroidForWorkVpnConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ConnectionName
        /// </summary>
        public static PropertyDefinition ConnectionName = new PropertyDefinition(nameof(ConnectionName), typeof(string));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(AndroidForWorkVpnConnectionType));


        /// <summary>
        /// Role
        /// </summary>
        public static PropertyDefinition Role = new PropertyDefinition(nameof(Role), typeof(string));


        /// <summary>
        /// Realm
        /// </summary>
        public static PropertyDefinition Realm = new PropertyDefinition(nameof(Realm), typeof(string));


        /// <summary>
        /// Servers
        /// </summary>
        public static PropertyDefinition Servers = new PropertyDefinition(nameof(Servers), typeof(IList<VpnServer>));


        /// <summary>
        /// Fingerprint
        /// </summary>
        public static PropertyDefinition Fingerprint = new PropertyDefinition(nameof(Fingerprint), typeof(string));


        /// <summary>
        /// CustomData
        /// </summary>
        public static PropertyDefinition CustomData = new PropertyDefinition(nameof(CustomData), typeof(IList<KeyValue>));


        /// <summary>
        /// CustomKeyValueData
        /// </summary>
        public static PropertyDefinition CustomKeyValueData = new PropertyDefinition(nameof(CustomKeyValueData), typeof(IList<KeyValuePair>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(VpnAuthenticationMethod));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidForWorkCertificateProfileBase));

    }


    /// <summary>
    /// AndroidGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class AndroidGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AppsBlockClipboardSharing
        /// </summary>
        public static PropertyDefinition AppsBlockClipboardSharing = new PropertyDefinition(nameof(AppsBlockClipboardSharing), typeof(bool));


        /// <summary>
        /// AppsBlockCopyPaste
        /// </summary>
        public static PropertyDefinition AppsBlockCopyPaste = new PropertyDefinition(nameof(AppsBlockCopyPaste), typeof(bool));


        /// <summary>
        /// AppsBlockYouTube
        /// </summary>
        public static PropertyDefinition AppsBlockYouTube = new PropertyDefinition(nameof(AppsBlockYouTube), typeof(bool));


        /// <summary>
        /// BluetoothBlocked
        /// </summary>
        public static PropertyDefinition BluetoothBlocked = new PropertyDefinition(nameof(BluetoothBlocked), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// CellularBlockDataRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockDataRoaming = new PropertyDefinition(nameof(CellularBlockDataRoaming), typeof(bool));


        /// <summary>
        /// CellularBlockMessaging
        /// </summary>
        public static PropertyDefinition CellularBlockMessaging = new PropertyDefinition(nameof(CellularBlockMessaging), typeof(bool));


        /// <summary>
        /// CellularBlockVoiceRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockVoiceRoaming = new PropertyDefinition(nameof(CellularBlockVoiceRoaming), typeof(bool));


        /// <summary>
        /// CellularBlockWiFiTethering
        /// </summary>
        public static PropertyDefinition CellularBlockWiFiTethering = new PropertyDefinition(nameof(CellularBlockWiFiTethering), typeof(bool));


        /// <summary>
        /// CompliantAppsList
        /// </summary>
        public static PropertyDefinition CompliantAppsList = new PropertyDefinition(nameof(CompliantAppsList), typeof(IList<AppListItem>));


        /// <summary>
        /// CompliantAppListType
        /// </summary>
        public static PropertyDefinition CompliantAppListType = new PropertyDefinition(nameof(CompliantAppListType), typeof(AppListType));


        /// <summary>
        /// DiagnosticDataBlockSubmission
        /// </summary>
        public static PropertyDefinition DiagnosticDataBlockSubmission = new PropertyDefinition(nameof(DiagnosticDataBlockSubmission), typeof(bool));


        /// <summary>
        /// LocationServicesBlocked
        /// </summary>
        public static PropertyDefinition LocationServicesBlocked = new PropertyDefinition(nameof(LocationServicesBlocked), typeof(bool));


        /// <summary>
        /// GoogleAccountBlockAutoSync
        /// </summary>
        public static PropertyDefinition GoogleAccountBlockAutoSync = new PropertyDefinition(nameof(GoogleAccountBlockAutoSync), typeof(bool));


        /// <summary>
        /// GooglePlayStoreBlocked
        /// </summary>
        public static PropertyDefinition GooglePlayStoreBlocked = new PropertyDefinition(nameof(GooglePlayStoreBlocked), typeof(bool));


        /// <summary>
        /// KioskModeBlockSleepButton
        /// </summary>
        public static PropertyDefinition KioskModeBlockSleepButton = new PropertyDefinition(nameof(KioskModeBlockSleepButton), typeof(bool));


        /// <summary>
        /// KioskModeBlockVolumeButtons
        /// </summary>
        public static PropertyDefinition KioskModeBlockVolumeButtons = new PropertyDefinition(nameof(KioskModeBlockVolumeButtons), typeof(bool));


        /// <summary>
        /// DateAndTimeBlockChanges
        /// </summary>
        public static PropertyDefinition DateAndTimeBlockChanges = new PropertyDefinition(nameof(DateAndTimeBlockChanges), typeof(bool));


        /// <summary>
        /// KioskModeApps
        /// </summary>
        public static PropertyDefinition KioskModeApps = new PropertyDefinition(nameof(KioskModeApps), typeof(IList<AppListItem>));


        /// <summary>
        /// NfcBlocked
        /// </summary>
        public static PropertyDefinition NfcBlocked = new PropertyDefinition(nameof(NfcBlocked), typeof(bool));


        /// <summary>
        /// PasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition PasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(PasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// PasswordBlockTrustAgents
        /// </summary>
        public static PropertyDefinition PasswordBlockTrustAgents = new PropertyDefinition(nameof(PasswordBlockTrustAgents), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidRequiredPasswordType));


        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PowerOffBlocked
        /// </summary>
        public static PropertyDefinition PowerOffBlocked = new PropertyDefinition(nameof(PowerOffBlocked), typeof(bool));


        /// <summary>
        /// FactoryResetBlocked
        /// </summary>
        public static PropertyDefinition FactoryResetBlocked = new PropertyDefinition(nameof(FactoryResetBlocked), typeof(bool));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// DeviceSharingAllowed
        /// </summary>
        public static PropertyDefinition DeviceSharingAllowed = new PropertyDefinition(nameof(DeviceSharingAllowed), typeof(bool));


        /// <summary>
        /// StorageBlockGoogleBackup
        /// </summary>
        public static PropertyDefinition StorageBlockGoogleBackup = new PropertyDefinition(nameof(StorageBlockGoogleBackup), typeof(bool));


        /// <summary>
        /// StorageBlockRemovableStorage
        /// </summary>
        public static PropertyDefinition StorageBlockRemovableStorage = new PropertyDefinition(nameof(StorageBlockRemovableStorage), typeof(bool));


        /// <summary>
        /// StorageRequireDeviceEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireDeviceEncryption = new PropertyDefinition(nameof(StorageRequireDeviceEncryption), typeof(bool));


        /// <summary>
        /// StorageRequireRemovableStorageEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireRemovableStorageEncryption = new PropertyDefinition(nameof(StorageRequireRemovableStorageEncryption), typeof(bool));


        /// <summary>
        /// VoiceAssistantBlocked
        /// </summary>
        public static PropertyDefinition VoiceAssistantBlocked = new PropertyDefinition(nameof(VoiceAssistantBlocked), typeof(bool));


        /// <summary>
        /// VoiceDialingBlocked
        /// </summary>
        public static PropertyDefinition VoiceDialingBlocked = new PropertyDefinition(nameof(VoiceDialingBlocked), typeof(bool));


        /// <summary>
        /// WebBrowserBlockPopups
        /// </summary>
        public static PropertyDefinition WebBrowserBlockPopups = new PropertyDefinition(nameof(WebBrowserBlockPopups), typeof(bool));


        /// <summary>
        /// WebBrowserBlockAutofill
        /// </summary>
        public static PropertyDefinition WebBrowserBlockAutofill = new PropertyDefinition(nameof(WebBrowserBlockAutofill), typeof(bool));


        /// <summary>
        /// WebBrowserBlockJavaScript
        /// </summary>
        public static PropertyDefinition WebBrowserBlockJavaScript = new PropertyDefinition(nameof(WebBrowserBlockJavaScript), typeof(bool));


        /// <summary>
        /// WebBrowserBlocked
        /// </summary>
        public static PropertyDefinition WebBrowserBlocked = new PropertyDefinition(nameof(WebBrowserBlocked), typeof(bool));


        /// <summary>
        /// WebBrowserCookieSettings
        /// </summary>
        public static PropertyDefinition WebBrowserCookieSettings = new PropertyDefinition(nameof(WebBrowserCookieSettings), typeof(WebBrowserCookieSettings));


        /// <summary>
        /// WiFiBlocked
        /// </summary>
        public static PropertyDefinition WiFiBlocked = new PropertyDefinition(nameof(WiFiBlocked), typeof(bool));


        /// <summary>
        /// AppsInstallAllowList
        /// </summary>
        public static PropertyDefinition AppsInstallAllowList = new PropertyDefinition(nameof(AppsInstallAllowList), typeof(IList<AppListItem>));


        /// <summary>
        /// AppsLaunchBlockList
        /// </summary>
        public static PropertyDefinition AppsLaunchBlockList = new PropertyDefinition(nameof(AppsLaunchBlockList), typeof(IList<AppListItem>));


        /// <summary>
        /// AppsHideList
        /// </summary>
        public static PropertyDefinition AppsHideList = new PropertyDefinition(nameof(AppsHideList), typeof(IList<AppListItem>));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));

    }


    /// <summary>
    /// AndroidVpnConfigurationObjectSchema
    /// </summary>
    public class AndroidVpnConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ConnectionName
        /// </summary>
        public static PropertyDefinition ConnectionName = new PropertyDefinition(nameof(ConnectionName), typeof(string));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(AndroidVpnConnectionType));


        /// <summary>
        /// Role
        /// </summary>
        public static PropertyDefinition Role = new PropertyDefinition(nameof(Role), typeof(string));


        /// <summary>
        /// Realm
        /// </summary>
        public static PropertyDefinition Realm = new PropertyDefinition(nameof(Realm), typeof(string));


        /// <summary>
        /// Servers
        /// </summary>
        public static PropertyDefinition Servers = new PropertyDefinition(nameof(Servers), typeof(IList<VpnServer>));


        /// <summary>
        /// Fingerprint
        /// </summary>
        public static PropertyDefinition Fingerprint = new PropertyDefinition(nameof(Fingerprint), typeof(string));


        /// <summary>
        /// CustomData
        /// </summary>
        public static PropertyDefinition CustomData = new PropertyDefinition(nameof(CustomData), typeof(IList<KeyValue>));


        /// <summary>
        /// CustomKeyValueData
        /// </summary>
        public static PropertyDefinition CustomKeyValueData = new PropertyDefinition(nameof(CustomKeyValueData), typeof(IList<KeyValuePair>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(VpnAuthenticationMethod));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidCertificateProfileBase));

    }


    /// <summary>
    /// AndroidWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(AndroidWiFiSecurityType));

    }


    /// <summary>
    /// AndroidEnterpriseWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidEnterpriseWiFiConfigurationObjectSchema : AndroidWiFiConfigurationObjectSchema
    {

        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(AndroidEapType));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEapTtls
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEapTtls = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEapTtls), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// InnerAuthenticationProtocolForPeap
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForPeap = new PropertyDefinition(nameof(InnerAuthenticationProtocolForPeap), typeof(NonEapAuthenticationMethodForPeap));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificateForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificateForServerValidation = new PropertyDefinition(nameof(RootCertificateForServerValidation), typeof(AndroidTrustedRootCertificate));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(AndroidCertificateProfileBase));

    }


    /// <summary>
    /// AndroidWorkProfileCertificateProfileBaseObjectSchema
    /// </summary>
    public class AndroidWorkProfileCertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(AndroidWorkProfileTrustedRootCertificate));

    }


    /// <summary>
    /// AndroidWorkProfileTrustedRootCertificateObjectSchema
    /// </summary>
    public class AndroidWorkProfileTrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// AndroidWorkProfilePkcsCertificateProfileObjectSchema
    /// </summary>
    public class AndroidWorkProfilePkcsCertificateProfileObjectSchema : AndroidWorkProfileCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// CertificationAuthority
        /// </summary>
        public static PropertyDefinition CertificationAuthority = new PropertyDefinition(nameof(CertificationAuthority), typeof(string));


        /// <summary>
        /// CertificationAuthorityName
        /// </summary>
        public static PropertyDefinition CertificationAuthorityName = new PropertyDefinition(nameof(CertificationAuthorityName), typeof(string));


        /// <summary>
        /// CertificateTemplateName
        /// </summary>
        public static PropertyDefinition CertificateTemplateName = new PropertyDefinition(nameof(CertificateTemplateName), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));

    }


    /// <summary>
    /// AndroidWorkProfileScepCertificateProfileObjectSchema
    /// </summary>
    public class AndroidWorkProfileScepCertificateProfileObjectSchema : AndroidWorkProfileCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateStore
        /// </summary>
        public static PropertyDefinition CertificateStore = new PropertyDefinition(nameof(CertificateStore), typeof(CertificateStore));


        /// <summary>
        /// CustomSubjectAlternativeNames
        /// </summary>
        public static PropertyDefinition CustomSubjectAlternativeNames = new PropertyDefinition(nameof(CustomSubjectAlternativeNames), typeof(IList<CustomSubjectAlternativeName>));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// AndroidWorkProfileCustomConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileCustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OmaSettings
        /// </summary>
        public static PropertyDefinition OmaSettings = new PropertyDefinition(nameof(OmaSettings), typeof(IList<OmaSetting>));

    }


    /// <summary>
    /// AndroidWorkProfileEasEmailProfileBaseObjectSchema
    /// </summary>
    public class AndroidWorkProfileEasEmailProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(EasAuthenticationMethod));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));


        /// <summary>
        /// UsernameSource
        /// </summary>
        public static PropertyDefinition UsernameSource = new PropertyDefinition(nameof(UsernameSource), typeof(AndroidUsernameSource));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidWorkProfileCertificateProfileBase));

    }


    /// <summary>
    /// AndroidWorkProfileGmailEasConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileGmailEasConfigurationObjectSchema : AndroidWorkProfileEasEmailProfileBaseObjectSchema
    {
    }


    /// <summary>
    /// AndroidWorkProfileNineWorkEasConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileNineWorkEasConfigurationObjectSchema : AndroidWorkProfileEasEmailProfileBaseObjectSchema
    {

        /// <summary>
        /// SyncCalendar
        /// </summary>
        public static PropertyDefinition SyncCalendar = new PropertyDefinition(nameof(SyncCalendar), typeof(bool));


        /// <summary>
        /// SyncContacts
        /// </summary>
        public static PropertyDefinition SyncContacts = new PropertyDefinition(nameof(SyncContacts), typeof(bool));


        /// <summary>
        /// SyncTasks
        /// </summary>
        public static PropertyDefinition SyncTasks = new PropertyDefinition(nameof(SyncTasks), typeof(bool));

    }


    /// <summary>
    /// AndroidWorkProfileGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition PasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(PasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// PasswordBlockTrustAgents
        /// </summary>
        public static PropertyDefinition PasswordBlockTrustAgents = new PropertyDefinition(nameof(PasswordBlockTrustAgents), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidWorkProfileRequiredPasswordType));


        /// <summary>
        /// WorkProfileDataSharingType
        /// </summary>
        public static PropertyDefinition WorkProfileDataSharingType = new PropertyDefinition(nameof(WorkProfileDataSharingType), typeof(AndroidWorkProfileCrossProfileDataSharingType));


        /// <summary>
        /// WorkProfileBlockNotificationsWhileDeviceLocked
        /// </summary>
        public static PropertyDefinition WorkProfileBlockNotificationsWhileDeviceLocked = new PropertyDefinition(nameof(WorkProfileBlockNotificationsWhileDeviceLocked), typeof(bool));


        /// <summary>
        /// WorkProfileBlockAddingAccounts
        /// </summary>
        public static PropertyDefinition WorkProfileBlockAddingAccounts = new PropertyDefinition(nameof(WorkProfileBlockAddingAccounts), typeof(bool));


        /// <summary>
        /// WorkProfileBluetoothEnableContactSharing
        /// </summary>
        public static PropertyDefinition WorkProfileBluetoothEnableContactSharing = new PropertyDefinition(nameof(WorkProfileBluetoothEnableContactSharing), typeof(bool));


        /// <summary>
        /// WorkProfileBlockScreenCapture
        /// </summary>
        public static PropertyDefinition WorkProfileBlockScreenCapture = new PropertyDefinition(nameof(WorkProfileBlockScreenCapture), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileCallerId
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileCallerId = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileCallerId), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCamera
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCamera = new PropertyDefinition(nameof(WorkProfileBlockCamera), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileContactsSearch
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileContactsSearch = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileContactsSearch), typeof(bool));


        /// <summary>
        /// WorkProfileBlockCrossProfileCopyPaste
        /// </summary>
        public static PropertyDefinition WorkProfileBlockCrossProfileCopyPaste = new PropertyDefinition(nameof(WorkProfileBlockCrossProfileCopyPaste), typeof(bool));


        /// <summary>
        /// WorkProfileDefaultAppPermissionPolicy
        /// </summary>
        public static PropertyDefinition WorkProfileDefaultAppPermissionPolicy = new PropertyDefinition(nameof(WorkProfileDefaultAppPermissionPolicy), typeof(AndroidWorkProfileDefaultAppPermissionPolicyType));


        /// <summary>
        /// WorkProfilePasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(WorkProfilePasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// WorkProfilePasswordBlockTrustAgents
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordBlockTrustAgents = new PropertyDefinition(nameof(WorkProfilePasswordBlockTrustAgents), typeof(bool));


        /// <summary>
        /// WorkProfilePasswordExpirationDays
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordExpirationDays = new PropertyDefinition(nameof(WorkProfilePasswordExpirationDays), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinimumLength
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinimumLength = new PropertyDefinition(nameof(WorkProfilePasswordMinimumLength), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinNumericCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinNumericCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinNumericCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinNonLetterCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinNonLetterCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinNonLetterCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinLetterCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinLetterCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinLetterCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinLowerCaseCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinLowerCaseCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinLowerCaseCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinUpperCaseCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinUpperCaseCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinUpperCaseCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinSymbolCharacters
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinSymbolCharacters = new PropertyDefinition(nameof(WorkProfilePasswordMinSymbolCharacters), typeof(int));


        /// <summary>
        /// WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(WorkProfilePasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// WorkProfilePasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(WorkProfilePasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// WorkProfilePasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(WorkProfilePasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// WorkProfilePasswordRequiredType
        /// </summary>
        public static PropertyDefinition WorkProfilePasswordRequiredType = new PropertyDefinition(nameof(WorkProfilePasswordRequiredType), typeof(AndroidWorkProfileRequiredPasswordType));


        /// <summary>
        /// WorkProfileRequirePassword
        /// </summary>
        public static PropertyDefinition WorkProfileRequirePassword = new PropertyDefinition(nameof(WorkProfileRequirePassword), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// VpnAlwaysOnPackageIdentifier
        /// </summary>
        public static PropertyDefinition VpnAlwaysOnPackageIdentifier = new PropertyDefinition(nameof(VpnAlwaysOnPackageIdentifier), typeof(string));


        /// <summary>
        /// VpnEnableAlwaysOnLockdownMode
        /// </summary>
        public static PropertyDefinition VpnEnableAlwaysOnLockdownMode = new PropertyDefinition(nameof(VpnEnableAlwaysOnLockdownMode), typeof(bool));

    }


    /// <summary>
    /// AndroidWorkProfileVpnConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileVpnConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ConnectionName
        /// </summary>
        public static PropertyDefinition ConnectionName = new PropertyDefinition(nameof(ConnectionName), typeof(string));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(AndroidWorkProfileVpnConnectionType));


        /// <summary>
        /// Role
        /// </summary>
        public static PropertyDefinition Role = new PropertyDefinition(nameof(Role), typeof(string));


        /// <summary>
        /// Realm
        /// </summary>
        public static PropertyDefinition Realm = new PropertyDefinition(nameof(Realm), typeof(string));


        /// <summary>
        /// Servers
        /// </summary>
        public static PropertyDefinition Servers = new PropertyDefinition(nameof(Servers), typeof(IList<VpnServer>));


        /// <summary>
        /// Fingerprint
        /// </summary>
        public static PropertyDefinition Fingerprint = new PropertyDefinition(nameof(Fingerprint), typeof(string));


        /// <summary>
        /// CustomData
        /// </summary>
        public static PropertyDefinition CustomData = new PropertyDefinition(nameof(CustomData), typeof(IList<KeyValue>));


        /// <summary>
        /// CustomKeyValueData
        /// </summary>
        public static PropertyDefinition CustomKeyValueData = new PropertyDefinition(nameof(CustomKeyValueData), typeof(IList<KeyValuePair>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(VpnAuthenticationMethod));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(AndroidWorkProfileCertificateProfileBase));

    }


    /// <summary>
    /// AndroidWorkProfileWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(AndroidWiFiSecurityType));

    }


    /// <summary>
    /// AndroidWorkProfileEnterpriseWiFiConfigurationObjectSchema
    /// </summary>
    public class AndroidWorkProfileEnterpriseWiFiConfigurationObjectSchema : AndroidWorkProfileWiFiConfigurationObjectSchema
    {

        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(AndroidEapType));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEapTtls
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEapTtls = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEapTtls), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// InnerAuthenticationProtocolForPeap
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForPeap = new PropertyDefinition(nameof(InnerAuthenticationProtocolForPeap), typeof(NonEapAuthenticationMethodForPeap));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificateForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificateForServerValidation = new PropertyDefinition(nameof(RootCertificateForServerValidation), typeof(AndroidWorkProfileTrustedRootCertificate));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(AndroidWorkProfileCertificateProfileBase));

    }


    /// <summary>
    /// IosCertificateProfileObjectSchema
    /// </summary>
    public class IosCertificateProfileObjectSchema : DeviceConfigurationObjectSchema
    {
    }


    /// <summary>
    /// IosCertificateProfileBaseObjectSchema
    /// </summary>
    public class IosCertificateProfileBaseObjectSchema : IosCertificateProfileObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(AppleSubjectNameFormat));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));

    }


    /// <summary>
    /// IosPkcsCertificateProfileObjectSchema
    /// </summary>
    public class IosPkcsCertificateProfileObjectSchema : IosCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// CertificationAuthority
        /// </summary>
        public static PropertyDefinition CertificationAuthority = new PropertyDefinition(nameof(CertificationAuthority), typeof(string));


        /// <summary>
        /// CertificationAuthorityName
        /// </summary>
        public static PropertyDefinition CertificationAuthorityName = new PropertyDefinition(nameof(CertificationAuthorityName), typeof(string));


        /// <summary>
        /// CertificateTemplateName
        /// </summary>
        public static PropertyDefinition CertificateTemplateName = new PropertyDefinition(nameof(CertificateTemplateName), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// IosScepCertificateProfileObjectSchema
    /// </summary>
    public class IosScepCertificateProfileObjectSchema : IosCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateStore
        /// </summary>
        public static PropertyDefinition CertificateStore = new PropertyDefinition(nameof(CertificateStore), typeof(CertificateStore));


        /// <summary>
        /// CustomSubjectAlternativeNames
        /// </summary>
        public static PropertyDefinition CustomSubjectAlternativeNames = new PropertyDefinition(nameof(CustomSubjectAlternativeNames), typeof(IList<CustomSubjectAlternativeName>));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(IosTrustedRootCertificate));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// IosTrustedRootCertificateObjectSchema
    /// </summary>
    public class IosTrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// IosImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class IosImportedPFXCertificateProfileObjectSchema : IosCertificateProfileObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// IosCustomConfigurationObjectSchema
    /// </summary>
    public class IosCustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PayloadName
        /// </summary>
        public static PropertyDefinition PayloadName = new PropertyDefinition(nameof(PayloadName), typeof(string));


        /// <summary>
        /// PayloadFileName
        /// </summary>
        public static PropertyDefinition PayloadFileName = new PropertyDefinition(nameof(PayloadFileName), typeof(string));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(string));

    }


    /// <summary>
    /// IosEduDeviceConfigurationObjectSchema
    /// </summary>
    public class IosEduDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TeacherCertificateSettings
        /// </summary>
        public static PropertyDefinition TeacherCertificateSettings = new PropertyDefinition(nameof(TeacherCertificateSettings), typeof(IosEduCertificateSettings));


        /// <summary>
        /// StudentCertificateSettings
        /// </summary>
        public static PropertyDefinition StudentCertificateSettings = new PropertyDefinition(nameof(StudentCertificateSettings), typeof(IosEduCertificateSettings));


        /// <summary>
        /// DeviceCertificateSettings
        /// </summary>
        public static PropertyDefinition DeviceCertificateSettings = new PropertyDefinition(nameof(DeviceCertificateSettings), typeof(IosEduCertificateSettings));

    }


    /// <summary>
    /// IosEducationDeviceConfigurationObjectSchema
    /// </summary>
    public class IosEducationDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {
    }


    /// <summary>
    /// IosGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class IosGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AccountBlockModification
        /// </summary>
        public static PropertyDefinition AccountBlockModification = new PropertyDefinition(nameof(AccountBlockModification), typeof(bool));


        /// <summary>
        /// ActivationLockAllowWhenSupervised
        /// </summary>
        public static PropertyDefinition ActivationLockAllowWhenSupervised = new PropertyDefinition(nameof(ActivationLockAllowWhenSupervised), typeof(bool));


        /// <summary>
        /// AirDropBlocked
        /// </summary>
        public static PropertyDefinition AirDropBlocked = new PropertyDefinition(nameof(AirDropBlocked), typeof(bool));


        /// <summary>
        /// AirDropForceUnmanagedDropTarget
        /// </summary>
        public static PropertyDefinition AirDropForceUnmanagedDropTarget = new PropertyDefinition(nameof(AirDropForceUnmanagedDropTarget), typeof(bool));


        /// <summary>
        /// AirPlayForcePairingPasswordForOutgoingRequests
        /// </summary>
        public static PropertyDefinition AirPlayForcePairingPasswordForOutgoingRequests = new PropertyDefinition(nameof(AirPlayForcePairingPasswordForOutgoingRequests), typeof(bool));


        /// <summary>
        /// AppleWatchBlockPairing
        /// </summary>
        public static PropertyDefinition AppleWatchBlockPairing = new PropertyDefinition(nameof(AppleWatchBlockPairing), typeof(bool));


        /// <summary>
        /// AppleWatchForceWristDetection
        /// </summary>
        public static PropertyDefinition AppleWatchForceWristDetection = new PropertyDefinition(nameof(AppleWatchForceWristDetection), typeof(bool));


        /// <summary>
        /// AppleNewsBlocked
        /// </summary>
        public static PropertyDefinition AppleNewsBlocked = new PropertyDefinition(nameof(AppleNewsBlocked), typeof(bool));


        /// <summary>
        /// AppsSingleAppModeList
        /// </summary>
        public static PropertyDefinition AppsSingleAppModeList = new PropertyDefinition(nameof(AppsSingleAppModeList), typeof(IList<AppListItem>));


        /// <summary>
        /// AppsVisibilityList
        /// </summary>
        public static PropertyDefinition AppsVisibilityList = new PropertyDefinition(nameof(AppsVisibilityList), typeof(IList<AppListItem>));


        /// <summary>
        /// AppsVisibilityListType
        /// </summary>
        public static PropertyDefinition AppsVisibilityListType = new PropertyDefinition(nameof(AppsVisibilityListType), typeof(AppListType));


        /// <summary>
        /// AppStoreBlockAutomaticDownloads
        /// </summary>
        public static PropertyDefinition AppStoreBlockAutomaticDownloads = new PropertyDefinition(nameof(AppStoreBlockAutomaticDownloads), typeof(bool));


        /// <summary>
        /// AppStoreBlocked
        /// </summary>
        public static PropertyDefinition AppStoreBlocked = new PropertyDefinition(nameof(AppStoreBlocked), typeof(bool));


        /// <summary>
        /// AppStoreBlockInAppPurchases
        /// </summary>
        public static PropertyDefinition AppStoreBlockInAppPurchases = new PropertyDefinition(nameof(AppStoreBlockInAppPurchases), typeof(bool));


        /// <summary>
        /// AppStoreBlockUIAppInstallation
        /// </summary>
        public static PropertyDefinition AppStoreBlockUIAppInstallation = new PropertyDefinition(nameof(AppStoreBlockUIAppInstallation), typeof(bool));


        /// <summary>
        /// AppStoreRequirePassword
        /// </summary>
        public static PropertyDefinition AppStoreRequirePassword = new PropertyDefinition(nameof(AppStoreRequirePassword), typeof(bool));


        /// <summary>
        /// BluetoothBlockModification
        /// </summary>
        public static PropertyDefinition BluetoothBlockModification = new PropertyDefinition(nameof(BluetoothBlockModification), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// CellularBlockDataRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockDataRoaming = new PropertyDefinition(nameof(CellularBlockDataRoaming), typeof(bool));


        /// <summary>
        /// CellularBlockGlobalBackgroundFetchWhileRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockGlobalBackgroundFetchWhileRoaming = new PropertyDefinition(nameof(CellularBlockGlobalBackgroundFetchWhileRoaming), typeof(bool));


        /// <summary>
        /// CellularBlockPerAppDataModification
        /// </summary>
        public static PropertyDefinition CellularBlockPerAppDataModification = new PropertyDefinition(nameof(CellularBlockPerAppDataModification), typeof(bool));


        /// <summary>
        /// CellularBlockPersonalHotspot
        /// </summary>
        public static PropertyDefinition CellularBlockPersonalHotspot = new PropertyDefinition(nameof(CellularBlockPersonalHotspot), typeof(bool));


        /// <summary>
        /// CellularBlockVoiceRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockVoiceRoaming = new PropertyDefinition(nameof(CellularBlockVoiceRoaming), typeof(bool));


        /// <summary>
        /// CertificatesBlockUntrustedTlsCertificates
        /// </summary>
        public static PropertyDefinition CertificatesBlockUntrustedTlsCertificates = new PropertyDefinition(nameof(CertificatesBlockUntrustedTlsCertificates), typeof(bool));


        /// <summary>
        /// ClassroomAppBlockRemoteScreenObservation
        /// </summary>
        public static PropertyDefinition ClassroomAppBlockRemoteScreenObservation = new PropertyDefinition(nameof(ClassroomAppBlockRemoteScreenObservation), typeof(bool));


        /// <summary>
        /// ClassroomAppForceUnpromptedScreenObservation
        /// </summary>
        public static PropertyDefinition ClassroomAppForceUnpromptedScreenObservation = new PropertyDefinition(nameof(ClassroomAppForceUnpromptedScreenObservation), typeof(bool));


        /// <summary>
        /// CompliantAppsList
        /// </summary>
        public static PropertyDefinition CompliantAppsList = new PropertyDefinition(nameof(CompliantAppsList), typeof(IList<AppListItem>));


        /// <summary>
        /// CompliantAppListType
        /// </summary>
        public static PropertyDefinition CompliantAppListType = new PropertyDefinition(nameof(CompliantAppListType), typeof(AppListType));


        /// <summary>
        /// ConfigurationProfileBlockChanges
        /// </summary>
        public static PropertyDefinition ConfigurationProfileBlockChanges = new PropertyDefinition(nameof(ConfigurationProfileBlockChanges), typeof(bool));


        /// <summary>
        /// DefinitionLookupBlocked
        /// </summary>
        public static PropertyDefinition DefinitionLookupBlocked = new PropertyDefinition(nameof(DefinitionLookupBlocked), typeof(bool));


        /// <summary>
        /// DeviceBlockEnableRestrictions
        /// </summary>
        public static PropertyDefinition DeviceBlockEnableRestrictions = new PropertyDefinition(nameof(DeviceBlockEnableRestrictions), typeof(bool));


        /// <summary>
        /// DeviceBlockEraseContentAndSettings
        /// </summary>
        public static PropertyDefinition DeviceBlockEraseContentAndSettings = new PropertyDefinition(nameof(DeviceBlockEraseContentAndSettings), typeof(bool));


        /// <summary>
        /// DeviceBlockNameModification
        /// </summary>
        public static PropertyDefinition DeviceBlockNameModification = new PropertyDefinition(nameof(DeviceBlockNameModification), typeof(bool));


        /// <summary>
        /// DiagnosticDataBlockSubmission
        /// </summary>
        public static PropertyDefinition DiagnosticDataBlockSubmission = new PropertyDefinition(nameof(DiagnosticDataBlockSubmission), typeof(bool));


        /// <summary>
        /// DiagnosticDataBlockSubmissionModification
        /// </summary>
        public static PropertyDefinition DiagnosticDataBlockSubmissionModification = new PropertyDefinition(nameof(DiagnosticDataBlockSubmissionModification), typeof(bool));


        /// <summary>
        /// DocumentsBlockManagedDocumentsInUnmanagedApps
        /// </summary>
        public static PropertyDefinition DocumentsBlockManagedDocumentsInUnmanagedApps = new PropertyDefinition(nameof(DocumentsBlockManagedDocumentsInUnmanagedApps), typeof(bool));


        /// <summary>
        /// DocumentsBlockUnmanagedDocumentsInManagedApps
        /// </summary>
        public static PropertyDefinition DocumentsBlockUnmanagedDocumentsInManagedApps = new PropertyDefinition(nameof(DocumentsBlockUnmanagedDocumentsInManagedApps), typeof(bool));


        /// <summary>
        /// EmailInDomainSuffixes
        /// </summary>
        public static PropertyDefinition EmailInDomainSuffixes = new PropertyDefinition(nameof(EmailInDomainSuffixes), typeof(IList<String>));


        /// <summary>
        /// EnterpriseAppBlockTrust
        /// </summary>
        public static PropertyDefinition EnterpriseAppBlockTrust = new PropertyDefinition(nameof(EnterpriseAppBlockTrust), typeof(bool));


        /// <summary>
        /// EnterpriseAppBlockTrustModification
        /// </summary>
        public static PropertyDefinition EnterpriseAppBlockTrustModification = new PropertyDefinition(nameof(EnterpriseAppBlockTrustModification), typeof(bool));


        /// <summary>
        /// FaceTimeBlocked
        /// </summary>
        public static PropertyDefinition FaceTimeBlocked = new PropertyDefinition(nameof(FaceTimeBlocked), typeof(bool));


        /// <summary>
        /// FindMyFriendsBlocked
        /// </summary>
        public static PropertyDefinition FindMyFriendsBlocked = new PropertyDefinition(nameof(FindMyFriendsBlocked), typeof(bool));


        /// <summary>
        /// GamingBlockGameCenterFriends
        /// </summary>
        public static PropertyDefinition GamingBlockGameCenterFriends = new PropertyDefinition(nameof(GamingBlockGameCenterFriends), typeof(bool));


        /// <summary>
        /// GamingBlockMultiplayer
        /// </summary>
        public static PropertyDefinition GamingBlockMultiplayer = new PropertyDefinition(nameof(GamingBlockMultiplayer), typeof(bool));


        /// <summary>
        /// GameCenterBlocked
        /// </summary>
        public static PropertyDefinition GameCenterBlocked = new PropertyDefinition(nameof(GameCenterBlocked), typeof(bool));


        /// <summary>
        /// HostPairingBlocked
        /// </summary>
        public static PropertyDefinition HostPairingBlocked = new PropertyDefinition(nameof(HostPairingBlocked), typeof(bool));


        /// <summary>
        /// IBooksStoreBlocked
        /// </summary>
        public static PropertyDefinition IBooksStoreBlocked = new PropertyDefinition(nameof(IBooksStoreBlocked), typeof(bool));


        /// <summary>
        /// IBooksStoreBlockErotica
        /// </summary>
        public static PropertyDefinition IBooksStoreBlockErotica = new PropertyDefinition(nameof(IBooksStoreBlockErotica), typeof(bool));


        /// <summary>
        /// ICloudBlockActivityContinuation
        /// </summary>
        public static PropertyDefinition ICloudBlockActivityContinuation = new PropertyDefinition(nameof(ICloudBlockActivityContinuation), typeof(bool));


        /// <summary>
        /// ICloudBlockBackup
        /// </summary>
        public static PropertyDefinition ICloudBlockBackup = new PropertyDefinition(nameof(ICloudBlockBackup), typeof(bool));


        /// <summary>
        /// ICloudBlockDocumentSync
        /// </summary>
        public static PropertyDefinition ICloudBlockDocumentSync = new PropertyDefinition(nameof(ICloudBlockDocumentSync), typeof(bool));


        /// <summary>
        /// ICloudBlockManagedAppsSync
        /// </summary>
        public static PropertyDefinition ICloudBlockManagedAppsSync = new PropertyDefinition(nameof(ICloudBlockManagedAppsSync), typeof(bool));


        /// <summary>
        /// ICloudBlockPhotoLibrary
        /// </summary>
        public static PropertyDefinition ICloudBlockPhotoLibrary = new PropertyDefinition(nameof(ICloudBlockPhotoLibrary), typeof(bool));


        /// <summary>
        /// ICloudBlockPhotoStreamSync
        /// </summary>
        public static PropertyDefinition ICloudBlockPhotoStreamSync = new PropertyDefinition(nameof(ICloudBlockPhotoStreamSync), typeof(bool));


        /// <summary>
        /// ICloudBlockSharedPhotoStream
        /// </summary>
        public static PropertyDefinition ICloudBlockSharedPhotoStream = new PropertyDefinition(nameof(ICloudBlockSharedPhotoStream), typeof(bool));


        /// <summary>
        /// ICloudRequireEncryptedBackup
        /// </summary>
        public static PropertyDefinition ICloudRequireEncryptedBackup = new PropertyDefinition(nameof(ICloudRequireEncryptedBackup), typeof(bool));


        /// <summary>
        /// ITunesBlockExplicitContent
        /// </summary>
        public static PropertyDefinition ITunesBlockExplicitContent = new PropertyDefinition(nameof(ITunesBlockExplicitContent), typeof(bool));


        /// <summary>
        /// ITunesBlockMusicService
        /// </summary>
        public static PropertyDefinition ITunesBlockMusicService = new PropertyDefinition(nameof(ITunesBlockMusicService), typeof(bool));


        /// <summary>
        /// ITunesBlockRadio
        /// </summary>
        public static PropertyDefinition ITunesBlockRadio = new PropertyDefinition(nameof(ITunesBlockRadio), typeof(bool));


        /// <summary>
        /// KeyboardBlockAutoCorrect
        /// </summary>
        public static PropertyDefinition KeyboardBlockAutoCorrect = new PropertyDefinition(nameof(KeyboardBlockAutoCorrect), typeof(bool));


        /// <summary>
        /// KeyboardBlockDictation
        /// </summary>
        public static PropertyDefinition KeyboardBlockDictation = new PropertyDefinition(nameof(KeyboardBlockDictation), typeof(bool));


        /// <summary>
        /// KeyboardBlockPredictive
        /// </summary>
        public static PropertyDefinition KeyboardBlockPredictive = new PropertyDefinition(nameof(KeyboardBlockPredictive), typeof(bool));


        /// <summary>
        /// KeyboardBlockShortcuts
        /// </summary>
        public static PropertyDefinition KeyboardBlockShortcuts = new PropertyDefinition(nameof(KeyboardBlockShortcuts), typeof(bool));


        /// <summary>
        /// KeyboardBlockSpellCheck
        /// </summary>
        public static PropertyDefinition KeyboardBlockSpellCheck = new PropertyDefinition(nameof(KeyboardBlockSpellCheck), typeof(bool));


        /// <summary>
        /// KioskModeAllowAssistiveSpeak
        /// </summary>
        public static PropertyDefinition KioskModeAllowAssistiveSpeak = new PropertyDefinition(nameof(KioskModeAllowAssistiveSpeak), typeof(bool));


        /// <summary>
        /// KioskModeAllowAssistiveTouchSettings
        /// </summary>
        public static PropertyDefinition KioskModeAllowAssistiveTouchSettings = new PropertyDefinition(nameof(KioskModeAllowAssistiveTouchSettings), typeof(bool));


        /// <summary>
        /// KioskModeAllowAutoLock
        /// </summary>
        public static PropertyDefinition KioskModeAllowAutoLock = new PropertyDefinition(nameof(KioskModeAllowAutoLock), typeof(bool));


        /// <summary>
        /// KioskModeAllowColorInversionSettings
        /// </summary>
        public static PropertyDefinition KioskModeAllowColorInversionSettings = new PropertyDefinition(nameof(KioskModeAllowColorInversionSettings), typeof(bool));


        /// <summary>
        /// KioskModeAllowRingerSwitch
        /// </summary>
        public static PropertyDefinition KioskModeAllowRingerSwitch = new PropertyDefinition(nameof(KioskModeAllowRingerSwitch), typeof(bool));


        /// <summary>
        /// KioskModeAllowScreenRotation
        /// </summary>
        public static PropertyDefinition KioskModeAllowScreenRotation = new PropertyDefinition(nameof(KioskModeAllowScreenRotation), typeof(bool));


        /// <summary>
        /// KioskModeAllowSleepButton
        /// </summary>
        public static PropertyDefinition KioskModeAllowSleepButton = new PropertyDefinition(nameof(KioskModeAllowSleepButton), typeof(bool));


        /// <summary>
        /// KioskModeAllowTouchscreen
        /// </summary>
        public static PropertyDefinition KioskModeAllowTouchscreen = new PropertyDefinition(nameof(KioskModeAllowTouchscreen), typeof(bool));


        /// <summary>
        /// KioskModeAllowVoiceOverSettings
        /// </summary>
        public static PropertyDefinition KioskModeAllowVoiceOverSettings = new PropertyDefinition(nameof(KioskModeAllowVoiceOverSettings), typeof(bool));


        /// <summary>
        /// KioskModeAllowVolumeButtons
        /// </summary>
        public static PropertyDefinition KioskModeAllowVolumeButtons = new PropertyDefinition(nameof(KioskModeAllowVolumeButtons), typeof(bool));


        /// <summary>
        /// KioskModeBlockVolumeButtons
        /// </summary>
        public static PropertyDefinition KioskModeBlockVolumeButtons = new PropertyDefinition(nameof(KioskModeBlockVolumeButtons), typeof(bool));


        /// <summary>
        /// KioskModeAllowZoomSettings
        /// </summary>
        public static PropertyDefinition KioskModeAllowZoomSettings = new PropertyDefinition(nameof(KioskModeAllowZoomSettings), typeof(bool));


        /// <summary>
        /// KioskModeAppStoreUrl
        /// </summary>
        public static PropertyDefinition KioskModeAppStoreUrl = new PropertyDefinition(nameof(KioskModeAppStoreUrl), typeof(string));


        /// <summary>
        /// KioskModeBuiltInAppId
        /// </summary>
        public static PropertyDefinition KioskModeBuiltInAppId = new PropertyDefinition(nameof(KioskModeBuiltInAppId), typeof(string));


        /// <summary>
        /// KioskModeRequireAssistiveTouch
        /// </summary>
        public static PropertyDefinition KioskModeRequireAssistiveTouch = new PropertyDefinition(nameof(KioskModeRequireAssistiveTouch), typeof(bool));


        /// <summary>
        /// KioskModeRequireColorInversion
        /// </summary>
        public static PropertyDefinition KioskModeRequireColorInversion = new PropertyDefinition(nameof(KioskModeRequireColorInversion), typeof(bool));


        /// <summary>
        /// KioskModeRequireMonoAudio
        /// </summary>
        public static PropertyDefinition KioskModeRequireMonoAudio = new PropertyDefinition(nameof(KioskModeRequireMonoAudio), typeof(bool));


        /// <summary>
        /// KioskModeRequireVoiceOver
        /// </summary>
        public static PropertyDefinition KioskModeRequireVoiceOver = new PropertyDefinition(nameof(KioskModeRequireVoiceOver), typeof(bool));


        /// <summary>
        /// KioskModeRequireZoom
        /// </summary>
        public static PropertyDefinition KioskModeRequireZoom = new PropertyDefinition(nameof(KioskModeRequireZoom), typeof(bool));


        /// <summary>
        /// KioskModeManagedAppId
        /// </summary>
        public static PropertyDefinition KioskModeManagedAppId = new PropertyDefinition(nameof(KioskModeManagedAppId), typeof(string));


        /// <summary>
        /// LockScreenBlockControlCenter
        /// </summary>
        public static PropertyDefinition LockScreenBlockControlCenter = new PropertyDefinition(nameof(LockScreenBlockControlCenter), typeof(bool));


        /// <summary>
        /// LockScreenBlockNotificationView
        /// </summary>
        public static PropertyDefinition LockScreenBlockNotificationView = new PropertyDefinition(nameof(LockScreenBlockNotificationView), typeof(bool));


        /// <summary>
        /// LockScreenBlockPassbook
        /// </summary>
        public static PropertyDefinition LockScreenBlockPassbook = new PropertyDefinition(nameof(LockScreenBlockPassbook), typeof(bool));


        /// <summary>
        /// LockScreenBlockTodayView
        /// </summary>
        public static PropertyDefinition LockScreenBlockTodayView = new PropertyDefinition(nameof(LockScreenBlockTodayView), typeof(bool));


        /// <summary>
        /// MediaContentRatingAustralia
        /// </summary>
        public static PropertyDefinition MediaContentRatingAustralia = new PropertyDefinition(nameof(MediaContentRatingAustralia), typeof(MediaContentRatingAustralia));


        /// <summary>
        /// MediaContentRatingCanada
        /// </summary>
        public static PropertyDefinition MediaContentRatingCanada = new PropertyDefinition(nameof(MediaContentRatingCanada), typeof(MediaContentRatingCanada));


        /// <summary>
        /// MediaContentRatingFrance
        /// </summary>
        public static PropertyDefinition MediaContentRatingFrance = new PropertyDefinition(nameof(MediaContentRatingFrance), typeof(MediaContentRatingFrance));


        /// <summary>
        /// MediaContentRatingGermany
        /// </summary>
        public static PropertyDefinition MediaContentRatingGermany = new PropertyDefinition(nameof(MediaContentRatingGermany), typeof(MediaContentRatingGermany));


        /// <summary>
        /// MediaContentRatingIreland
        /// </summary>
        public static PropertyDefinition MediaContentRatingIreland = new PropertyDefinition(nameof(MediaContentRatingIreland), typeof(MediaContentRatingIreland));


        /// <summary>
        /// MediaContentRatingJapan
        /// </summary>
        public static PropertyDefinition MediaContentRatingJapan = new PropertyDefinition(nameof(MediaContentRatingJapan), typeof(MediaContentRatingJapan));


        /// <summary>
        /// MediaContentRatingNewZealand
        /// </summary>
        public static PropertyDefinition MediaContentRatingNewZealand = new PropertyDefinition(nameof(MediaContentRatingNewZealand), typeof(MediaContentRatingNewZealand));


        /// <summary>
        /// MediaContentRatingUnitedKingdom
        /// </summary>
        public static PropertyDefinition MediaContentRatingUnitedKingdom = new PropertyDefinition(nameof(MediaContentRatingUnitedKingdom), typeof(MediaContentRatingUnitedKingdom));


        /// <summary>
        /// MediaContentRatingUnitedStates
        /// </summary>
        public static PropertyDefinition MediaContentRatingUnitedStates = new PropertyDefinition(nameof(MediaContentRatingUnitedStates), typeof(MediaContentRatingUnitedStates));


        /// <summary>
        /// NetworkUsageRules
        /// </summary>
        public static PropertyDefinition NetworkUsageRules = new PropertyDefinition(nameof(NetworkUsageRules), typeof(IList<IosNetworkUsageRule>));


        /// <summary>
        /// MediaContentRatingApps
        /// </summary>
        public static PropertyDefinition MediaContentRatingApps = new PropertyDefinition(nameof(MediaContentRatingApps), typeof(RatingAppsType));


        /// <summary>
        /// MessagesBlocked
        /// </summary>
        public static PropertyDefinition MessagesBlocked = new PropertyDefinition(nameof(MessagesBlocked), typeof(bool));


        /// <summary>
        /// NotificationsBlockSettingsModification
        /// </summary>
        public static PropertyDefinition NotificationsBlockSettingsModification = new PropertyDefinition(nameof(NotificationsBlockSettingsModification), typeof(bool));


        /// <summary>
        /// PasscodeBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition PasscodeBlockFingerprintUnlock = new PropertyDefinition(nameof(PasscodeBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// PasscodeBlockFingerprintModification
        /// </summary>
        public static PropertyDefinition PasscodeBlockFingerprintModification = new PropertyDefinition(nameof(PasscodeBlockFingerprintModification), typeof(bool));


        /// <summary>
        /// PasscodeBlockModification
        /// </summary>
        public static PropertyDefinition PasscodeBlockModification = new PropertyDefinition(nameof(PasscodeBlockModification), typeof(bool));


        /// <summary>
        /// PasscodeBlockSimple
        /// </summary>
        public static PropertyDefinition PasscodeBlockSimple = new PropertyDefinition(nameof(PasscodeBlockSimple), typeof(bool));


        /// <summary>
        /// PasscodeExpirationDays
        /// </summary>
        public static PropertyDefinition PasscodeExpirationDays = new PropertyDefinition(nameof(PasscodeExpirationDays), typeof(int));


        /// <summary>
        /// PasscodeMinimumLength
        /// </summary>
        public static PropertyDefinition PasscodeMinimumLength = new PropertyDefinition(nameof(PasscodeMinimumLength), typeof(int));


        /// <summary>
        /// PasscodeMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasscodeMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasscodeMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasscodeMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasscodeMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasscodeMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasscodeMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasscodeMinimumCharacterSetCount = new PropertyDefinition(nameof(PasscodeMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasscodePreviousPasscodeBlockCount
        /// </summary>
        public static PropertyDefinition PasscodePreviousPasscodeBlockCount = new PropertyDefinition(nameof(PasscodePreviousPasscodeBlockCount), typeof(int));


        /// <summary>
        /// PasscodeSignInFailureCountBeforeWipe
        /// </summary>
        public static PropertyDefinition PasscodeSignInFailureCountBeforeWipe = new PropertyDefinition(nameof(PasscodeSignInFailureCountBeforeWipe), typeof(int));


        /// <summary>
        /// PasscodeRequiredType
        /// </summary>
        public static PropertyDefinition PasscodeRequiredType = new PropertyDefinition(nameof(PasscodeRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasscodeRequired
        /// </summary>
        public static PropertyDefinition PasscodeRequired = new PropertyDefinition(nameof(PasscodeRequired), typeof(bool));


        /// <summary>
        /// PodcastsBlocked
        /// </summary>
        public static PropertyDefinition PodcastsBlocked = new PropertyDefinition(nameof(PodcastsBlocked), typeof(bool));


        /// <summary>
        /// SafariBlockAutofill
        /// </summary>
        public static PropertyDefinition SafariBlockAutofill = new PropertyDefinition(nameof(SafariBlockAutofill), typeof(bool));


        /// <summary>
        /// SafariBlockJavaScript
        /// </summary>
        public static PropertyDefinition SafariBlockJavaScript = new PropertyDefinition(nameof(SafariBlockJavaScript), typeof(bool));


        /// <summary>
        /// SafariBlockPopups
        /// </summary>
        public static PropertyDefinition SafariBlockPopups = new PropertyDefinition(nameof(SafariBlockPopups), typeof(bool));


        /// <summary>
        /// SafariBlocked
        /// </summary>
        public static PropertyDefinition SafariBlocked = new PropertyDefinition(nameof(SafariBlocked), typeof(bool));


        /// <summary>
        /// SafariCookieSettings
        /// </summary>
        public static PropertyDefinition SafariCookieSettings = new PropertyDefinition(nameof(SafariCookieSettings), typeof(WebBrowserCookieSettings));


        /// <summary>
        /// SafariManagedDomains
        /// </summary>
        public static PropertyDefinition SafariManagedDomains = new PropertyDefinition(nameof(SafariManagedDomains), typeof(IList<String>));


        /// <summary>
        /// SafariPasswordAutoFillDomains
        /// </summary>
        public static PropertyDefinition SafariPasswordAutoFillDomains = new PropertyDefinition(nameof(SafariPasswordAutoFillDomains), typeof(IList<String>));


        /// <summary>
        /// SafariRequireFraudWarning
        /// </summary>
        public static PropertyDefinition SafariRequireFraudWarning = new PropertyDefinition(nameof(SafariRequireFraudWarning), typeof(bool));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// SiriBlocked
        /// </summary>
        public static PropertyDefinition SiriBlocked = new PropertyDefinition(nameof(SiriBlocked), typeof(bool));


        /// <summary>
        /// SiriBlockedWhenLocked
        /// </summary>
        public static PropertyDefinition SiriBlockedWhenLocked = new PropertyDefinition(nameof(SiriBlockedWhenLocked), typeof(bool));


        /// <summary>
        /// SiriBlockUserGeneratedContent
        /// </summary>
        public static PropertyDefinition SiriBlockUserGeneratedContent = new PropertyDefinition(nameof(SiriBlockUserGeneratedContent), typeof(bool));


        /// <summary>
        /// SiriRequireProfanityFilter
        /// </summary>
        public static PropertyDefinition SiriRequireProfanityFilter = new PropertyDefinition(nameof(SiriRequireProfanityFilter), typeof(bool));


        /// <summary>
        /// SpotlightBlockInternetResults
        /// </summary>
        public static PropertyDefinition SpotlightBlockInternetResults = new PropertyDefinition(nameof(SpotlightBlockInternetResults), typeof(bool));


        /// <summary>
        /// VoiceDialingBlocked
        /// </summary>
        public static PropertyDefinition VoiceDialingBlocked = new PropertyDefinition(nameof(VoiceDialingBlocked), typeof(bool));


        /// <summary>
        /// WallpaperBlockModification
        /// </summary>
        public static PropertyDefinition WallpaperBlockModification = new PropertyDefinition(nameof(WallpaperBlockModification), typeof(bool));


        /// <summary>
        /// WiFiConnectOnlyToConfiguredNetworks
        /// </summary>
        public static PropertyDefinition WiFiConnectOnlyToConfiguredNetworks = new PropertyDefinition(nameof(WiFiConnectOnlyToConfiguredNetworks), typeof(bool));


        /// <summary>
        /// ClassroomForceRequestPermissionToLeaveClasses
        /// </summary>
        public static PropertyDefinition ClassroomForceRequestPermissionToLeaveClasses = new PropertyDefinition(nameof(ClassroomForceRequestPermissionToLeaveClasses), typeof(bool));


        /// <summary>
        /// KeychainBlockCloudSync
        /// </summary>
        public static PropertyDefinition KeychainBlockCloudSync = new PropertyDefinition(nameof(KeychainBlockCloudSync), typeof(bool));


        /// <summary>
        /// PkiBlockOTAUpdates
        /// </summary>
        public static PropertyDefinition PkiBlockOTAUpdates = new PropertyDefinition(nameof(PkiBlockOTAUpdates), typeof(bool));


        /// <summary>
        /// PrivacyForceLimitAdTracking
        /// </summary>
        public static PropertyDefinition PrivacyForceLimitAdTracking = new PropertyDefinition(nameof(PrivacyForceLimitAdTracking), typeof(bool));


        /// <summary>
        /// EnterpriseBookBlockBackup
        /// </summary>
        public static PropertyDefinition EnterpriseBookBlockBackup = new PropertyDefinition(nameof(EnterpriseBookBlockBackup), typeof(bool));


        /// <summary>
        /// EnterpriseBookBlockMetadataSync
        /// </summary>
        public static PropertyDefinition EnterpriseBookBlockMetadataSync = new PropertyDefinition(nameof(EnterpriseBookBlockMetadataSync), typeof(bool));


        /// <summary>
        /// AirPrintBlocked
        /// </summary>
        public static PropertyDefinition AirPrintBlocked = new PropertyDefinition(nameof(AirPrintBlocked), typeof(bool));


        /// <summary>
        /// AirPrintBlockCredentialsStorage
        /// </summary>
        public static PropertyDefinition AirPrintBlockCredentialsStorage = new PropertyDefinition(nameof(AirPrintBlockCredentialsStorage), typeof(bool));


        /// <summary>
        /// AirPrintForceTrustedTLS
        /// </summary>
        public static PropertyDefinition AirPrintForceTrustedTLS = new PropertyDefinition(nameof(AirPrintForceTrustedTLS), typeof(bool));


        /// <summary>
        /// AirPrintBlockiBeaconDiscovery
        /// </summary>
        public static PropertyDefinition AirPrintBlockiBeaconDiscovery = new PropertyDefinition(nameof(AirPrintBlockiBeaconDiscovery), typeof(bool));


        /// <summary>
        /// BlockSystemAppRemoval
        /// </summary>
        public static PropertyDefinition BlockSystemAppRemoval = new PropertyDefinition(nameof(BlockSystemAppRemoval), typeof(bool));


        /// <summary>
        /// VpnBlockCreation
        /// </summary>
        public static PropertyDefinition VpnBlockCreation = new PropertyDefinition(nameof(VpnBlockCreation), typeof(bool));


        /// <summary>
        /// AppRemovalBlocked
        /// </summary>
        public static PropertyDefinition AppRemovalBlocked = new PropertyDefinition(nameof(AppRemovalBlocked), typeof(bool));


        /// <summary>
        /// UsbRestrictedModeBlocked
        /// </summary>
        public static PropertyDefinition UsbRestrictedModeBlocked = new PropertyDefinition(nameof(UsbRestrictedModeBlocked), typeof(bool));


        /// <summary>
        /// PasswordBlockAutoFill
        /// </summary>
        public static PropertyDefinition PasswordBlockAutoFill = new PropertyDefinition(nameof(PasswordBlockAutoFill), typeof(bool));


        /// <summary>
        /// PasswordBlockProximityRequests
        /// </summary>
        public static PropertyDefinition PasswordBlockProximityRequests = new PropertyDefinition(nameof(PasswordBlockProximityRequests), typeof(bool));


        /// <summary>
        /// PasswordBlockAirDropSharing
        /// </summary>
        public static PropertyDefinition PasswordBlockAirDropSharing = new PropertyDefinition(nameof(PasswordBlockAirDropSharing), typeof(bool));


        /// <summary>
        /// DateAndTimeForceSetAutomatically
        /// </summary>
        public static PropertyDefinition DateAndTimeForceSetAutomatically = new PropertyDefinition(nameof(DateAndTimeForceSetAutomatically), typeof(bool));


        /// <summary>
        /// ContactsAllowManagedToUnmanagedWrite
        /// </summary>
        public static PropertyDefinition ContactsAllowManagedToUnmanagedWrite = new PropertyDefinition(nameof(ContactsAllowManagedToUnmanagedWrite), typeof(bool));


        /// <summary>
        /// ContactsAllowUnmanagedToManagedRead
        /// </summary>
        public static PropertyDefinition ContactsAllowUnmanagedToManagedRead = new PropertyDefinition(nameof(ContactsAllowUnmanagedToManagedRead), typeof(bool));

    }


    /// <summary>
    /// IosUpdateConfigurationObjectSchema
    /// </summary>
    public class IosUpdateConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// IsEnabled
        /// </summary>
        public static PropertyDefinition IsEnabled = new PropertyDefinition(nameof(IsEnabled), typeof(bool));


        /// <summary>
        /// ActiveHoursStart
        /// </summary>
        public static PropertyDefinition ActiveHoursStart = new PropertyDefinition(nameof(ActiveHoursStart), typeof(TimeSpan));


        /// <summary>
        /// ActiveHoursEnd
        /// </summary>
        public static PropertyDefinition ActiveHoursEnd = new PropertyDefinition(nameof(ActiveHoursEnd), typeof(TimeSpan));


        /// <summary>
        /// ScheduledInstallDays
        /// </summary>
        public static PropertyDefinition ScheduledInstallDays = new PropertyDefinition(nameof(ScheduledInstallDays), typeof(IList<DayOfWeek>));


        /// <summary>
        /// UtcTimeOffsetInMinutes
        /// </summary>
        public static PropertyDefinition UtcTimeOffsetInMinutes = new PropertyDefinition(nameof(UtcTimeOffsetInMinutes), typeof(int));


        /// <summary>
        /// EnforcedSoftwareUpdateDelayInDays
        /// </summary>
        public static PropertyDefinition EnforcedSoftwareUpdateDelayInDays = new PropertyDefinition(nameof(EnforcedSoftwareUpdateDelayInDays), typeof(int));

    }


    /// <summary>
    /// IosWiFiConfigurationObjectSchema
    /// </summary>
    public class IosWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(WiFiSecurityType));


        /// <summary>
        /// ProxySettings
        /// </summary>
        public static PropertyDefinition ProxySettings = new PropertyDefinition(nameof(ProxySettings), typeof(WiFiProxySetting));


        /// <summary>
        /// ProxyManualAddress
        /// </summary>
        public static PropertyDefinition ProxyManualAddress = new PropertyDefinition(nameof(ProxyManualAddress), typeof(string));


        /// <summary>
        /// ProxyManualPort
        /// </summary>
        public static PropertyDefinition ProxyManualPort = new PropertyDefinition(nameof(ProxyManualPort), typeof(int));


        /// <summary>
        /// ProxyAutomaticConfigurationUrl
        /// </summary>
        public static PropertyDefinition ProxyAutomaticConfigurationUrl = new PropertyDefinition(nameof(ProxyAutomaticConfigurationUrl), typeof(string));


        /// <summary>
        /// PreSharedKey
        /// </summary>
        public static PropertyDefinition PreSharedKey = new PropertyDefinition(nameof(PreSharedKey), typeof(string));

    }


    /// <summary>
    /// IosEnterpriseWiFiConfigurationObjectSchema
    /// </summary>
    public class IosEnterpriseWiFiConfigurationObjectSchema : IosWiFiConfigurationObjectSchema
    {

        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(EapType));


        /// <summary>
        /// EapFastConfiguration
        /// </summary>
        public static PropertyDefinition EapFastConfiguration = new PropertyDefinition(nameof(EapFastConfiguration), typeof(EapFastConfiguration));


        /// <summary>
        /// TrustedServerCertificateNames
        /// </summary>
        public static PropertyDefinition TrustedServerCertificateNames = new PropertyDefinition(nameof(TrustedServerCertificateNames), typeof(IList<String>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEapTtls
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEapTtls = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEapTtls), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificatesForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificatesForServerValidation = new PropertyDefinition(nameof(RootCertificatesForServerValidation), typeof(IList<IosTrustedRootCertificate>));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(IosCertificateProfileBase));

    }


    /// <summary>
    /// MacOSCertificateProfileBaseObjectSchema
    /// </summary>
    public class MacOSCertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(AppleSubjectNameFormat));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));

    }


    /// <summary>
    /// MacOSImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class MacOSImportedPFXCertificateProfileObjectSchema : MacOSCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// MacOSScepCertificateProfileObjectSchema
    /// </summary>
    public class MacOSScepCertificateProfileObjectSchema : MacOSCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateStore
        /// </summary>
        public static PropertyDefinition CertificateStore = new PropertyDefinition(nameof(CertificateStore), typeof(CertificateStore));


        /// <summary>
        /// CustomSubjectAlternativeNames
        /// </summary>
        public static PropertyDefinition CustomSubjectAlternativeNames = new PropertyDefinition(nameof(CustomSubjectAlternativeNames), typeof(IList<CustomSubjectAlternativeName>));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(MacOSTrustedRootCertificate));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// MacOSTrustedRootCertificateObjectSchema
    /// </summary>
    public class MacOSTrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// MacOSCustomConfigurationObjectSchema
    /// </summary>
    public class MacOSCustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PayloadName
        /// </summary>
        public static PropertyDefinition PayloadName = new PropertyDefinition(nameof(PayloadName), typeof(string));


        /// <summary>
        /// PayloadFileName
        /// </summary>
        public static PropertyDefinition PayloadFileName = new PropertyDefinition(nameof(PayloadFileName), typeof(string));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(string));

    }


    /// <summary>
    /// MacOSEndpointProtectionConfigurationObjectSchema
    /// </summary>
    public class MacOSEndpointProtectionConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// GatekeeperAllowedAppSource
        /// </summary>
        public static PropertyDefinition GatekeeperAllowedAppSource = new PropertyDefinition(nameof(GatekeeperAllowedAppSource), typeof(MacOSGatekeeperAppSources));


        /// <summary>
        /// GatekeeperBlockOverride
        /// </summary>
        public static PropertyDefinition GatekeeperBlockOverride = new PropertyDefinition(nameof(GatekeeperBlockOverride), typeof(bool));


        /// <summary>
        /// FirewallEnabled
        /// </summary>
        public static PropertyDefinition FirewallEnabled = new PropertyDefinition(nameof(FirewallEnabled), typeof(bool));


        /// <summary>
        /// FirewallBlockAllIncoming
        /// </summary>
        public static PropertyDefinition FirewallBlockAllIncoming = new PropertyDefinition(nameof(FirewallBlockAllIncoming), typeof(bool));


        /// <summary>
        /// FirewallEnableStealthMode
        /// </summary>
        public static PropertyDefinition FirewallEnableStealthMode = new PropertyDefinition(nameof(FirewallEnableStealthMode), typeof(bool));


        /// <summary>
        /// FirewallApplications
        /// </summary>
        public static PropertyDefinition FirewallApplications = new PropertyDefinition(nameof(FirewallApplications), typeof(IList<MacOSFirewallApplication>));

    }


    /// <summary>
    /// MacOSGeneralDeviceConfigurationObjectSchema
    /// </summary>
    public class MacOSGeneralDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// CompliantAppsList
        /// </summary>
        public static PropertyDefinition CompliantAppsList = new PropertyDefinition(nameof(CompliantAppsList), typeof(IList<AppListItem>));


        /// <summary>
        /// CompliantAppListType
        /// </summary>
        public static PropertyDefinition CompliantAppListType = new PropertyDefinition(nameof(CompliantAppListType), typeof(AppListType));


        /// <summary>
        /// EmailInDomainSuffixes
        /// </summary>
        public static PropertyDefinition EmailInDomainSuffixes = new PropertyDefinition(nameof(EmailInDomainSuffixes), typeof(IList<String>));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// KeychainBlockCloudSync
        /// </summary>
        public static PropertyDefinition KeychainBlockCloudSync = new PropertyDefinition(nameof(KeychainBlockCloudSync), typeof(bool));


        /// <summary>
        /// AirPrintBlocked
        /// </summary>
        public static PropertyDefinition AirPrintBlocked = new PropertyDefinition(nameof(AirPrintBlocked), typeof(bool));


        /// <summary>
        /// AirPrintForceTrustedTLS
        /// </summary>
        public static PropertyDefinition AirPrintForceTrustedTLS = new PropertyDefinition(nameof(AirPrintForceTrustedTLS), typeof(bool));


        /// <summary>
        /// AirPrintBlockiBeaconDiscovery
        /// </summary>
        public static PropertyDefinition AirPrintBlockiBeaconDiscovery = new PropertyDefinition(nameof(AirPrintBlockiBeaconDiscovery), typeof(bool));


        /// <summary>
        /// SafariBlockAutofill
        /// </summary>
        public static PropertyDefinition SafariBlockAutofill = new PropertyDefinition(nameof(SafariBlockAutofill), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// ITunesBlockMusicService
        /// </summary>
        public static PropertyDefinition ITunesBlockMusicService = new PropertyDefinition(nameof(ITunesBlockMusicService), typeof(bool));


        /// <summary>
        /// SpotlightBlockInternetResults
        /// </summary>
        public static PropertyDefinition SpotlightBlockInternetResults = new PropertyDefinition(nameof(SpotlightBlockInternetResults), typeof(bool));


        /// <summary>
        /// KeyboardBlockDictation
        /// </summary>
        public static PropertyDefinition KeyboardBlockDictation = new PropertyDefinition(nameof(KeyboardBlockDictation), typeof(bool));


        /// <summary>
        /// DefinitionLookupBlocked
        /// </summary>
        public static PropertyDefinition DefinitionLookupBlocked = new PropertyDefinition(nameof(DefinitionLookupBlocked), typeof(bool));


        /// <summary>
        /// AppleWatchBlockAutoUnlock
        /// </summary>
        public static PropertyDefinition AppleWatchBlockAutoUnlock = new PropertyDefinition(nameof(AppleWatchBlockAutoUnlock), typeof(bool));


        /// <summary>
        /// ITunesBlockFileSharing
        /// </summary>
        public static PropertyDefinition ITunesBlockFileSharing = new PropertyDefinition(nameof(ITunesBlockFileSharing), typeof(bool));


        /// <summary>
        /// ICloudBlockDocumentSync
        /// </summary>
        public static PropertyDefinition ICloudBlockDocumentSync = new PropertyDefinition(nameof(ICloudBlockDocumentSync), typeof(bool));


        /// <summary>
        /// ICloudBlockMail
        /// </summary>
        public static PropertyDefinition ICloudBlockMail = new PropertyDefinition(nameof(ICloudBlockMail), typeof(bool));


        /// <summary>
        /// ICloudBlockAddressBook
        /// </summary>
        public static PropertyDefinition ICloudBlockAddressBook = new PropertyDefinition(nameof(ICloudBlockAddressBook), typeof(bool));


        /// <summary>
        /// ICloudBlockCalendar
        /// </summary>
        public static PropertyDefinition ICloudBlockCalendar = new PropertyDefinition(nameof(ICloudBlockCalendar), typeof(bool));


        /// <summary>
        /// ICloudBlockReminders
        /// </summary>
        public static PropertyDefinition ICloudBlockReminders = new PropertyDefinition(nameof(ICloudBlockReminders), typeof(bool));


        /// <summary>
        /// ICloudBlockBookmarks
        /// </summary>
        public static PropertyDefinition ICloudBlockBookmarks = new PropertyDefinition(nameof(ICloudBlockBookmarks), typeof(bool));


        /// <summary>
        /// ICloudBlockNotes
        /// </summary>
        public static PropertyDefinition ICloudBlockNotes = new PropertyDefinition(nameof(ICloudBlockNotes), typeof(bool));


        /// <summary>
        /// AirDropBlocked
        /// </summary>
        public static PropertyDefinition AirDropBlocked = new PropertyDefinition(nameof(AirDropBlocked), typeof(bool));


        /// <summary>
        /// PasswordBlockModification
        /// </summary>
        public static PropertyDefinition PasswordBlockModification = new PropertyDefinition(nameof(PasswordBlockModification), typeof(bool));


        /// <summary>
        /// PasswordBlockFingerprintUnlock
        /// </summary>
        public static PropertyDefinition PasswordBlockFingerprintUnlock = new PropertyDefinition(nameof(PasswordBlockFingerprintUnlock), typeof(bool));


        /// <summary>
        /// PasswordBlockAutoFill
        /// </summary>
        public static PropertyDefinition PasswordBlockAutoFill = new PropertyDefinition(nameof(PasswordBlockAutoFill), typeof(bool));


        /// <summary>
        /// PasswordBlockProximityRequests
        /// </summary>
        public static PropertyDefinition PasswordBlockProximityRequests = new PropertyDefinition(nameof(PasswordBlockProximityRequests), typeof(bool));


        /// <summary>
        /// PasswordBlockAirDropSharing
        /// </summary>
        public static PropertyDefinition PasswordBlockAirDropSharing = new PropertyDefinition(nameof(PasswordBlockAirDropSharing), typeof(bool));

    }


    /// <summary>
    /// MacOSWiFiConfigurationObjectSchema
    /// </summary>
    public class MacOSWiFiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// WiFiSecurityType
        /// </summary>
        public static PropertyDefinition WiFiSecurityType = new PropertyDefinition(nameof(WiFiSecurityType), typeof(WiFiSecurityType));


        /// <summary>
        /// ProxySettings
        /// </summary>
        public static PropertyDefinition ProxySettings = new PropertyDefinition(nameof(ProxySettings), typeof(WiFiProxySetting));


        /// <summary>
        /// ProxyManualAddress
        /// </summary>
        public static PropertyDefinition ProxyManualAddress = new PropertyDefinition(nameof(ProxyManualAddress), typeof(string));


        /// <summary>
        /// ProxyManualPort
        /// </summary>
        public static PropertyDefinition ProxyManualPort = new PropertyDefinition(nameof(ProxyManualPort), typeof(int));


        /// <summary>
        /// ProxyAutomaticConfigurationUrl
        /// </summary>
        public static PropertyDefinition ProxyAutomaticConfigurationUrl = new PropertyDefinition(nameof(ProxyAutomaticConfigurationUrl), typeof(string));


        /// <summary>
        /// PreSharedKey
        /// </summary>
        public static PropertyDefinition PreSharedKey = new PropertyDefinition(nameof(PreSharedKey), typeof(string));

    }


    /// <summary>
    /// MacOSEnterpriseWiFiConfigurationObjectSchema
    /// </summary>
    public class MacOSEnterpriseWiFiConfigurationObjectSchema : MacOSWiFiConfigurationObjectSchema
    {

        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(EapType));


        /// <summary>
        /// EapFastConfiguration
        /// </summary>
        public static PropertyDefinition EapFastConfiguration = new PropertyDefinition(nameof(EapFastConfiguration), typeof(EapFastConfiguration));


        /// <summary>
        /// TrustedServerCertificateNames
        /// </summary>
        public static PropertyDefinition TrustedServerCertificateNames = new PropertyDefinition(nameof(TrustedServerCertificateNames), typeof(IList<String>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEapTtls
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEapTtls = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEapTtls), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificateForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificateForServerValidation = new PropertyDefinition(nameof(RootCertificateForServerValidation), typeof(MacOSTrustedRootCertificate));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(MacOSCertificateProfileBase));

    }


    /// <summary>
    /// UnsupportedDeviceConfigurationObjectSchema
    /// </summary>
    public class UnsupportedDeviceConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OriginalEntityTypeName
        /// </summary>
        public static PropertyDefinition OriginalEntityTypeName = new PropertyDefinition(nameof(OriginalEntityTypeName), typeof(string));


        /// <summary>
        /// Details
        /// </summary>
        public static PropertyDefinition Details = new PropertyDefinition(nameof(Details), typeof(IList<UnsupportedDeviceConfigurationDetail>));

    }


    /// <summary>
    /// EasEmailProfileConfigurationBaseObjectSchema
    /// </summary>
    public class EasEmailProfileConfigurationBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// UsernameSource
        /// </summary>
        public static PropertyDefinition UsernameSource = new PropertyDefinition(nameof(UsernameSource), typeof(UserEmailSource));


        /// <summary>
        /// UsernameAADSource
        /// </summary>
        public static PropertyDefinition UsernameAADSource = new PropertyDefinition(nameof(UsernameAADSource), typeof(UsernameSource));


        /// <summary>
        /// UserDomainNameSource
        /// </summary>
        public static PropertyDefinition UserDomainNameSource = new PropertyDefinition(nameof(UserDomainNameSource), typeof(DomainNameSource));


        /// <summary>
        /// CustomDomainName
        /// </summary>
        public static PropertyDefinition CustomDomainName = new PropertyDefinition(nameof(CustomDomainName), typeof(string));

    }


    /// <summary>
    /// IosEasEmailProfileConfigurationObjectSchema
    /// </summary>
    public class IosEasEmailProfileConfigurationObjectSchema : EasEmailProfileConfigurationBaseObjectSchema
    {

        /// <summary>
        /// AccountName
        /// </summary>
        public static PropertyDefinition AccountName = new PropertyDefinition(nameof(AccountName), typeof(string));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(EasAuthenticationMethod));


        /// <summary>
        /// BlockMovingMessagesToOtherEmailAccounts
        /// </summary>
        public static PropertyDefinition BlockMovingMessagesToOtherEmailAccounts = new PropertyDefinition(nameof(BlockMovingMessagesToOtherEmailAccounts), typeof(bool));


        /// <summary>
        /// BlockSendingEmailFromThirdPartyApps
        /// </summary>
        public static PropertyDefinition BlockSendingEmailFromThirdPartyApps = new PropertyDefinition(nameof(BlockSendingEmailFromThirdPartyApps), typeof(bool));


        /// <summary>
        /// BlockSyncingRecentlyUsedEmailAddresses
        /// </summary>
        public static PropertyDefinition BlockSyncingRecentlyUsedEmailAddresses = new PropertyDefinition(nameof(BlockSyncingRecentlyUsedEmailAddresses), typeof(bool));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSmime
        /// </summary>
        public static PropertyDefinition RequireSmime = new PropertyDefinition(nameof(RequireSmime), typeof(bool));


        /// <summary>
        /// SmimeEnablePerMessageSwitch
        /// </summary>
        public static PropertyDefinition SmimeEnablePerMessageSwitch = new PropertyDefinition(nameof(SmimeEnablePerMessageSwitch), typeof(bool));


        /// <summary>
        /// SmimeEncryptByDefaultEnabled
        /// </summary>
        public static PropertyDefinition SmimeEncryptByDefaultEnabled = new PropertyDefinition(nameof(SmimeEncryptByDefaultEnabled), typeof(bool));


        /// <summary>
        /// SmimeSigningEnabled
        /// </summary>
        public static PropertyDefinition SmimeSigningEnabled = new PropertyDefinition(nameof(SmimeSigningEnabled), typeof(bool));


        /// <summary>
        /// SmimeSigningUserOverrideEnabled
        /// </summary>
        public static PropertyDefinition SmimeSigningUserOverrideEnabled = new PropertyDefinition(nameof(SmimeSigningUserOverrideEnabled), typeof(bool));


        /// <summary>
        /// SmimeEncryptByDefaultUserOverrideEnabled
        /// </summary>
        public static PropertyDefinition SmimeEncryptByDefaultUserOverrideEnabled = new PropertyDefinition(nameof(SmimeEncryptByDefaultUserOverrideEnabled), typeof(bool));


        /// <summary>
        /// SmimeSigningCertificateUserOverrideEnabled
        /// </summary>
        public static PropertyDefinition SmimeSigningCertificateUserOverrideEnabled = new PropertyDefinition(nameof(SmimeSigningCertificateUserOverrideEnabled), typeof(bool));


        /// <summary>
        /// SmimeEncryptionCertificateUserOverrideEnabled
        /// </summary>
        public static PropertyDefinition SmimeEncryptionCertificateUserOverrideEnabled = new PropertyDefinition(nameof(SmimeEncryptionCertificateUserOverrideEnabled), typeof(bool));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));


        /// <summary>
        /// UseOAuth
        /// </summary>
        public static PropertyDefinition UseOAuth = new PropertyDefinition(nameof(UseOAuth), typeof(bool));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(IosCertificateProfileBase));


        /// <summary>
        /// SmimeSigningCertificate
        /// </summary>
        public static PropertyDefinition SmimeSigningCertificate = new PropertyDefinition(nameof(SmimeSigningCertificate), typeof(IosCertificateProfile));


        /// <summary>
        /// SmimeEncryptionCertificate
        /// </summary>
        public static PropertyDefinition SmimeEncryptionCertificate = new PropertyDefinition(nameof(SmimeEncryptionCertificate), typeof(IosCertificateProfile));

    }


    /// <summary>
    /// Windows10EasEmailProfileConfigurationObjectSchema
    /// </summary>
    public class Windows10EasEmailProfileConfigurationObjectSchema : EasEmailProfileConfigurationBaseObjectSchema
    {

        /// <summary>
        /// AccountName
        /// </summary>
        public static PropertyDefinition AccountName = new PropertyDefinition(nameof(AccountName), typeof(string));


        /// <summary>
        /// SyncCalendar
        /// </summary>
        public static PropertyDefinition SyncCalendar = new PropertyDefinition(nameof(SyncCalendar), typeof(bool));


        /// <summary>
        /// SyncContacts
        /// </summary>
        public static PropertyDefinition SyncContacts = new PropertyDefinition(nameof(SyncContacts), typeof(bool));


        /// <summary>
        /// SyncTasks
        /// </summary>
        public static PropertyDefinition SyncTasks = new PropertyDefinition(nameof(SyncTasks), typeof(bool));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// EmailSyncSchedule
        /// </summary>
        public static PropertyDefinition EmailSyncSchedule = new PropertyDefinition(nameof(EmailSyncSchedule), typeof(EmailSyncSchedule));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));

    }


    /// <summary>
    /// WindowsPhoneEASEmailProfileConfigurationObjectSchema
    /// </summary>
    public class WindowsPhoneEASEmailProfileConfigurationObjectSchema : EasEmailProfileConfigurationBaseObjectSchema
    {

        /// <summary>
        /// AccountName
        /// </summary>
        public static PropertyDefinition AccountName = new PropertyDefinition(nameof(AccountName), typeof(string));


        /// <summary>
        /// ApplyOnlyToWindowsPhone81
        /// </summary>
        public static PropertyDefinition ApplyOnlyToWindowsPhone81 = new PropertyDefinition(nameof(ApplyOnlyToWindowsPhone81), typeof(bool));


        /// <summary>
        /// SyncCalendar
        /// </summary>
        public static PropertyDefinition SyncCalendar = new PropertyDefinition(nameof(SyncCalendar), typeof(bool));


        /// <summary>
        /// SyncContacts
        /// </summary>
        public static PropertyDefinition SyncContacts = new PropertyDefinition(nameof(SyncContacts), typeof(bool));


        /// <summary>
        /// SyncTasks
        /// </summary>
        public static PropertyDefinition SyncTasks = new PropertyDefinition(nameof(SyncTasks), typeof(bool));


        /// <summary>
        /// DurationOfEmailToSync
        /// </summary>
        public static PropertyDefinition DurationOfEmailToSync = new PropertyDefinition(nameof(DurationOfEmailToSync), typeof(EmailSyncDuration));


        /// <summary>
        /// EmailAddressSource
        /// </summary>
        public static PropertyDefinition EmailAddressSource = new PropertyDefinition(nameof(EmailAddressSource), typeof(UserEmailSource));


        /// <summary>
        /// EmailSyncSchedule
        /// </summary>
        public static PropertyDefinition EmailSyncSchedule = new PropertyDefinition(nameof(EmailSyncSchedule), typeof(EmailSyncSchedule));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// RequireSsl
        /// </summary>
        public static PropertyDefinition RequireSsl = new PropertyDefinition(nameof(RequireSsl), typeof(bool));

    }


    /// <summary>
    /// AppleDeviceFeaturesConfigurationBaseObjectSchema
    /// </summary>
    public class AppleDeviceFeaturesConfigurationBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AirPrintDestinations
        /// </summary>
        public static PropertyDefinition AirPrintDestinations = new PropertyDefinition(nameof(AirPrintDestinations), typeof(IList<AirPrintDestination>));

    }


    /// <summary>
    /// IosDeviceFeaturesConfigurationObjectSchema
    /// </summary>
    public class IosDeviceFeaturesConfigurationObjectSchema : AppleDeviceFeaturesConfigurationBaseObjectSchema
    {

        /// <summary>
        /// AssetTagTemplate
        /// </summary>
        public static PropertyDefinition AssetTagTemplate = new PropertyDefinition(nameof(AssetTagTemplate), typeof(string));


        /// <summary>
        /// ContentFilterSettings
        /// </summary>
        public static PropertyDefinition ContentFilterSettings = new PropertyDefinition(nameof(ContentFilterSettings), typeof(IosWebContentFilterBase));


        /// <summary>
        /// LockScreenFootnote
        /// </summary>
        public static PropertyDefinition LockScreenFootnote = new PropertyDefinition(nameof(LockScreenFootnote), typeof(string));


        /// <summary>
        /// HomeScreenDockIcons
        /// </summary>
        public static PropertyDefinition HomeScreenDockIcons = new PropertyDefinition(nameof(HomeScreenDockIcons), typeof(IList<IosHomeScreenItem>));


        /// <summary>
        /// HomeScreenPages
        /// </summary>
        public static PropertyDefinition HomeScreenPages = new PropertyDefinition(nameof(HomeScreenPages), typeof(IList<IosHomeScreenPage>));


        /// <summary>
        /// NotificationSettings
        /// </summary>
        public static PropertyDefinition NotificationSettings = new PropertyDefinition(nameof(NotificationSettings), typeof(IList<IosNotificationSettings>));


        /// <summary>
        /// SingleSignOnSettings
        /// </summary>
        public static PropertyDefinition SingleSignOnSettings = new PropertyDefinition(nameof(SingleSignOnSettings), typeof(IosSingleSignOnSettings));


        /// <summary>
        /// WallpaperDisplayLocation
        /// </summary>
        public static PropertyDefinition WallpaperDisplayLocation = new PropertyDefinition(nameof(WallpaperDisplayLocation), typeof(IosWallpaperDisplayLocation));


        /// <summary>
        /// WallpaperImage
        /// </summary>
        public static PropertyDefinition WallpaperImage = new PropertyDefinition(nameof(WallpaperImage), typeof(MimeContent));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(IosCertificateProfileBase));

    }


    /// <summary>
    /// MacOSDeviceFeaturesConfigurationObjectSchema
    /// </summary>
    public class MacOSDeviceFeaturesConfigurationObjectSchema : AppleDeviceFeaturesConfigurationBaseObjectSchema
    {
    }


    /// <summary>
    /// AppleVpnConfigurationObjectSchema
    /// </summary>
    public class AppleVpnConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ConnectionName
        /// </summary>
        public static PropertyDefinition ConnectionName = new PropertyDefinition(nameof(ConnectionName), typeof(string));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(AppleVpnConnectionType));


        /// <summary>
        /// LoginGroupOrDomain
        /// </summary>
        public static PropertyDefinition LoginGroupOrDomain = new PropertyDefinition(nameof(LoginGroupOrDomain), typeof(string));


        /// <summary>
        /// Role
        /// </summary>
        public static PropertyDefinition Role = new PropertyDefinition(nameof(Role), typeof(string));


        /// <summary>
        /// Realm
        /// </summary>
        public static PropertyDefinition Realm = new PropertyDefinition(nameof(Realm), typeof(string));


        /// <summary>
        /// Server
        /// </summary>
        public static PropertyDefinition Server = new PropertyDefinition(nameof(Server), typeof(VpnServer));


        /// <summary>
        /// Identifier
        /// </summary>
        public static PropertyDefinition Identifier = new PropertyDefinition(nameof(Identifier), typeof(string));


        /// <summary>
        /// CustomData
        /// </summary>
        public static PropertyDefinition CustomData = new PropertyDefinition(nameof(CustomData), typeof(IList<KeyValue>));


        /// <summary>
        /// CustomKeyValueData
        /// </summary>
        public static PropertyDefinition CustomKeyValueData = new PropertyDefinition(nameof(CustomKeyValueData), typeof(IList<KeyValuePair>));


        /// <summary>
        /// EnableSplitTunneling
        /// </summary>
        public static PropertyDefinition EnableSplitTunneling = new PropertyDefinition(nameof(EnableSplitTunneling), typeof(bool));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(VpnAuthenticationMethod));


        /// <summary>
        /// EnablePerApp
        /// </summary>
        public static PropertyDefinition EnablePerApp = new PropertyDefinition(nameof(EnablePerApp), typeof(bool));


        /// <summary>
        /// SafariDomains
        /// </summary>
        public static PropertyDefinition SafariDomains = new PropertyDefinition(nameof(SafariDomains), typeof(IList<String>));


        /// <summary>
        /// OnDemandRules
        /// </summary>
        public static PropertyDefinition OnDemandRules = new PropertyDefinition(nameof(OnDemandRules), typeof(IList<VpnOnDemandRule>));


        /// <summary>
        /// ProxyServer
        /// </summary>
        public static PropertyDefinition ProxyServer = new PropertyDefinition(nameof(ProxyServer), typeof(VpnProxyServer));


        /// <summary>
        /// OptInToDeviceIdSharing
        /// </summary>
        public static PropertyDefinition OptInToDeviceIdSharing = new PropertyDefinition(nameof(OptInToDeviceIdSharing), typeof(bool));

    }


    /// <summary>
    /// IosVpnConfigurationObjectSchema
    /// </summary>
    public class IosVpnConfigurationObjectSchema : AppleVpnConfigurationObjectSchema
    {

        /// <summary>
        /// ProviderType
        /// </summary>
        public static PropertyDefinition ProviderType = new PropertyDefinition(nameof(ProviderType), typeof(VpnProviderType));


        /// <summary>
        /// UserDomain
        /// </summary>
        public static PropertyDefinition UserDomain = new PropertyDefinition(nameof(UserDomain), typeof(string));


        /// <summary>
        /// StrictEnforcement
        /// </summary>
        public static PropertyDefinition StrictEnforcement = new PropertyDefinition(nameof(StrictEnforcement), typeof(bool));


        /// <summary>
        /// CloudName
        /// </summary>
        public static PropertyDefinition CloudName = new PropertyDefinition(nameof(CloudName), typeof(string));


        /// <summary>
        /// ExcludeList
        /// </summary>
        public static PropertyDefinition ExcludeList = new PropertyDefinition(nameof(ExcludeList), typeof(IList<String>));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(IosCertificateProfileBase));

    }


    /// <summary>
    /// MacOSVpnConfigurationObjectSchema
    /// </summary>
    public class MacOSVpnConfigurationObjectSchema : AppleVpnConfigurationObjectSchema
    {

        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(MacOSCertificateProfileBase));

    }


    /// <summary>
    /// Windows10EndpointProtectionConfigurationObjectSchema
    /// </summary>
    public class Windows10EndpointProtectionConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// DmaGuardDeviceEnumerationPolicy
        /// </summary>
        public static PropertyDefinition DmaGuardDeviceEnumerationPolicy = new PropertyDefinition(nameof(DmaGuardDeviceEnumerationPolicy), typeof(DmaGuardDeviceEnumerationPolicyType));


        /// <summary>
        /// UserRightsAccessCredentialManagerAsTrustedCaller
        /// </summary>
        public static PropertyDefinition UserRightsAccessCredentialManagerAsTrustedCaller = new PropertyDefinition(nameof(UserRightsAccessCredentialManagerAsTrustedCaller), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsAllowAccessFromNetwork
        /// </summary>
        public static PropertyDefinition UserRightsAllowAccessFromNetwork = new PropertyDefinition(nameof(UserRightsAllowAccessFromNetwork), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsBlockAccessFromNetwork
        /// </summary>
        public static PropertyDefinition UserRightsBlockAccessFromNetwork = new PropertyDefinition(nameof(UserRightsBlockAccessFromNetwork), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsActAsPartOfTheOperatingSystem
        /// </summary>
        public static PropertyDefinition UserRightsActAsPartOfTheOperatingSystem = new PropertyDefinition(nameof(UserRightsActAsPartOfTheOperatingSystem), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsLocalLogOn
        /// </summary>
        public static PropertyDefinition UserRightsLocalLogOn = new PropertyDefinition(nameof(UserRightsLocalLogOn), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsBackupData
        /// </summary>
        public static PropertyDefinition UserRightsBackupData = new PropertyDefinition(nameof(UserRightsBackupData), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsChangeSystemTime
        /// </summary>
        public static PropertyDefinition UserRightsChangeSystemTime = new PropertyDefinition(nameof(UserRightsChangeSystemTime), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsCreateGlobalObjects
        /// </summary>
        public static PropertyDefinition UserRightsCreateGlobalObjects = new PropertyDefinition(nameof(UserRightsCreateGlobalObjects), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsCreatePageFile
        /// </summary>
        public static PropertyDefinition UserRightsCreatePageFile = new PropertyDefinition(nameof(UserRightsCreatePageFile), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsCreatePermanentSharedObjects
        /// </summary>
        public static PropertyDefinition UserRightsCreatePermanentSharedObjects = new PropertyDefinition(nameof(UserRightsCreatePermanentSharedObjects), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsCreateSymbolicLinks
        /// </summary>
        public static PropertyDefinition UserRightsCreateSymbolicLinks = new PropertyDefinition(nameof(UserRightsCreateSymbolicLinks), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsCreateToken
        /// </summary>
        public static PropertyDefinition UserRightsCreateToken = new PropertyDefinition(nameof(UserRightsCreateToken), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsDebugPrograms
        /// </summary>
        public static PropertyDefinition UserRightsDebugPrograms = new PropertyDefinition(nameof(UserRightsDebugPrograms), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsRemoteDesktopServicesLogOn
        /// </summary>
        public static PropertyDefinition UserRightsRemoteDesktopServicesLogOn = new PropertyDefinition(nameof(UserRightsRemoteDesktopServicesLogOn), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsDelegation
        /// </summary>
        public static PropertyDefinition UserRightsDelegation = new PropertyDefinition(nameof(UserRightsDelegation), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsGenerateSecurityAudits
        /// </summary>
        public static PropertyDefinition UserRightsGenerateSecurityAudits = new PropertyDefinition(nameof(UserRightsGenerateSecurityAudits), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsImpersonateClient
        /// </summary>
        public static PropertyDefinition UserRightsImpersonateClient = new PropertyDefinition(nameof(UserRightsImpersonateClient), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsIncreaseSchedulingPriority
        /// </summary>
        public static PropertyDefinition UserRightsIncreaseSchedulingPriority = new PropertyDefinition(nameof(UserRightsIncreaseSchedulingPriority), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsLoadUnloadDrivers
        /// </summary>
        public static PropertyDefinition UserRightsLoadUnloadDrivers = new PropertyDefinition(nameof(UserRightsLoadUnloadDrivers), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsLockMemory
        /// </summary>
        public static PropertyDefinition UserRightsLockMemory = new PropertyDefinition(nameof(UserRightsLockMemory), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsManageAuditingAndSecurityLogs
        /// </summary>
        public static PropertyDefinition UserRightsManageAuditingAndSecurityLogs = new PropertyDefinition(nameof(UserRightsManageAuditingAndSecurityLogs), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsManageVolumes
        /// </summary>
        public static PropertyDefinition UserRightsManageVolumes = new PropertyDefinition(nameof(UserRightsManageVolumes), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsModifyFirmwareEnvironment
        /// </summary>
        public static PropertyDefinition UserRightsModifyFirmwareEnvironment = new PropertyDefinition(nameof(UserRightsModifyFirmwareEnvironment), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsModifyObjectLabels
        /// </summary>
        public static PropertyDefinition UserRightsModifyObjectLabels = new PropertyDefinition(nameof(UserRightsModifyObjectLabels), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsProfileSingleProcess
        /// </summary>
        public static PropertyDefinition UserRightsProfileSingleProcess = new PropertyDefinition(nameof(UserRightsProfileSingleProcess), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsRemoteShutdown
        /// </summary>
        public static PropertyDefinition UserRightsRemoteShutdown = new PropertyDefinition(nameof(UserRightsRemoteShutdown), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsRestoreData
        /// </summary>
        public static PropertyDefinition UserRightsRestoreData = new PropertyDefinition(nameof(UserRightsRestoreData), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsTakeOwnership
        /// </summary>
        public static PropertyDefinition UserRightsTakeOwnership = new PropertyDefinition(nameof(UserRightsTakeOwnership), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// UserRightsRegisterProcessAsService
        /// </summary>
        public static PropertyDefinition UserRightsRegisterProcessAsService = new PropertyDefinition(nameof(UserRightsRegisterProcessAsService), typeof(DeviceManagementUserRightsSetting));


        /// <summary>
        /// XboxServicesEnableXboxGameSaveTask
        /// </summary>
        public static PropertyDefinition XboxServicesEnableXboxGameSaveTask = new PropertyDefinition(nameof(XboxServicesEnableXboxGameSaveTask), typeof(bool));


        /// <summary>
        /// XboxServicesAccessoryManagementServiceStartupMode
        /// </summary>
        public static PropertyDefinition XboxServicesAccessoryManagementServiceStartupMode = new PropertyDefinition(nameof(XboxServicesAccessoryManagementServiceStartupMode), typeof(ServiceStartType));


        /// <summary>
        /// XboxServicesLiveAuthManagerServiceStartupMode
        /// </summary>
        public static PropertyDefinition XboxServicesLiveAuthManagerServiceStartupMode = new PropertyDefinition(nameof(XboxServicesLiveAuthManagerServiceStartupMode), typeof(ServiceStartType));


        /// <summary>
        /// XboxServicesLiveGameSaveServiceStartupMode
        /// </summary>
        public static PropertyDefinition XboxServicesLiveGameSaveServiceStartupMode = new PropertyDefinition(nameof(XboxServicesLiveGameSaveServiceStartupMode), typeof(ServiceStartType));


        /// <summary>
        /// XboxServicesLiveNetworkingServiceStartupMode
        /// </summary>
        public static PropertyDefinition XboxServicesLiveNetworkingServiceStartupMode = new PropertyDefinition(nameof(XboxServicesLiveNetworkingServiceStartupMode), typeof(ServiceStartType));


        /// <summary>
        /// LocalSecurityOptionsBlockMicrosoftAccounts
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsBlockMicrosoftAccounts = new PropertyDefinition(nameof(LocalSecurityOptionsBlockMicrosoftAccounts), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsBlockRemoteLogonWithBlankPassword
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsBlockRemoteLogonWithBlankPassword = new PropertyDefinition(nameof(LocalSecurityOptionsBlockRemoteLogonWithBlankPassword), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDisableAdministratorAccount
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDisableAdministratorAccount = new PropertyDefinition(nameof(LocalSecurityOptionsDisableAdministratorAccount), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAdministratorAccountName
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAdministratorAccountName = new PropertyDefinition(nameof(LocalSecurityOptionsAdministratorAccountName), typeof(string));


        /// <summary>
        /// LocalSecurityOptionsDisableGuestAccount
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDisableGuestAccount = new PropertyDefinition(nameof(LocalSecurityOptionsDisableGuestAccount), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsGuestAccountName
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsGuestAccountName = new PropertyDefinition(nameof(LocalSecurityOptionsGuestAccountName), typeof(string));


        /// <summary>
        /// LocalSecurityOptionsAllowUndockWithoutHavingToLogon
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowUndockWithoutHavingToLogon = new PropertyDefinition(nameof(LocalSecurityOptionsAllowUndockWithoutHavingToLogon), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsBlockUsersInstallingPrinterDrivers
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsBlockUsersInstallingPrinterDrivers = new PropertyDefinition(nameof(LocalSecurityOptionsBlockUsersInstallingPrinterDrivers), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsBlockRemoteOpticalDriveAccess
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsBlockRemoteOpticalDriveAccess = new PropertyDefinition(nameof(LocalSecurityOptionsBlockRemoteOpticalDriveAccess), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser = new PropertyDefinition(nameof(LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUser), typeof(LocalSecurityOptionsFormatAndEjectOfRemovableMediaAllowedUserType));


        /// <summary>
        /// LocalSecurityOptionsMachineInactivityLimit
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsMachineInactivityLimit = new PropertyDefinition(nameof(LocalSecurityOptionsMachineInactivityLimit), typeof(int));


        /// <summary>
        /// LocalSecurityOptionsMachineInactivityLimitInMinutes
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsMachineInactivityLimitInMinutes = new PropertyDefinition(nameof(LocalSecurityOptionsMachineInactivityLimitInMinutes), typeof(int));


        /// <summary>
        /// LocalSecurityOptionsDoNotRequireCtrlAltDel
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDoNotRequireCtrlAltDel = new PropertyDefinition(nameof(LocalSecurityOptionsDoNotRequireCtrlAltDel), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsHideLastSignedInUser
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsHideLastSignedInUser = new PropertyDefinition(nameof(LocalSecurityOptionsHideLastSignedInUser), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsHideUsernameAtSignIn
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsHideUsernameAtSignIn = new PropertyDefinition(nameof(LocalSecurityOptionsHideUsernameAtSignIn), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsLogOnMessageTitle
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsLogOnMessageTitle = new PropertyDefinition(nameof(LocalSecurityOptionsLogOnMessageTitle), typeof(string));


        /// <summary>
        /// LocalSecurityOptionsLogOnMessageText
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsLogOnMessageText = new PropertyDefinition(nameof(LocalSecurityOptionsLogOnMessageText), typeof(string));


        /// <summary>
        /// LocalSecurityOptionsAllowPKU2UAuthenticationRequests
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowPKU2UAuthenticationRequests = new PropertyDefinition(nameof(LocalSecurityOptionsAllowPKU2UAuthenticationRequests), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool = new PropertyDefinition(nameof(LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManagerHelperBool), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManager
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManager = new PropertyDefinition(nameof(LocalSecurityOptionsAllowRemoteCallsToSecurityAccountsManager), typeof(string));


        /// <summary>
        /// LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients = new PropertyDefinition(nameof(LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedClients), typeof(LocalSecurityOptionsMinimumSessionSecurity));


        /// <summary>
        /// LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers = new PropertyDefinition(nameof(LocalSecurityOptionsMinimumSessionSecurityForNtlmSspBasedServers), typeof(LocalSecurityOptionsMinimumSessionSecurity));


        /// <summary>
        /// LanManagerAuthenticationLevel
        /// </summary>
        public static PropertyDefinition LanManagerAuthenticationLevel = new PropertyDefinition(nameof(LanManagerAuthenticationLevel), typeof(LanManagerAuthenticationLevel));


        /// <summary>
        /// LanManagerWorkstationDisableInsecureGuestLogons
        /// </summary>
        public static PropertyDefinition LanManagerWorkstationDisableInsecureGuestLogons = new PropertyDefinition(nameof(LanManagerWorkstationDisableInsecureGuestLogons), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsClearVirtualMemoryPageFile
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsClearVirtualMemoryPageFile = new PropertyDefinition(nameof(LocalSecurityOptionsClearVirtualMemoryPageFile), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn = new PropertyDefinition(nameof(LocalSecurityOptionsAllowSystemToBeShutDownWithoutHavingToLogOn), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowUIAccessApplicationElevation
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowUIAccessApplicationElevation = new PropertyDefinition(nameof(LocalSecurityOptionsAllowUIAccessApplicationElevation), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations = new PropertyDefinition(nameof(LocalSecurityOptionsVirtualizeFileAndRegistryWriteFailuresToPerUserLocations), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsOnlyElevateSignedExecutables
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsOnlyElevateSignedExecutables = new PropertyDefinition(nameof(LocalSecurityOptionsOnlyElevateSignedExecutables), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAdministratorElevationPromptBehavior
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAdministratorElevationPromptBehavior = new PropertyDefinition(nameof(LocalSecurityOptionsAdministratorElevationPromptBehavior), typeof(LocalSecurityOptionsAdministratorElevationPromptBehaviorType));


        /// <summary>
        /// LocalSecurityOptionsStandardUserElevationPromptBehavior
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsStandardUserElevationPromptBehavior = new PropertyDefinition(nameof(LocalSecurityOptionsStandardUserElevationPromptBehavior), typeof(LocalSecurityOptionsStandardUserElevationPromptBehaviorType));


        /// <summary>
        /// LocalSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation = new PropertyDefinition(nameof(LocalSecurityOptionsSwitchToSecureDesktopWhenPromptingForElevation), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDetectApplicationInstallationsAndPromptForElevation
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDetectApplicationInstallationsAndPromptForElevation = new PropertyDefinition(nameof(LocalSecurityOptionsDetectApplicationInstallationsAndPromptForElevation), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowUIAccessApplicationsForSecureLocations
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowUIAccessApplicationsForSecureLocations = new PropertyDefinition(nameof(LocalSecurityOptionsAllowUIAccessApplicationsForSecureLocations), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsUseAdminApprovalMode
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsUseAdminApprovalMode = new PropertyDefinition(nameof(LocalSecurityOptionsUseAdminApprovalMode), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsUseAdminApprovalModeForAdministrators
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsUseAdminApprovalModeForAdministrators = new PropertyDefinition(nameof(LocalSecurityOptionsUseAdminApprovalModeForAdministrators), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsInformationShownOnLockScreen
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsInformationShownOnLockScreen = new PropertyDefinition(nameof(LocalSecurityOptionsInformationShownOnLockScreen), typeof(LocalSecurityOptionsInformationShownOnLockScreenType));


        /// <summary>
        /// LocalSecurityOptionsInformationDisplayedOnLockScreen
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsInformationDisplayedOnLockScreen = new PropertyDefinition(nameof(LocalSecurityOptionsInformationDisplayedOnLockScreen), typeof(LocalSecurityOptionsInformationDisplayedOnLockScreenType));


        /// <summary>
        /// LocalSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees = new PropertyDefinition(nameof(LocalSecurityOptionsDisableClientDigitallySignCommunicationsIfServerAgrees), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsClientDigitallySignCommunicationsAlways
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsClientDigitallySignCommunicationsAlways = new PropertyDefinition(nameof(LocalSecurityOptionsClientDigitallySignCommunicationsAlways), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers = new PropertyDefinition(nameof(LocalSecurityOptionsClientSendUnencryptedPasswordToThirdPartySMBServers), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDisableServerDigitallySignCommunicationsAlways
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDisableServerDigitallySignCommunicationsAlways = new PropertyDefinition(nameof(LocalSecurityOptionsDisableServerDigitallySignCommunicationsAlways), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees = new PropertyDefinition(nameof(LocalSecurityOptionsDisableServerDigitallySignCommunicationsIfClientAgrees), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares = new PropertyDefinition(nameof(LocalSecurityOptionsRestrictAnonymousAccessToNamedPipesAndShares), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts = new PropertyDefinition(nameof(LocalSecurityOptionsDoNotAllowAnonymousEnumerationOfSAMAccounts), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares = new PropertyDefinition(nameof(LocalSecurityOptionsAllowAnonymousEnumerationOfSAMAccountsAndShares), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange = new PropertyDefinition(nameof(LocalSecurityOptionsDoNotStoreLANManagerHashValueOnNextPasswordChange), typeof(bool));


        /// <summary>
        /// LocalSecurityOptionsSmartCardRemovalBehavior
        /// </summary>
        public static PropertyDefinition LocalSecurityOptionsSmartCardRemovalBehavior = new PropertyDefinition(nameof(LocalSecurityOptionsSmartCardRemovalBehavior), typeof(LocalSecurityOptionsSmartCardRemovalBehaviorType));


        /// <summary>
        /// DefenderSecurityCenterDisableAppBrowserUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableAppBrowserUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableAppBrowserUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableFamilyUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableFamilyUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableFamilyUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableHealthUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableHealthUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableHealthUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableNetworkUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableNetworkUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableNetworkUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableVirusUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableVirusUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableVirusUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableAccountUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableAccountUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableAccountUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableHardwareUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableHardwareUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableHardwareUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableRansomwareUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableRansomwareUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableRansomwareUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableSecureBootUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableSecureBootUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableSecureBootUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterDisableTroubleshootingUI
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterDisableTroubleshootingUI = new PropertyDefinition(nameof(DefenderSecurityCenterDisableTroubleshootingUI), typeof(bool));


        /// <summary>
        /// DefenderSecurityCenterOrganizationDisplayName
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterOrganizationDisplayName = new PropertyDefinition(nameof(DefenderSecurityCenterOrganizationDisplayName), typeof(string));


        /// <summary>
        /// DefenderSecurityCenterHelpEmail
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterHelpEmail = new PropertyDefinition(nameof(DefenderSecurityCenterHelpEmail), typeof(string));


        /// <summary>
        /// DefenderSecurityCenterHelpPhone
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterHelpPhone = new PropertyDefinition(nameof(DefenderSecurityCenterHelpPhone), typeof(string));


        /// <summary>
        /// DefenderSecurityCenterHelpURL
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterHelpURL = new PropertyDefinition(nameof(DefenderSecurityCenterHelpURL), typeof(string));


        /// <summary>
        /// DefenderSecurityCenterNotificationsFromApp
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterNotificationsFromApp = new PropertyDefinition(nameof(DefenderSecurityCenterNotificationsFromApp), typeof(DefenderSecurityCenterNotificationsFromAppType));


        /// <summary>
        /// DefenderSecurityCenterITContactDisplay
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterITContactDisplay = new PropertyDefinition(nameof(DefenderSecurityCenterITContactDisplay), typeof(DefenderSecurityCenterITContactDisplayType));


        /// <summary>
        /// FirewallBlockStatefulFTP
        /// </summary>
        public static PropertyDefinition FirewallBlockStatefulFTP = new PropertyDefinition(nameof(FirewallBlockStatefulFTP), typeof(bool));


        /// <summary>
        /// FirewallIdleTimeoutForSecurityAssociationInSeconds
        /// </summary>
        public static PropertyDefinition FirewallIdleTimeoutForSecurityAssociationInSeconds = new PropertyDefinition(nameof(FirewallIdleTimeoutForSecurityAssociationInSeconds), typeof(int));


        /// <summary>
        /// FirewallPreSharedKeyEncodingMethod
        /// </summary>
        public static PropertyDefinition FirewallPreSharedKeyEncodingMethod = new PropertyDefinition(nameof(FirewallPreSharedKeyEncodingMethod), typeof(FirewallPreSharedKeyEncodingMethodType));


        /// <summary>
        /// FirewallIPSecExemptionsAllowNeighborDiscovery
        /// </summary>
        public static PropertyDefinition FirewallIPSecExemptionsAllowNeighborDiscovery = new PropertyDefinition(nameof(FirewallIPSecExemptionsAllowNeighborDiscovery), typeof(bool));


        /// <summary>
        /// FirewallIPSecExemptionsAllowICMP
        /// </summary>
        public static PropertyDefinition FirewallIPSecExemptionsAllowICMP = new PropertyDefinition(nameof(FirewallIPSecExemptionsAllowICMP), typeof(bool));


        /// <summary>
        /// FirewallIPSecExemptionsAllowRouterDiscovery
        /// </summary>
        public static PropertyDefinition FirewallIPSecExemptionsAllowRouterDiscovery = new PropertyDefinition(nameof(FirewallIPSecExemptionsAllowRouterDiscovery), typeof(bool));


        /// <summary>
        /// FirewallIPSecExemptionsAllowDHCP
        /// </summary>
        public static PropertyDefinition FirewallIPSecExemptionsAllowDHCP = new PropertyDefinition(nameof(FirewallIPSecExemptionsAllowDHCP), typeof(bool));


        /// <summary>
        /// FirewallCertificateRevocationListCheckMethod
        /// </summary>
        public static PropertyDefinition FirewallCertificateRevocationListCheckMethod = new PropertyDefinition(nameof(FirewallCertificateRevocationListCheckMethod), typeof(FirewallCertificateRevocationListCheckMethodType));


        /// <summary>
        /// FirewallMergeKeyingModuleSettings
        /// </summary>
        public static PropertyDefinition FirewallMergeKeyingModuleSettings = new PropertyDefinition(nameof(FirewallMergeKeyingModuleSettings), typeof(bool));


        /// <summary>
        /// FirewallPacketQueueingMethod
        /// </summary>
        public static PropertyDefinition FirewallPacketQueueingMethod = new PropertyDefinition(nameof(FirewallPacketQueueingMethod), typeof(FirewallPacketQueueingMethodType));


        /// <summary>
        /// FirewallProfileDomain
        /// </summary>
        public static PropertyDefinition FirewallProfileDomain = new PropertyDefinition(nameof(FirewallProfileDomain), typeof(WindowsFirewallNetworkProfile));


        /// <summary>
        /// FirewallProfilePublic
        /// </summary>
        public static PropertyDefinition FirewallProfilePublic = new PropertyDefinition(nameof(FirewallProfilePublic), typeof(WindowsFirewallNetworkProfile));


        /// <summary>
        /// FirewallProfilePrivate
        /// </summary>
        public static PropertyDefinition FirewallProfilePrivate = new PropertyDefinition(nameof(FirewallProfilePrivate), typeof(WindowsFirewallNetworkProfile));


        /// <summary>
        /// DefenderAttackSurfaceReductionExcludedPaths
        /// </summary>
        public static PropertyDefinition DefenderAttackSurfaceReductionExcludedPaths = new PropertyDefinition(nameof(DefenderAttackSurfaceReductionExcludedPaths), typeof(IList<String>));


        /// <summary>
        /// DefenderOfficeAppsOtherProcessInjectionType
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsOtherProcessInjectionType = new PropertyDefinition(nameof(DefenderOfficeAppsOtherProcessInjectionType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderOfficeAppsOtherProcessInjection
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsOtherProcessInjection = new PropertyDefinition(nameof(DefenderOfficeAppsOtherProcessInjection), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderOfficeAppsExecutableContentCreationOrLaunchType
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsExecutableContentCreationOrLaunchType = new PropertyDefinition(nameof(DefenderOfficeAppsExecutableContentCreationOrLaunchType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderOfficeAppsExecutableContentCreationOrLaunch
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsExecutableContentCreationOrLaunch = new PropertyDefinition(nameof(DefenderOfficeAppsExecutableContentCreationOrLaunch), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderOfficeAppsLaunchChildProcessType
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsLaunchChildProcessType = new PropertyDefinition(nameof(DefenderOfficeAppsLaunchChildProcessType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderOfficeAppsLaunchChildProcess
        /// </summary>
        public static PropertyDefinition DefenderOfficeAppsLaunchChildProcess = new PropertyDefinition(nameof(DefenderOfficeAppsLaunchChildProcess), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderOfficeMacroCodeAllowWin32ImportsType
        /// </summary>
        public static PropertyDefinition DefenderOfficeMacroCodeAllowWin32ImportsType = new PropertyDefinition(nameof(DefenderOfficeMacroCodeAllowWin32ImportsType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderOfficeMacroCodeAllowWin32Imports
        /// </summary>
        public static PropertyDefinition DefenderOfficeMacroCodeAllowWin32Imports = new PropertyDefinition(nameof(DefenderOfficeMacroCodeAllowWin32Imports), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderScriptObfuscatedMacroCodeType
        /// </summary>
        public static PropertyDefinition DefenderScriptObfuscatedMacroCodeType = new PropertyDefinition(nameof(DefenderScriptObfuscatedMacroCodeType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderScriptObfuscatedMacroCode
        /// </summary>
        public static PropertyDefinition DefenderScriptObfuscatedMacroCode = new PropertyDefinition(nameof(DefenderScriptObfuscatedMacroCode), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderScriptDownloadedPayloadExecutionType
        /// </summary>
        public static PropertyDefinition DefenderScriptDownloadedPayloadExecutionType = new PropertyDefinition(nameof(DefenderScriptDownloadedPayloadExecutionType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderScriptDownloadedPayloadExecution
        /// </summary>
        public static PropertyDefinition DefenderScriptDownloadedPayloadExecution = new PropertyDefinition(nameof(DefenderScriptDownloadedPayloadExecution), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderPreventCredentialStealingType
        /// </summary>
        public static PropertyDefinition DefenderPreventCredentialStealingType = new PropertyDefinition(nameof(DefenderPreventCredentialStealingType), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderProcessCreationType
        /// </summary>
        public static PropertyDefinition DefenderProcessCreationType = new PropertyDefinition(nameof(DefenderProcessCreationType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderProcessCreation
        /// </summary>
        public static PropertyDefinition DefenderProcessCreation = new PropertyDefinition(nameof(DefenderProcessCreation), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderUntrustedUSBProcessType
        /// </summary>
        public static PropertyDefinition DefenderUntrustedUSBProcessType = new PropertyDefinition(nameof(DefenderUntrustedUSBProcessType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderUntrustedUSBProcess
        /// </summary>
        public static PropertyDefinition DefenderUntrustedUSBProcess = new PropertyDefinition(nameof(DefenderUntrustedUSBProcess), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderUntrustedExecutableType
        /// </summary>
        public static PropertyDefinition DefenderUntrustedExecutableType = new PropertyDefinition(nameof(DefenderUntrustedExecutableType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderUntrustedExecutable
        /// </summary>
        public static PropertyDefinition DefenderUntrustedExecutable = new PropertyDefinition(nameof(DefenderUntrustedExecutable), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderEmailContentExecutionType
        /// </summary>
        public static PropertyDefinition DefenderEmailContentExecutionType = new PropertyDefinition(nameof(DefenderEmailContentExecutionType), typeof(DefenderAttackSurfaceType));


        /// <summary>
        /// DefenderEmailContentExecution
        /// </summary>
        public static PropertyDefinition DefenderEmailContentExecution = new PropertyDefinition(nameof(DefenderEmailContentExecution), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderAdvancedRansomewareProtectionType
        /// </summary>
        public static PropertyDefinition DefenderAdvancedRansomewareProtectionType = new PropertyDefinition(nameof(DefenderAdvancedRansomewareProtectionType), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderGuardMyFoldersType
        /// </summary>
        public static PropertyDefinition DefenderGuardMyFoldersType = new PropertyDefinition(nameof(DefenderGuardMyFoldersType), typeof(FolderProtectionType));


        /// <summary>
        /// DefenderGuardedFoldersAllowedAppPaths
        /// </summary>
        public static PropertyDefinition DefenderGuardedFoldersAllowedAppPaths = new PropertyDefinition(nameof(DefenderGuardedFoldersAllowedAppPaths), typeof(IList<String>));


        /// <summary>
        /// DefenderAdditionalGuardedFolders
        /// </summary>
        public static PropertyDefinition DefenderAdditionalGuardedFolders = new PropertyDefinition(nameof(DefenderAdditionalGuardedFolders), typeof(IList<String>));


        /// <summary>
        /// DefenderNetworkProtectionType
        /// </summary>
        public static PropertyDefinition DefenderNetworkProtectionType = new PropertyDefinition(nameof(DefenderNetworkProtectionType), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderExploitProtectionXml
        /// </summary>
        public static PropertyDefinition DefenderExploitProtectionXml = new PropertyDefinition(nameof(DefenderExploitProtectionXml), typeof(string));


        /// <summary>
        /// DefenderExploitProtectionXmlFileName
        /// </summary>
        public static PropertyDefinition DefenderExploitProtectionXmlFileName = new PropertyDefinition(nameof(DefenderExploitProtectionXmlFileName), typeof(string));


        /// <summary>
        /// DefenderSecurityCenterBlockExploitProtectionOverride
        /// </summary>
        public static PropertyDefinition DefenderSecurityCenterBlockExploitProtectionOverride = new PropertyDefinition(nameof(DefenderSecurityCenterBlockExploitProtectionOverride), typeof(bool));


        /// <summary>
        /// AppLockerApplicationControl
        /// </summary>
        public static PropertyDefinition AppLockerApplicationControl = new PropertyDefinition(nameof(AppLockerApplicationControl), typeof(AppLockerApplicationControlType));


        /// <summary>
        /// DeviceGuardLocalSystemAuthorityCredentialGuardSettings
        /// </summary>
        public static PropertyDefinition DeviceGuardLocalSystemAuthorityCredentialGuardSettings = new PropertyDefinition(nameof(DeviceGuardLocalSystemAuthorityCredentialGuardSettings), typeof(DeviceGuardLocalSystemAuthorityCredentialGuardType));


        /// <summary>
        /// DeviceGuardEnableVirtualizationBasedSecurity
        /// </summary>
        public static PropertyDefinition DeviceGuardEnableVirtualizationBasedSecurity = new PropertyDefinition(nameof(DeviceGuardEnableVirtualizationBasedSecurity), typeof(bool));


        /// <summary>
        /// DeviceGuardEnableSecureBootWithDMA
        /// </summary>
        public static PropertyDefinition DeviceGuardEnableSecureBootWithDMA = new PropertyDefinition(nameof(DeviceGuardEnableSecureBootWithDMA), typeof(bool));


        /// <summary>
        /// DeviceGuardLaunchSystemGuard
        /// </summary>
        public static PropertyDefinition DeviceGuardLaunchSystemGuard = new PropertyDefinition(nameof(DeviceGuardLaunchSystemGuard), typeof(Enablement));


        /// <summary>
        /// SmartScreenEnableInShell
        /// </summary>
        public static PropertyDefinition SmartScreenEnableInShell = new PropertyDefinition(nameof(SmartScreenEnableInShell), typeof(bool));


        /// <summary>
        /// SmartScreenBlockOverrideForFiles
        /// </summary>
        public static PropertyDefinition SmartScreenBlockOverrideForFiles = new PropertyDefinition(nameof(SmartScreenBlockOverrideForFiles), typeof(bool));


        /// <summary>
        /// ApplicationGuardEnabled
        /// </summary>
        public static PropertyDefinition ApplicationGuardEnabled = new PropertyDefinition(nameof(ApplicationGuardEnabled), typeof(bool));


        /// <summary>
        /// ApplicationGuardEnabledOptions
        /// </summary>
        public static PropertyDefinition ApplicationGuardEnabledOptions = new PropertyDefinition(nameof(ApplicationGuardEnabledOptions), typeof(ApplicationGuardEnabledOptions));


        /// <summary>
        /// ApplicationGuardBlockFileTransfer
        /// </summary>
        public static PropertyDefinition ApplicationGuardBlockFileTransfer = new PropertyDefinition(nameof(ApplicationGuardBlockFileTransfer), typeof(ApplicationGuardBlockFileTransferType));


        /// <summary>
        /// ApplicationGuardBlockNonEnterpriseContent
        /// </summary>
        public static PropertyDefinition ApplicationGuardBlockNonEnterpriseContent = new PropertyDefinition(nameof(ApplicationGuardBlockNonEnterpriseContent), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowPersistence
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowPersistence = new PropertyDefinition(nameof(ApplicationGuardAllowPersistence), typeof(bool));


        /// <summary>
        /// ApplicationGuardForceAuditing
        /// </summary>
        public static PropertyDefinition ApplicationGuardForceAuditing = new PropertyDefinition(nameof(ApplicationGuardForceAuditing), typeof(bool));


        /// <summary>
        /// ApplicationGuardBlockClipboardSharing
        /// </summary>
        public static PropertyDefinition ApplicationGuardBlockClipboardSharing = new PropertyDefinition(nameof(ApplicationGuardBlockClipboardSharing), typeof(ApplicationGuardBlockClipboardSharingType));


        /// <summary>
        /// ApplicationGuardAllowPrintToPDF
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowPrintToPDF = new PropertyDefinition(nameof(ApplicationGuardAllowPrintToPDF), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowPrintToXPS
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowPrintToXPS = new PropertyDefinition(nameof(ApplicationGuardAllowPrintToXPS), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowPrintToLocalPrinters
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowPrintToLocalPrinters = new PropertyDefinition(nameof(ApplicationGuardAllowPrintToLocalPrinters), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowPrintToNetworkPrinters
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowPrintToNetworkPrinters = new PropertyDefinition(nameof(ApplicationGuardAllowPrintToNetworkPrinters), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowVirtualGPU
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowVirtualGPU = new PropertyDefinition(nameof(ApplicationGuardAllowVirtualGPU), typeof(bool));


        /// <summary>
        /// ApplicationGuardAllowFileSaveOnHost
        /// </summary>
        public static PropertyDefinition ApplicationGuardAllowFileSaveOnHost = new PropertyDefinition(nameof(ApplicationGuardAllowFileSaveOnHost), typeof(bool));


        /// <summary>
        /// BitLockerAllowStandardUserEncryption
        /// </summary>
        public static PropertyDefinition BitLockerAllowStandardUserEncryption = new PropertyDefinition(nameof(BitLockerAllowStandardUserEncryption), typeof(bool));


        /// <summary>
        /// BitLockerDisableWarningForOtherDiskEncryption
        /// </summary>
        public static PropertyDefinition BitLockerDisableWarningForOtherDiskEncryption = new PropertyDefinition(nameof(BitLockerDisableWarningForOtherDiskEncryption), typeof(bool));


        /// <summary>
        /// BitLockerEnableStorageCardEncryptionOnMobile
        /// </summary>
        public static PropertyDefinition BitLockerEnableStorageCardEncryptionOnMobile = new PropertyDefinition(nameof(BitLockerEnableStorageCardEncryptionOnMobile), typeof(bool));


        /// <summary>
        /// BitLockerEncryptDevice
        /// </summary>
        public static PropertyDefinition BitLockerEncryptDevice = new PropertyDefinition(nameof(BitLockerEncryptDevice), typeof(bool));


        /// <summary>
        /// BitLockerSystemDrivePolicy
        /// </summary>
        public static PropertyDefinition BitLockerSystemDrivePolicy = new PropertyDefinition(nameof(BitLockerSystemDrivePolicy), typeof(BitLockerSystemDrivePolicy));


        /// <summary>
        /// BitLockerFixedDrivePolicy
        /// </summary>
        public static PropertyDefinition BitLockerFixedDrivePolicy = new PropertyDefinition(nameof(BitLockerFixedDrivePolicy), typeof(BitLockerFixedDrivePolicy));


        /// <summary>
        /// BitLockerRemovableDrivePolicy
        /// </summary>
        public static PropertyDefinition BitLockerRemovableDrivePolicy = new PropertyDefinition(nameof(BitLockerRemovableDrivePolicy), typeof(BitLockerRemovableDrivePolicy));

    }


    /// <summary>
    /// Windows10GeneralConfigurationObjectSchema
    /// </summary>
    public class Windows10GeneralConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TaskManagerBlockEndTask
        /// </summary>
        public static PropertyDefinition TaskManagerBlockEndTask = new PropertyDefinition(nameof(TaskManagerBlockEndTask), typeof(bool));


        /// <summary>
        /// Windows10AppsForceUpdateSchedule
        /// </summary>
        public static PropertyDefinition Windows10AppsForceUpdateSchedule = new PropertyDefinition(nameof(Windows10AppsForceUpdateSchedule), typeof(Windows10AppsForceUpdateSchedule));


        /// <summary>
        /// EnableAutomaticRedeployment
        /// </summary>
        public static PropertyDefinition EnableAutomaticRedeployment = new PropertyDefinition(nameof(EnableAutomaticRedeployment), typeof(bool));


        /// <summary>
        /// MicrosoftAccountSignInAssistantSettings
        /// </summary>
        public static PropertyDefinition MicrosoftAccountSignInAssistantSettings = new PropertyDefinition(nameof(MicrosoftAccountSignInAssistantSettings), typeof(SignInAssistantOptions));


        /// <summary>
        /// AuthenticationAllowSecondaryDevice
        /// </summary>
        public static PropertyDefinition AuthenticationAllowSecondaryDevice = new PropertyDefinition(nameof(AuthenticationAllowSecondaryDevice), typeof(bool));


        /// <summary>
        /// AuthenticationPreferredAzureADTenantDomainName
        /// </summary>
        public static PropertyDefinition AuthenticationPreferredAzureADTenantDomainName = new PropertyDefinition(nameof(AuthenticationPreferredAzureADTenantDomainName), typeof(string));


        /// <summary>
        /// CryptographyAllowFipsAlgorithmPolicy
        /// </summary>
        public static PropertyDefinition CryptographyAllowFipsAlgorithmPolicy = new PropertyDefinition(nameof(CryptographyAllowFipsAlgorithmPolicy), typeof(bool));


        /// <summary>
        /// DisplayAppListWithGdiDPIScalingTurnedOn
        /// </summary>
        public static PropertyDefinition DisplayAppListWithGdiDPIScalingTurnedOn = new PropertyDefinition(nameof(DisplayAppListWithGdiDPIScalingTurnedOn), typeof(IList<String>));


        /// <summary>
        /// DisplayAppListWithGdiDPIScalingTurnedOff
        /// </summary>
        public static PropertyDefinition DisplayAppListWithGdiDPIScalingTurnedOff = new PropertyDefinition(nameof(DisplayAppListWithGdiDPIScalingTurnedOff), typeof(IList<String>));


        /// <summary>
        /// EnterpriseCloudPrintDiscoveryEndPoint
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintDiscoveryEndPoint = new PropertyDefinition(nameof(EnterpriseCloudPrintDiscoveryEndPoint), typeof(string));


        /// <summary>
        /// EnterpriseCloudPrintOAuthAuthority
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintOAuthAuthority = new PropertyDefinition(nameof(EnterpriseCloudPrintOAuthAuthority), typeof(string));


        /// <summary>
        /// EnterpriseCloudPrintOAuthClientIdentifier
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintOAuthClientIdentifier = new PropertyDefinition(nameof(EnterpriseCloudPrintOAuthClientIdentifier), typeof(string));


        /// <summary>
        /// EnterpriseCloudPrintResourceIdentifier
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintResourceIdentifier = new PropertyDefinition(nameof(EnterpriseCloudPrintResourceIdentifier), typeof(string));


        /// <summary>
        /// EnterpriseCloudPrintDiscoveryMaxLimit
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintDiscoveryMaxLimit = new PropertyDefinition(nameof(EnterpriseCloudPrintDiscoveryMaxLimit), typeof(int));


        /// <summary>
        /// EnterpriseCloudPrintMopriaDiscoveryResourceIdentifier
        /// </summary>
        public static PropertyDefinition EnterpriseCloudPrintMopriaDiscoveryResourceIdentifier = new PropertyDefinition(nameof(EnterpriseCloudPrintMopriaDiscoveryResourceIdentifier), typeof(string));


        /// <summary>
        /// ExperienceDoNotSyncBrowserSettings
        /// </summary>
        public static PropertyDefinition ExperienceDoNotSyncBrowserSettings = new PropertyDefinition(nameof(ExperienceDoNotSyncBrowserSettings), typeof(BrowserSyncSetting));


        /// <summary>
        /// MessagingBlockSync
        /// </summary>
        public static PropertyDefinition MessagingBlockSync = new PropertyDefinition(nameof(MessagingBlockSync), typeof(bool));


        /// <summary>
        /// MessagingBlockMMS
        /// </summary>
        public static PropertyDefinition MessagingBlockMMS = new PropertyDefinition(nameof(MessagingBlockMMS), typeof(bool));


        /// <summary>
        /// MessagingBlockRichCommunicationServices
        /// </summary>
        public static PropertyDefinition MessagingBlockRichCommunicationServices = new PropertyDefinition(nameof(MessagingBlockRichCommunicationServices), typeof(bool));


        /// <summary>
        /// PrinterNames
        /// </summary>
        public static PropertyDefinition PrinterNames = new PropertyDefinition(nameof(PrinterNames), typeof(IList<String>));


        /// <summary>
        /// PrinterDefaultName
        /// </summary>
        public static PropertyDefinition PrinterDefaultName = new PropertyDefinition(nameof(PrinterDefaultName), typeof(string));


        /// <summary>
        /// PrinterBlockAddition
        /// </summary>
        public static PropertyDefinition PrinterBlockAddition = new PropertyDefinition(nameof(PrinterBlockAddition), typeof(bool));


        /// <summary>
        /// SearchBlockDiacritics
        /// </summary>
        public static PropertyDefinition SearchBlockDiacritics = new PropertyDefinition(nameof(SearchBlockDiacritics), typeof(bool));


        /// <summary>
        /// SearchDisableAutoLanguageDetection
        /// </summary>
        public static PropertyDefinition SearchDisableAutoLanguageDetection = new PropertyDefinition(nameof(SearchDisableAutoLanguageDetection), typeof(bool));


        /// <summary>
        /// SearchDisableIndexingEncryptedItems
        /// </summary>
        public static PropertyDefinition SearchDisableIndexingEncryptedItems = new PropertyDefinition(nameof(SearchDisableIndexingEncryptedItems), typeof(bool));


        /// <summary>
        /// SearchEnableRemoteQueries
        /// </summary>
        public static PropertyDefinition SearchEnableRemoteQueries = new PropertyDefinition(nameof(SearchEnableRemoteQueries), typeof(bool));


        /// <summary>
        /// SearchDisableUseLocation
        /// </summary>
        public static PropertyDefinition SearchDisableUseLocation = new PropertyDefinition(nameof(SearchDisableUseLocation), typeof(bool));


        /// <summary>
        /// SearchDisableLocation
        /// </summary>
        public static PropertyDefinition SearchDisableLocation = new PropertyDefinition(nameof(SearchDisableLocation), typeof(bool));


        /// <summary>
        /// SearchDisableIndexerBackoff
        /// </summary>
        public static PropertyDefinition SearchDisableIndexerBackoff = new PropertyDefinition(nameof(SearchDisableIndexerBackoff), typeof(bool));


        /// <summary>
        /// SearchDisableIndexingRemovableDrive
        /// </summary>
        public static PropertyDefinition SearchDisableIndexingRemovableDrive = new PropertyDefinition(nameof(SearchDisableIndexingRemovableDrive), typeof(bool));


        /// <summary>
        /// SearchEnableAutomaticIndexSizeManangement
        /// </summary>
        public static PropertyDefinition SearchEnableAutomaticIndexSizeManangement = new PropertyDefinition(nameof(SearchEnableAutomaticIndexSizeManangement), typeof(bool));


        /// <summary>
        /// SearchBlockWebResults
        /// </summary>
        public static PropertyDefinition SearchBlockWebResults = new PropertyDefinition(nameof(SearchBlockWebResults), typeof(bool));


        /// <summary>
        /// SecurityBlockAzureADJoinedDevicesAutoEncryption
        /// </summary>
        public static PropertyDefinition SecurityBlockAzureADJoinedDevicesAutoEncryption = new PropertyDefinition(nameof(SecurityBlockAzureADJoinedDevicesAutoEncryption), typeof(bool));


        /// <summary>
        /// DiagnosticsDataSubmissionMode
        /// </summary>
        public static PropertyDefinition DiagnosticsDataSubmissionMode = new PropertyDefinition(nameof(DiagnosticsDataSubmissionMode), typeof(DiagnosticDataSubmissionMode));


        /// <summary>
        /// OneDriveDisableFileSync
        /// </summary>
        public static PropertyDefinition OneDriveDisableFileSync = new PropertyDefinition(nameof(OneDriveDisableFileSync), typeof(bool));


        /// <summary>
        /// SystemTelemetryProxyServer
        /// </summary>
        public static PropertyDefinition SystemTelemetryProxyServer = new PropertyDefinition(nameof(SystemTelemetryProxyServer), typeof(string));


        /// <summary>
        /// EdgeTelemetryForMicrosoft365Analytics
        /// </summary>
        public static PropertyDefinition EdgeTelemetryForMicrosoft365Analytics = new PropertyDefinition(nameof(EdgeTelemetryForMicrosoft365Analytics), typeof(EdgeTelemetryMode));


        /// <summary>
        /// InkWorkspaceAccess
        /// </summary>
        public static PropertyDefinition InkWorkspaceAccess = new PropertyDefinition(nameof(InkWorkspaceAccess), typeof(InkAccessSetting));


        /// <summary>
        /// InkWorkspaceAccessState
        /// </summary>
        public static PropertyDefinition InkWorkspaceAccessState = new PropertyDefinition(nameof(InkWorkspaceAccessState), typeof(StateManagementSetting));


        /// <summary>
        /// InkWorkspaceBlockSuggestedApps
        /// </summary>
        public static PropertyDefinition InkWorkspaceBlockSuggestedApps = new PropertyDefinition(nameof(InkWorkspaceBlockSuggestedApps), typeof(bool));


        /// <summary>
        /// SmartScreenEnableAppInstallControl
        /// </summary>
        public static PropertyDefinition SmartScreenEnableAppInstallControl = new PropertyDefinition(nameof(SmartScreenEnableAppInstallControl), typeof(bool));


        /// <summary>
        /// PersonalizationDesktopImageUrl
        /// </summary>
        public static PropertyDefinition PersonalizationDesktopImageUrl = new PropertyDefinition(nameof(PersonalizationDesktopImageUrl), typeof(string));


        /// <summary>
        /// PersonalizationLockScreenImageUrl
        /// </summary>
        public static PropertyDefinition PersonalizationLockScreenImageUrl = new PropertyDefinition(nameof(PersonalizationLockScreenImageUrl), typeof(string));


        /// <summary>
        /// BluetoothAllowedServices
        /// </summary>
        public static PropertyDefinition BluetoothAllowedServices = new PropertyDefinition(nameof(BluetoothAllowedServices), typeof(IList<String>));


        /// <summary>
        /// BluetoothBlockAdvertising
        /// </summary>
        public static PropertyDefinition BluetoothBlockAdvertising = new PropertyDefinition(nameof(BluetoothBlockAdvertising), typeof(bool));


        /// <summary>
        /// BluetoothBlockPromptedProximalConnections
        /// </summary>
        public static PropertyDefinition BluetoothBlockPromptedProximalConnections = new PropertyDefinition(nameof(BluetoothBlockPromptedProximalConnections), typeof(bool));


        /// <summary>
        /// BluetoothBlockDiscoverableMode
        /// </summary>
        public static PropertyDefinition BluetoothBlockDiscoverableMode = new PropertyDefinition(nameof(BluetoothBlockDiscoverableMode), typeof(bool));


        /// <summary>
        /// BluetoothBlockPrePairing
        /// </summary>
        public static PropertyDefinition BluetoothBlockPrePairing = new PropertyDefinition(nameof(BluetoothBlockPrePairing), typeof(bool));


        /// <summary>
        /// EdgeBlockAutofill
        /// </summary>
        public static PropertyDefinition EdgeBlockAutofill = new PropertyDefinition(nameof(EdgeBlockAutofill), typeof(bool));


        /// <summary>
        /// EdgeBlocked
        /// </summary>
        public static PropertyDefinition EdgeBlocked = new PropertyDefinition(nameof(EdgeBlocked), typeof(bool));


        /// <summary>
        /// EdgeCookiePolicy
        /// </summary>
        public static PropertyDefinition EdgeCookiePolicy = new PropertyDefinition(nameof(EdgeCookiePolicy), typeof(EdgeCookiePolicy));


        /// <summary>
        /// EdgeBlockDeveloperTools
        /// </summary>
        public static PropertyDefinition EdgeBlockDeveloperTools = new PropertyDefinition(nameof(EdgeBlockDeveloperTools), typeof(bool));


        /// <summary>
        /// EdgeBlockSendingDoNotTrackHeader
        /// </summary>
        public static PropertyDefinition EdgeBlockSendingDoNotTrackHeader = new PropertyDefinition(nameof(EdgeBlockSendingDoNotTrackHeader), typeof(bool));


        /// <summary>
        /// EdgeBlockExtensions
        /// </summary>
        public static PropertyDefinition EdgeBlockExtensions = new PropertyDefinition(nameof(EdgeBlockExtensions), typeof(bool));


        /// <summary>
        /// EdgeBlockInPrivateBrowsing
        /// </summary>
        public static PropertyDefinition EdgeBlockInPrivateBrowsing = new PropertyDefinition(nameof(EdgeBlockInPrivateBrowsing), typeof(bool));


        /// <summary>
        /// EdgeBlockJavaScript
        /// </summary>
        public static PropertyDefinition EdgeBlockJavaScript = new PropertyDefinition(nameof(EdgeBlockJavaScript), typeof(bool));


        /// <summary>
        /// EdgeBlockPasswordManager
        /// </summary>
        public static PropertyDefinition EdgeBlockPasswordManager = new PropertyDefinition(nameof(EdgeBlockPasswordManager), typeof(bool));


        /// <summary>
        /// EdgeBlockAddressBarDropdown
        /// </summary>
        public static PropertyDefinition EdgeBlockAddressBarDropdown = new PropertyDefinition(nameof(EdgeBlockAddressBarDropdown), typeof(bool));


        /// <summary>
        /// EdgeBlockCompatibilityList
        /// </summary>
        public static PropertyDefinition EdgeBlockCompatibilityList = new PropertyDefinition(nameof(EdgeBlockCompatibilityList), typeof(bool));


        /// <summary>
        /// EdgeClearBrowsingDataOnExit
        /// </summary>
        public static PropertyDefinition EdgeClearBrowsingDataOnExit = new PropertyDefinition(nameof(EdgeClearBrowsingDataOnExit), typeof(bool));


        /// <summary>
        /// EdgeAllowStartPagesModification
        /// </summary>
        public static PropertyDefinition EdgeAllowStartPagesModification = new PropertyDefinition(nameof(EdgeAllowStartPagesModification), typeof(bool));


        /// <summary>
        /// EdgeDisableFirstRunPage
        /// </summary>
        public static PropertyDefinition EdgeDisableFirstRunPage = new PropertyDefinition(nameof(EdgeDisableFirstRunPage), typeof(bool));


        /// <summary>
        /// EdgeBlockLiveTileDataCollection
        /// </summary>
        public static PropertyDefinition EdgeBlockLiveTileDataCollection = new PropertyDefinition(nameof(EdgeBlockLiveTileDataCollection), typeof(bool));


        /// <summary>
        /// EdgeSyncFavoritesWithInternetExplorer
        /// </summary>
        public static PropertyDefinition EdgeSyncFavoritesWithInternetExplorer = new PropertyDefinition(nameof(EdgeSyncFavoritesWithInternetExplorer), typeof(bool));


        /// <summary>
        /// EdgeFavoritesListLocation
        /// </summary>
        public static PropertyDefinition EdgeFavoritesListLocation = new PropertyDefinition(nameof(EdgeFavoritesListLocation), typeof(string));


        /// <summary>
        /// EdgeBlockEditFavorites
        /// </summary>
        public static PropertyDefinition EdgeBlockEditFavorites = new PropertyDefinition(nameof(EdgeBlockEditFavorites), typeof(bool));


        /// <summary>
        /// EdgeNewTabPageURL
        /// </summary>
        public static PropertyDefinition EdgeNewTabPageURL = new PropertyDefinition(nameof(EdgeNewTabPageURL), typeof(string));


        /// <summary>
        /// EdgeHomeButtonConfiguration
        /// </summary>
        public static PropertyDefinition EdgeHomeButtonConfiguration = new PropertyDefinition(nameof(EdgeHomeButtonConfiguration), typeof(EdgeHomeButtonConfiguration));


        /// <summary>
        /// EdgeHomeButtonConfigurationEnabled
        /// </summary>
        public static PropertyDefinition EdgeHomeButtonConfigurationEnabled = new PropertyDefinition(nameof(EdgeHomeButtonConfigurationEnabled), typeof(bool));


        /// <summary>
        /// EdgeOpensWith
        /// </summary>
        public static PropertyDefinition EdgeOpensWith = new PropertyDefinition(nameof(EdgeOpensWith), typeof(EdgeOpenOptions));


        /// <summary>
        /// EdgeBlockSideloadingExtensions
        /// </summary>
        public static PropertyDefinition EdgeBlockSideloadingExtensions = new PropertyDefinition(nameof(EdgeBlockSideloadingExtensions), typeof(bool));


        /// <summary>
        /// EdgeRequiredExtensionPackageFamilyNames
        /// </summary>
        public static PropertyDefinition EdgeRequiredExtensionPackageFamilyNames = new PropertyDefinition(nameof(EdgeRequiredExtensionPackageFamilyNames), typeof(IList<String>));


        /// <summary>
        /// EdgeBlockPrinting
        /// </summary>
        public static PropertyDefinition EdgeBlockPrinting = new PropertyDefinition(nameof(EdgeBlockPrinting), typeof(bool));


        /// <summary>
        /// EdgeFavoritesBarVisibility
        /// </summary>
        public static PropertyDefinition EdgeFavoritesBarVisibility = new PropertyDefinition(nameof(EdgeFavoritesBarVisibility), typeof(VisibilitySetting));


        /// <summary>
        /// EdgeBlockSavingHistory
        /// </summary>
        public static PropertyDefinition EdgeBlockSavingHistory = new PropertyDefinition(nameof(EdgeBlockSavingHistory), typeof(bool));


        /// <summary>
        /// EdgeBlockFullScreenMode
        /// </summary>
        public static PropertyDefinition EdgeBlockFullScreenMode = new PropertyDefinition(nameof(EdgeBlockFullScreenMode), typeof(bool));


        /// <summary>
        /// EdgeBlockWebContentOnNewTabPage
        /// </summary>
        public static PropertyDefinition EdgeBlockWebContentOnNewTabPage = new PropertyDefinition(nameof(EdgeBlockWebContentOnNewTabPage), typeof(bool));


        /// <summary>
        /// EdgeBlockTabPreloading
        /// </summary>
        public static PropertyDefinition EdgeBlockTabPreloading = new PropertyDefinition(nameof(EdgeBlockTabPreloading), typeof(bool));


        /// <summary>
        /// EdgeBlockPrelaunch
        /// </summary>
        public static PropertyDefinition EdgeBlockPrelaunch = new PropertyDefinition(nameof(EdgeBlockPrelaunch), typeof(bool));


        /// <summary>
        /// EdgeShowMessageWhenOpeningInternetExplorerSites
        /// </summary>
        public static PropertyDefinition EdgeShowMessageWhenOpeningInternetExplorerSites = new PropertyDefinition(nameof(EdgeShowMessageWhenOpeningInternetExplorerSites), typeof(InternetExplorerMessageSetting));


        /// <summary>
        /// EdgePreventCertificateErrorOverride
        /// </summary>
        public static PropertyDefinition EdgePreventCertificateErrorOverride = new PropertyDefinition(nameof(EdgePreventCertificateErrorOverride), typeof(bool));


        /// <summary>
        /// CellularBlockDataWhenRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockDataWhenRoaming = new PropertyDefinition(nameof(CellularBlockDataWhenRoaming), typeof(bool));


        /// <summary>
        /// CellularBlockVpn
        /// </summary>
        public static PropertyDefinition CellularBlockVpn = new PropertyDefinition(nameof(CellularBlockVpn), typeof(bool));


        /// <summary>
        /// CellularBlockVpnWhenRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockVpnWhenRoaming = new PropertyDefinition(nameof(CellularBlockVpnWhenRoaming), typeof(bool));


        /// <summary>
        /// CellularData
        /// </summary>
        public static PropertyDefinition CellularData = new PropertyDefinition(nameof(CellularData), typeof(ConfigurationUsage));


        /// <summary>
        /// DefenderBlockEndUserAccess
        /// </summary>
        public static PropertyDefinition DefenderBlockEndUserAccess = new PropertyDefinition(nameof(DefenderBlockEndUserAccess), typeof(bool));


        /// <summary>
        /// DefenderDaysBeforeDeletingQuarantinedMalware
        /// </summary>
        public static PropertyDefinition DefenderDaysBeforeDeletingQuarantinedMalware = new PropertyDefinition(nameof(DefenderDaysBeforeDeletingQuarantinedMalware), typeof(int));


        /// <summary>
        /// DefenderDetectedMalwareActions
        /// </summary>
        public static PropertyDefinition DefenderDetectedMalwareActions = new PropertyDefinition(nameof(DefenderDetectedMalwareActions), typeof(DefenderDetectedMalwareActions));


        /// <summary>
        /// DefenderSystemScanSchedule
        /// </summary>
        public static PropertyDefinition DefenderSystemScanSchedule = new PropertyDefinition(nameof(DefenderSystemScanSchedule), typeof(WeeklySchedule));


        /// <summary>
        /// DefenderFilesAndFoldersToExclude
        /// </summary>
        public static PropertyDefinition DefenderFilesAndFoldersToExclude = new PropertyDefinition(nameof(DefenderFilesAndFoldersToExclude), typeof(IList<String>));


        /// <summary>
        /// DefenderFileExtensionsToExclude
        /// </summary>
        public static PropertyDefinition DefenderFileExtensionsToExclude = new PropertyDefinition(nameof(DefenderFileExtensionsToExclude), typeof(IList<String>));


        /// <summary>
        /// DefenderScanMaxCpu
        /// </summary>
        public static PropertyDefinition DefenderScanMaxCpu = new PropertyDefinition(nameof(DefenderScanMaxCpu), typeof(int));


        /// <summary>
        /// DefenderMonitorFileActivity
        /// </summary>
        public static PropertyDefinition DefenderMonitorFileActivity = new PropertyDefinition(nameof(DefenderMonitorFileActivity), typeof(DefenderMonitorFileActivity));


        /// <summary>
        /// DefenderPotentiallyUnwantedAppAction
        /// </summary>
        public static PropertyDefinition DefenderPotentiallyUnwantedAppAction = new PropertyDefinition(nameof(DefenderPotentiallyUnwantedAppAction), typeof(DefenderPotentiallyUnwantedAppAction));


        /// <summary>
        /// DefenderPotentiallyUnwantedAppActionSetting
        /// </summary>
        public static PropertyDefinition DefenderPotentiallyUnwantedAppActionSetting = new PropertyDefinition(nameof(DefenderPotentiallyUnwantedAppActionSetting), typeof(DefenderProtectionType));


        /// <summary>
        /// DefenderProcessesToExclude
        /// </summary>
        public static PropertyDefinition DefenderProcessesToExclude = new PropertyDefinition(nameof(DefenderProcessesToExclude), typeof(IList<String>));


        /// <summary>
        /// DefenderPromptForSampleSubmission
        /// </summary>
        public static PropertyDefinition DefenderPromptForSampleSubmission = new PropertyDefinition(nameof(DefenderPromptForSampleSubmission), typeof(DefenderPromptForSampleSubmission));


        /// <summary>
        /// DefenderRequireBehaviorMonitoring
        /// </summary>
        public static PropertyDefinition DefenderRequireBehaviorMonitoring = new PropertyDefinition(nameof(DefenderRequireBehaviorMonitoring), typeof(bool));


        /// <summary>
        /// DefenderRequireCloudProtection
        /// </summary>
        public static PropertyDefinition DefenderRequireCloudProtection = new PropertyDefinition(nameof(DefenderRequireCloudProtection), typeof(bool));


        /// <summary>
        /// DefenderRequireNetworkInspectionSystem
        /// </summary>
        public static PropertyDefinition DefenderRequireNetworkInspectionSystem = new PropertyDefinition(nameof(DefenderRequireNetworkInspectionSystem), typeof(bool));


        /// <summary>
        /// DefenderRequireRealTimeMonitoring
        /// </summary>
        public static PropertyDefinition DefenderRequireRealTimeMonitoring = new PropertyDefinition(nameof(DefenderRequireRealTimeMonitoring), typeof(bool));


        /// <summary>
        /// DefenderScanArchiveFiles
        /// </summary>
        public static PropertyDefinition DefenderScanArchiveFiles = new PropertyDefinition(nameof(DefenderScanArchiveFiles), typeof(bool));


        /// <summary>
        /// DefenderScanDownloads
        /// </summary>
        public static PropertyDefinition DefenderScanDownloads = new PropertyDefinition(nameof(DefenderScanDownloads), typeof(bool));


        /// <summary>
        /// DefenderScanNetworkFiles
        /// </summary>
        public static PropertyDefinition DefenderScanNetworkFiles = new PropertyDefinition(nameof(DefenderScanNetworkFiles), typeof(bool));


        /// <summary>
        /// DefenderScanIncomingMail
        /// </summary>
        public static PropertyDefinition DefenderScanIncomingMail = new PropertyDefinition(nameof(DefenderScanIncomingMail), typeof(bool));


        /// <summary>
        /// DefenderScanMappedNetworkDrivesDuringFullScan
        /// </summary>
        public static PropertyDefinition DefenderScanMappedNetworkDrivesDuringFullScan = new PropertyDefinition(nameof(DefenderScanMappedNetworkDrivesDuringFullScan), typeof(bool));


        /// <summary>
        /// DefenderScanRemovableDrivesDuringFullScan
        /// </summary>
        public static PropertyDefinition DefenderScanRemovableDrivesDuringFullScan = new PropertyDefinition(nameof(DefenderScanRemovableDrivesDuringFullScan), typeof(bool));


        /// <summary>
        /// DefenderScanScriptsLoadedInInternetExplorer
        /// </summary>
        public static PropertyDefinition DefenderScanScriptsLoadedInInternetExplorer = new PropertyDefinition(nameof(DefenderScanScriptsLoadedInInternetExplorer), typeof(bool));


        /// <summary>
        /// DefenderSignatureUpdateIntervalInHours
        /// </summary>
        public static PropertyDefinition DefenderSignatureUpdateIntervalInHours = new PropertyDefinition(nameof(DefenderSignatureUpdateIntervalInHours), typeof(int));


        /// <summary>
        /// DefenderScanType
        /// </summary>
        public static PropertyDefinition DefenderScanType = new PropertyDefinition(nameof(DefenderScanType), typeof(DefenderScanType));


        /// <summary>
        /// DefenderScheduledScanTime
        /// </summary>
        public static PropertyDefinition DefenderScheduledScanTime = new PropertyDefinition(nameof(DefenderScheduledScanTime), typeof(TimeSpan));


        /// <summary>
        /// DefenderScheduledQuickScanTime
        /// </summary>
        public static PropertyDefinition DefenderScheduledQuickScanTime = new PropertyDefinition(nameof(DefenderScheduledQuickScanTime), typeof(TimeSpan));


        /// <summary>
        /// DefenderCloudBlockLevel
        /// </summary>
        public static PropertyDefinition DefenderCloudBlockLevel = new PropertyDefinition(nameof(DefenderCloudBlockLevel), typeof(DefenderCloudBlockLevelType));


        /// <summary>
        /// DefenderCloudExtendedTimeout
        /// </summary>
        public static PropertyDefinition DefenderCloudExtendedTimeout = new PropertyDefinition(nameof(DefenderCloudExtendedTimeout), typeof(int));


        /// <summary>
        /// DefenderCloudExtendedTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition DefenderCloudExtendedTimeoutInSeconds = new PropertyDefinition(nameof(DefenderCloudExtendedTimeoutInSeconds), typeof(int));


        /// <summary>
        /// DefenderBlockOnAccessProtection
        /// </summary>
        public static PropertyDefinition DefenderBlockOnAccessProtection = new PropertyDefinition(nameof(DefenderBlockOnAccessProtection), typeof(bool));


        /// <summary>
        /// DefenderScheduleScanDay
        /// </summary>
        public static PropertyDefinition DefenderScheduleScanDay = new PropertyDefinition(nameof(DefenderScheduleScanDay), typeof(DefenderScheduleScanDay));


        /// <summary>
        /// DefenderSubmitSamplesConsentType
        /// </summary>
        public static PropertyDefinition DefenderSubmitSamplesConsentType = new PropertyDefinition(nameof(DefenderSubmitSamplesConsentType), typeof(DefenderSubmitSamplesConsentType));


        /// <summary>
        /// LockScreenAllowTimeoutConfiguration
        /// </summary>
        public static PropertyDefinition LockScreenAllowTimeoutConfiguration = new PropertyDefinition(nameof(LockScreenAllowTimeoutConfiguration), typeof(bool));


        /// <summary>
        /// LockScreenBlockActionCenterNotifications
        /// </summary>
        public static PropertyDefinition LockScreenBlockActionCenterNotifications = new PropertyDefinition(nameof(LockScreenBlockActionCenterNotifications), typeof(bool));


        /// <summary>
        /// LockScreenBlockCortana
        /// </summary>
        public static PropertyDefinition LockScreenBlockCortana = new PropertyDefinition(nameof(LockScreenBlockCortana), typeof(bool));


        /// <summary>
        /// LockScreenBlockToastNotifications
        /// </summary>
        public static PropertyDefinition LockScreenBlockToastNotifications = new PropertyDefinition(nameof(LockScreenBlockToastNotifications), typeof(bool));


        /// <summary>
        /// LockScreenTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition LockScreenTimeoutInSeconds = new PropertyDefinition(nameof(LockScreenTimeoutInSeconds), typeof(int));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordRequireWhenResumeFromIdleState
        /// </summary>
        public static PropertyDefinition PasswordRequireWhenResumeFromIdleState = new PropertyDefinition(nameof(PasswordRequireWhenResumeFromIdleState), typeof(bool));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// PasswordMinimumAgeInDays
        /// </summary>
        public static PropertyDefinition PasswordMinimumAgeInDays = new PropertyDefinition(nameof(PasswordMinimumAgeInDays), typeof(int));


        /// <summary>
        /// PrivacyAdvertisingId
        /// </summary>
        public static PropertyDefinition PrivacyAdvertisingId = new PropertyDefinition(nameof(PrivacyAdvertisingId), typeof(StateManagementSetting));


        /// <summary>
        /// PrivacyAutoAcceptPairingAndConsentPrompts
        /// </summary>
        public static PropertyDefinition PrivacyAutoAcceptPairingAndConsentPrompts = new PropertyDefinition(nameof(PrivacyAutoAcceptPairingAndConsentPrompts), typeof(bool));


        /// <summary>
        /// PrivacyBlockInputPersonalization
        /// </summary>
        public static PropertyDefinition PrivacyBlockInputPersonalization = new PropertyDefinition(nameof(PrivacyBlockInputPersonalization), typeof(bool));


        /// <summary>
        /// PrivacyBlockPublishUserActivities
        /// </summary>
        public static PropertyDefinition PrivacyBlockPublishUserActivities = new PropertyDefinition(nameof(PrivacyBlockPublishUserActivities), typeof(bool));


        /// <summary>
        /// PrivacyBlockActivityFeed
        /// </summary>
        public static PropertyDefinition PrivacyBlockActivityFeed = new PropertyDefinition(nameof(PrivacyBlockActivityFeed), typeof(bool));


        /// <summary>
        /// StartBlockUnpinningAppsFromTaskbar
        /// </summary>
        public static PropertyDefinition StartBlockUnpinningAppsFromTaskbar = new PropertyDefinition(nameof(StartBlockUnpinningAppsFromTaskbar), typeof(bool));


        /// <summary>
        /// StartMenuAppListVisibility
        /// </summary>
        public static PropertyDefinition StartMenuAppListVisibility = new PropertyDefinition(nameof(StartMenuAppListVisibility), typeof(WindowsStartMenuAppListVisibilityType));


        /// <summary>
        /// StartMenuHideChangeAccountSettings
        /// </summary>
        public static PropertyDefinition StartMenuHideChangeAccountSettings = new PropertyDefinition(nameof(StartMenuHideChangeAccountSettings), typeof(bool));


        /// <summary>
        /// StartMenuHideFrequentlyUsedApps
        /// </summary>
        public static PropertyDefinition StartMenuHideFrequentlyUsedApps = new PropertyDefinition(nameof(StartMenuHideFrequentlyUsedApps), typeof(bool));


        /// <summary>
        /// StartMenuHideHibernate
        /// </summary>
        public static PropertyDefinition StartMenuHideHibernate = new PropertyDefinition(nameof(StartMenuHideHibernate), typeof(bool));


        /// <summary>
        /// StartMenuHideLock
        /// </summary>
        public static PropertyDefinition StartMenuHideLock = new PropertyDefinition(nameof(StartMenuHideLock), typeof(bool));


        /// <summary>
        /// StartMenuHidePowerButton
        /// </summary>
        public static PropertyDefinition StartMenuHidePowerButton = new PropertyDefinition(nameof(StartMenuHidePowerButton), typeof(bool));


        /// <summary>
        /// StartMenuHideRecentJumpLists
        /// </summary>
        public static PropertyDefinition StartMenuHideRecentJumpLists = new PropertyDefinition(nameof(StartMenuHideRecentJumpLists), typeof(bool));


        /// <summary>
        /// StartMenuHideRecentlyAddedApps
        /// </summary>
        public static PropertyDefinition StartMenuHideRecentlyAddedApps = new PropertyDefinition(nameof(StartMenuHideRecentlyAddedApps), typeof(bool));


        /// <summary>
        /// StartMenuHideRestartOptions
        /// </summary>
        public static PropertyDefinition StartMenuHideRestartOptions = new PropertyDefinition(nameof(StartMenuHideRestartOptions), typeof(bool));


        /// <summary>
        /// StartMenuHideShutDown
        /// </summary>
        public static PropertyDefinition StartMenuHideShutDown = new PropertyDefinition(nameof(StartMenuHideShutDown), typeof(bool));


        /// <summary>
        /// StartMenuHideSignOut
        /// </summary>
        public static PropertyDefinition StartMenuHideSignOut = new PropertyDefinition(nameof(StartMenuHideSignOut), typeof(bool));


        /// <summary>
        /// StartMenuHideSleep
        /// </summary>
        public static PropertyDefinition StartMenuHideSleep = new PropertyDefinition(nameof(StartMenuHideSleep), typeof(bool));


        /// <summary>
        /// StartMenuHideSwitchAccount
        /// </summary>
        public static PropertyDefinition StartMenuHideSwitchAccount = new PropertyDefinition(nameof(StartMenuHideSwitchAccount), typeof(bool));


        /// <summary>
        /// StartMenuHideUserTile
        /// </summary>
        public static PropertyDefinition StartMenuHideUserTile = new PropertyDefinition(nameof(StartMenuHideUserTile), typeof(bool));


        /// <summary>
        /// StartMenuLayoutEdgeAssetsXml
        /// </summary>
        public static PropertyDefinition StartMenuLayoutEdgeAssetsXml = new PropertyDefinition(nameof(StartMenuLayoutEdgeAssetsXml), typeof(string));


        /// <summary>
        /// StartMenuLayoutXml
        /// </summary>
        public static PropertyDefinition StartMenuLayoutXml = new PropertyDefinition(nameof(StartMenuLayoutXml), typeof(string));


        /// <summary>
        /// StartMenuMode
        /// </summary>
        public static PropertyDefinition StartMenuMode = new PropertyDefinition(nameof(StartMenuMode), typeof(WindowsStartMenuModeType));


        /// <summary>
        /// StartMenuPinnedFolderDocuments
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderDocuments = new PropertyDefinition(nameof(StartMenuPinnedFolderDocuments), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderDownloads
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderDownloads = new PropertyDefinition(nameof(StartMenuPinnedFolderDownloads), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderFileExplorer
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderFileExplorer = new PropertyDefinition(nameof(StartMenuPinnedFolderFileExplorer), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderHomeGroup
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderHomeGroup = new PropertyDefinition(nameof(StartMenuPinnedFolderHomeGroup), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderMusic
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderMusic = new PropertyDefinition(nameof(StartMenuPinnedFolderMusic), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderNetwork
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderNetwork = new PropertyDefinition(nameof(StartMenuPinnedFolderNetwork), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderPersonalFolder
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderPersonalFolder = new PropertyDefinition(nameof(StartMenuPinnedFolderPersonalFolder), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderPictures
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderPictures = new PropertyDefinition(nameof(StartMenuPinnedFolderPictures), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderSettings
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderSettings = new PropertyDefinition(nameof(StartMenuPinnedFolderSettings), typeof(VisibilitySetting));


        /// <summary>
        /// StartMenuPinnedFolderVideos
        /// </summary>
        public static PropertyDefinition StartMenuPinnedFolderVideos = new PropertyDefinition(nameof(StartMenuPinnedFolderVideos), typeof(VisibilitySetting));


        /// <summary>
        /// SettingsBlockSettingsApp
        /// </summary>
        public static PropertyDefinition SettingsBlockSettingsApp = new PropertyDefinition(nameof(SettingsBlockSettingsApp), typeof(bool));


        /// <summary>
        /// SettingsBlockSystemPage
        /// </summary>
        public static PropertyDefinition SettingsBlockSystemPage = new PropertyDefinition(nameof(SettingsBlockSystemPage), typeof(bool));


        /// <summary>
        /// SettingsBlockDevicesPage
        /// </summary>
        public static PropertyDefinition SettingsBlockDevicesPage = new PropertyDefinition(nameof(SettingsBlockDevicesPage), typeof(bool));


        /// <summary>
        /// SettingsBlockNetworkInternetPage
        /// </summary>
        public static PropertyDefinition SettingsBlockNetworkInternetPage = new PropertyDefinition(nameof(SettingsBlockNetworkInternetPage), typeof(bool));


        /// <summary>
        /// SettingsBlockPersonalizationPage
        /// </summary>
        public static PropertyDefinition SettingsBlockPersonalizationPage = new PropertyDefinition(nameof(SettingsBlockPersonalizationPage), typeof(bool));


        /// <summary>
        /// SettingsBlockAccountsPage
        /// </summary>
        public static PropertyDefinition SettingsBlockAccountsPage = new PropertyDefinition(nameof(SettingsBlockAccountsPage), typeof(bool));


        /// <summary>
        /// SettingsBlockTimeLanguagePage
        /// </summary>
        public static PropertyDefinition SettingsBlockTimeLanguagePage = new PropertyDefinition(nameof(SettingsBlockTimeLanguagePage), typeof(bool));


        /// <summary>
        /// SettingsBlockEaseOfAccessPage
        /// </summary>
        public static PropertyDefinition SettingsBlockEaseOfAccessPage = new PropertyDefinition(nameof(SettingsBlockEaseOfAccessPage), typeof(bool));


        /// <summary>
        /// SettingsBlockPrivacyPage
        /// </summary>
        public static PropertyDefinition SettingsBlockPrivacyPage = new PropertyDefinition(nameof(SettingsBlockPrivacyPage), typeof(bool));


        /// <summary>
        /// SettingsBlockUpdateSecurityPage
        /// </summary>
        public static PropertyDefinition SettingsBlockUpdateSecurityPage = new PropertyDefinition(nameof(SettingsBlockUpdateSecurityPage), typeof(bool));


        /// <summary>
        /// SettingsBlockAppsPage
        /// </summary>
        public static PropertyDefinition SettingsBlockAppsPage = new PropertyDefinition(nameof(SettingsBlockAppsPage), typeof(bool));


        /// <summary>
        /// SettingsBlockGamingPage
        /// </summary>
        public static PropertyDefinition SettingsBlockGamingPage = new PropertyDefinition(nameof(SettingsBlockGamingPage), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockConsumerSpecificFeatures
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockConsumerSpecificFeatures = new PropertyDefinition(nameof(WindowsSpotlightBlockConsumerSpecificFeatures), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlocked
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlocked = new PropertyDefinition(nameof(WindowsSpotlightBlocked), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockOnActionCenter
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockOnActionCenter = new PropertyDefinition(nameof(WindowsSpotlightBlockOnActionCenter), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockTailoredExperiences
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockTailoredExperiences = new PropertyDefinition(nameof(WindowsSpotlightBlockTailoredExperiences), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockThirdPartyNotifications
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockThirdPartyNotifications = new PropertyDefinition(nameof(WindowsSpotlightBlockThirdPartyNotifications), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockWelcomeExperience
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockWelcomeExperience = new PropertyDefinition(nameof(WindowsSpotlightBlockWelcomeExperience), typeof(bool));


        /// <summary>
        /// WindowsSpotlightBlockWindowsTips
        /// </summary>
        public static PropertyDefinition WindowsSpotlightBlockWindowsTips = new PropertyDefinition(nameof(WindowsSpotlightBlockWindowsTips), typeof(bool));


        /// <summary>
        /// WindowsSpotlightConfigureOnLockScreen
        /// </summary>
        public static PropertyDefinition WindowsSpotlightConfigureOnLockScreen = new PropertyDefinition(nameof(WindowsSpotlightConfigureOnLockScreen), typeof(WindowsSpotlightEnablementSettings));


        /// <summary>
        /// NetworkProxyApplySettingsDeviceWide
        /// </summary>
        public static PropertyDefinition NetworkProxyApplySettingsDeviceWide = new PropertyDefinition(nameof(NetworkProxyApplySettingsDeviceWide), typeof(bool));


        /// <summary>
        /// NetworkProxyDisableAutoDetect
        /// </summary>
        public static PropertyDefinition NetworkProxyDisableAutoDetect = new PropertyDefinition(nameof(NetworkProxyDisableAutoDetect), typeof(bool));


        /// <summary>
        /// NetworkProxyAutomaticConfigurationUrl
        /// </summary>
        public static PropertyDefinition NetworkProxyAutomaticConfigurationUrl = new PropertyDefinition(nameof(NetworkProxyAutomaticConfigurationUrl), typeof(string));


        /// <summary>
        /// NetworkProxyServer
        /// </summary>
        public static PropertyDefinition NetworkProxyServer = new PropertyDefinition(nameof(NetworkProxyServer), typeof(Windows10NetworkProxyServer));


        /// <summary>
        /// AccountsBlockAddingNonMicrosoftAccountEmail
        /// </summary>
        public static PropertyDefinition AccountsBlockAddingNonMicrosoftAccountEmail = new PropertyDefinition(nameof(AccountsBlockAddingNonMicrosoftAccountEmail), typeof(bool));


        /// <summary>
        /// AntiTheftModeBlocked
        /// </summary>
        public static PropertyDefinition AntiTheftModeBlocked = new PropertyDefinition(nameof(AntiTheftModeBlocked), typeof(bool));


        /// <summary>
        /// BluetoothBlocked
        /// </summary>
        public static PropertyDefinition BluetoothBlocked = new PropertyDefinition(nameof(BluetoothBlocked), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// ConnectedDevicesServiceBlocked
        /// </summary>
        public static PropertyDefinition ConnectedDevicesServiceBlocked = new PropertyDefinition(nameof(ConnectedDevicesServiceBlocked), typeof(bool));


        /// <summary>
        /// CertificatesBlockManualRootCertificateInstallation
        /// </summary>
        public static PropertyDefinition CertificatesBlockManualRootCertificateInstallation = new PropertyDefinition(nameof(CertificatesBlockManualRootCertificateInstallation), typeof(bool));


        /// <summary>
        /// CopyPasteBlocked
        /// </summary>
        public static PropertyDefinition CopyPasteBlocked = new PropertyDefinition(nameof(CopyPasteBlocked), typeof(bool));


        /// <summary>
        /// CortanaBlocked
        /// </summary>
        public static PropertyDefinition CortanaBlocked = new PropertyDefinition(nameof(CortanaBlocked), typeof(bool));


        /// <summary>
        /// DeviceManagementBlockFactoryResetOnMobile
        /// </summary>
        public static PropertyDefinition DeviceManagementBlockFactoryResetOnMobile = new PropertyDefinition(nameof(DeviceManagementBlockFactoryResetOnMobile), typeof(bool));


        /// <summary>
        /// DeviceManagementBlockManualUnenroll
        /// </summary>
        public static PropertyDefinition DeviceManagementBlockManualUnenroll = new PropertyDefinition(nameof(DeviceManagementBlockManualUnenroll), typeof(bool));


        /// <summary>
        /// SafeSearchFilter
        /// </summary>
        public static PropertyDefinition SafeSearchFilter = new PropertyDefinition(nameof(SafeSearchFilter), typeof(SafeSearchFilterType));


        /// <summary>
        /// EdgeBlockPopups
        /// </summary>
        public static PropertyDefinition EdgeBlockPopups = new PropertyDefinition(nameof(EdgeBlockPopups), typeof(bool));


        /// <summary>
        /// EdgeBlockSearchSuggestions
        /// </summary>
        public static PropertyDefinition EdgeBlockSearchSuggestions = new PropertyDefinition(nameof(EdgeBlockSearchSuggestions), typeof(bool));


        /// <summary>
        /// EdgeBlockSendingIntranetTrafficToInternetExplorer
        /// </summary>
        public static PropertyDefinition EdgeBlockSendingIntranetTrafficToInternetExplorer = new PropertyDefinition(nameof(EdgeBlockSendingIntranetTrafficToInternetExplorer), typeof(bool));


        /// <summary>
        /// EdgeSendIntranetTrafficToInternetExplorer
        /// </summary>
        public static PropertyDefinition EdgeSendIntranetTrafficToInternetExplorer = new PropertyDefinition(nameof(EdgeSendIntranetTrafficToInternetExplorer), typeof(bool));


        /// <summary>
        /// EdgeRequireSmartScreen
        /// </summary>
        public static PropertyDefinition EdgeRequireSmartScreen = new PropertyDefinition(nameof(EdgeRequireSmartScreen), typeof(bool));


        /// <summary>
        /// EdgeEnterpriseModeSiteListLocation
        /// </summary>
        public static PropertyDefinition EdgeEnterpriseModeSiteListLocation = new PropertyDefinition(nameof(EdgeEnterpriseModeSiteListLocation), typeof(string));


        /// <summary>
        /// EdgeFirstRunUrl
        /// </summary>
        public static PropertyDefinition EdgeFirstRunUrl = new PropertyDefinition(nameof(EdgeFirstRunUrl), typeof(string));


        /// <summary>
        /// EdgeSearchEngine
        /// </summary>
        public static PropertyDefinition EdgeSearchEngine = new PropertyDefinition(nameof(EdgeSearchEngine), typeof(EdgeSearchEngineBase));


        /// <summary>
        /// EdgeHomepageUrls
        /// </summary>
        public static PropertyDefinition EdgeHomepageUrls = new PropertyDefinition(nameof(EdgeHomepageUrls), typeof(IList<String>));


        /// <summary>
        /// EdgeBlockAccessToAboutFlags
        /// </summary>
        public static PropertyDefinition EdgeBlockAccessToAboutFlags = new PropertyDefinition(nameof(EdgeBlockAccessToAboutFlags), typeof(bool));


        /// <summary>
        /// SmartScreenBlockPromptOverride
        /// </summary>
        public static PropertyDefinition SmartScreenBlockPromptOverride = new PropertyDefinition(nameof(SmartScreenBlockPromptOverride), typeof(bool));


        /// <summary>
        /// SmartScreenBlockPromptOverrideForFiles
        /// </summary>
        public static PropertyDefinition SmartScreenBlockPromptOverrideForFiles = new PropertyDefinition(nameof(SmartScreenBlockPromptOverrideForFiles), typeof(bool));


        /// <summary>
        /// WebRtcBlockLocalhostIpAddress
        /// </summary>
        public static PropertyDefinition WebRtcBlockLocalhostIpAddress = new PropertyDefinition(nameof(WebRtcBlockLocalhostIpAddress), typeof(bool));


        /// <summary>
        /// InternetSharingBlocked
        /// </summary>
        public static PropertyDefinition InternetSharingBlocked = new PropertyDefinition(nameof(InternetSharingBlocked), typeof(bool));


        /// <summary>
        /// SettingsBlockAddProvisioningPackage
        /// </summary>
        public static PropertyDefinition SettingsBlockAddProvisioningPackage = new PropertyDefinition(nameof(SettingsBlockAddProvisioningPackage), typeof(bool));


        /// <summary>
        /// SettingsBlockRemoveProvisioningPackage
        /// </summary>
        public static PropertyDefinition SettingsBlockRemoveProvisioningPackage = new PropertyDefinition(nameof(SettingsBlockRemoveProvisioningPackage), typeof(bool));


        /// <summary>
        /// SettingsBlockChangeSystemTime
        /// </summary>
        public static PropertyDefinition SettingsBlockChangeSystemTime = new PropertyDefinition(nameof(SettingsBlockChangeSystemTime), typeof(bool));


        /// <summary>
        /// SettingsBlockEditDeviceName
        /// </summary>
        public static PropertyDefinition SettingsBlockEditDeviceName = new PropertyDefinition(nameof(SettingsBlockEditDeviceName), typeof(bool));


        /// <summary>
        /// SettingsBlockChangeRegion
        /// </summary>
        public static PropertyDefinition SettingsBlockChangeRegion = new PropertyDefinition(nameof(SettingsBlockChangeRegion), typeof(bool));


        /// <summary>
        /// SettingsBlockChangeLanguage
        /// </summary>
        public static PropertyDefinition SettingsBlockChangeLanguage = new PropertyDefinition(nameof(SettingsBlockChangeLanguage), typeof(bool));


        /// <summary>
        /// SettingsBlockChangePowerSleep
        /// </summary>
        public static PropertyDefinition SettingsBlockChangePowerSleep = new PropertyDefinition(nameof(SettingsBlockChangePowerSleep), typeof(bool));


        /// <summary>
        /// LocationServicesBlocked
        /// </summary>
        public static PropertyDefinition LocationServicesBlocked = new PropertyDefinition(nameof(LocationServicesBlocked), typeof(bool));


        /// <summary>
        /// MicrosoftAccountBlocked
        /// </summary>
        public static PropertyDefinition MicrosoftAccountBlocked = new PropertyDefinition(nameof(MicrosoftAccountBlocked), typeof(bool));


        /// <summary>
        /// MicrosoftAccountBlockSettingsSync
        /// </summary>
        public static PropertyDefinition MicrosoftAccountBlockSettingsSync = new PropertyDefinition(nameof(MicrosoftAccountBlockSettingsSync), typeof(bool));


        /// <summary>
        /// NfcBlocked
        /// </summary>
        public static PropertyDefinition NfcBlocked = new PropertyDefinition(nameof(NfcBlocked), typeof(bool));


        /// <summary>
        /// ResetProtectionModeBlocked
        /// </summary>
        public static PropertyDefinition ResetProtectionModeBlocked = new PropertyDefinition(nameof(ResetProtectionModeBlocked), typeof(bool));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// StorageBlockRemovableStorage
        /// </summary>
        public static PropertyDefinition StorageBlockRemovableStorage = new PropertyDefinition(nameof(StorageBlockRemovableStorage), typeof(bool));


        /// <summary>
        /// StorageRequireMobileDeviceEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireMobileDeviceEncryption = new PropertyDefinition(nameof(StorageRequireMobileDeviceEncryption), typeof(bool));


        /// <summary>
        /// UsbBlocked
        /// </summary>
        public static PropertyDefinition UsbBlocked = new PropertyDefinition(nameof(UsbBlocked), typeof(bool));


        /// <summary>
        /// VoiceRecordingBlocked
        /// </summary>
        public static PropertyDefinition VoiceRecordingBlocked = new PropertyDefinition(nameof(VoiceRecordingBlocked), typeof(bool));


        /// <summary>
        /// WiFiBlockAutomaticConnectHotspots
        /// </summary>
        public static PropertyDefinition WiFiBlockAutomaticConnectHotspots = new PropertyDefinition(nameof(WiFiBlockAutomaticConnectHotspots), typeof(bool));


        /// <summary>
        /// WiFiBlocked
        /// </summary>
        public static PropertyDefinition WiFiBlocked = new PropertyDefinition(nameof(WiFiBlocked), typeof(bool));


        /// <summary>
        /// WiFiBlockManualConfiguration
        /// </summary>
        public static PropertyDefinition WiFiBlockManualConfiguration = new PropertyDefinition(nameof(WiFiBlockManualConfiguration), typeof(bool));


        /// <summary>
        /// WiFiScanInterval
        /// </summary>
        public static PropertyDefinition WiFiScanInterval = new PropertyDefinition(nameof(WiFiScanInterval), typeof(int));


        /// <summary>
        /// WirelessDisplayBlockProjectionToThisDevice
        /// </summary>
        public static PropertyDefinition WirelessDisplayBlockProjectionToThisDevice = new PropertyDefinition(nameof(WirelessDisplayBlockProjectionToThisDevice), typeof(bool));


        /// <summary>
        /// WirelessDisplayBlockUserInputFromReceiver
        /// </summary>
        public static PropertyDefinition WirelessDisplayBlockUserInputFromReceiver = new PropertyDefinition(nameof(WirelessDisplayBlockUserInputFromReceiver), typeof(bool));


        /// <summary>
        /// WirelessDisplayRequirePinForPairing
        /// </summary>
        public static PropertyDefinition WirelessDisplayRequirePinForPairing = new PropertyDefinition(nameof(WirelessDisplayRequirePinForPairing), typeof(bool));


        /// <summary>
        /// WindowsStoreBlocked
        /// </summary>
        public static PropertyDefinition WindowsStoreBlocked = new PropertyDefinition(nameof(WindowsStoreBlocked), typeof(bool));


        /// <summary>
        /// AppsAllowTrustedAppsSideloading
        /// </summary>
        public static PropertyDefinition AppsAllowTrustedAppsSideloading = new PropertyDefinition(nameof(AppsAllowTrustedAppsSideloading), typeof(StateManagementSetting));


        /// <summary>
        /// WindowsStoreBlockAutoUpdate
        /// </summary>
        public static PropertyDefinition WindowsStoreBlockAutoUpdate = new PropertyDefinition(nameof(WindowsStoreBlockAutoUpdate), typeof(bool));


        /// <summary>
        /// DeveloperUnlockSetting
        /// </summary>
        public static PropertyDefinition DeveloperUnlockSetting = new PropertyDefinition(nameof(DeveloperUnlockSetting), typeof(StateManagementSetting));


        /// <summary>
        /// SharedUserAppDataAllowed
        /// </summary>
        public static PropertyDefinition SharedUserAppDataAllowed = new PropertyDefinition(nameof(SharedUserAppDataAllowed), typeof(bool));


        /// <summary>
        /// AppsBlockWindowsStoreOriginatedApps
        /// </summary>
        public static PropertyDefinition AppsBlockWindowsStoreOriginatedApps = new PropertyDefinition(nameof(AppsBlockWindowsStoreOriginatedApps), typeof(bool));


        /// <summary>
        /// WindowsStoreEnablePrivateStoreOnly
        /// </summary>
        public static PropertyDefinition WindowsStoreEnablePrivateStoreOnly = new PropertyDefinition(nameof(WindowsStoreEnablePrivateStoreOnly), typeof(bool));


        /// <summary>
        /// StorageRestrictAppDataToSystemVolume
        /// </summary>
        public static PropertyDefinition StorageRestrictAppDataToSystemVolume = new PropertyDefinition(nameof(StorageRestrictAppDataToSystemVolume), typeof(bool));


        /// <summary>
        /// StorageRestrictAppInstallToSystemVolume
        /// </summary>
        public static PropertyDefinition StorageRestrictAppInstallToSystemVolume = new PropertyDefinition(nameof(StorageRestrictAppInstallToSystemVolume), typeof(bool));


        /// <summary>
        /// GameDvrBlocked
        /// </summary>
        public static PropertyDefinition GameDvrBlocked = new PropertyDefinition(nameof(GameDvrBlocked), typeof(bool));


        /// <summary>
        /// ExperienceBlockDeviceDiscovery
        /// </summary>
        public static PropertyDefinition ExperienceBlockDeviceDiscovery = new PropertyDefinition(nameof(ExperienceBlockDeviceDiscovery), typeof(bool));


        /// <summary>
        /// ExperienceBlockErrorDialogWhenNoSIM
        /// </summary>
        public static PropertyDefinition ExperienceBlockErrorDialogWhenNoSIM = new PropertyDefinition(nameof(ExperienceBlockErrorDialogWhenNoSIM), typeof(bool));


        /// <summary>
        /// ExperienceBlockTaskSwitcher
        /// </summary>
        public static PropertyDefinition ExperienceBlockTaskSwitcher = new PropertyDefinition(nameof(ExperienceBlockTaskSwitcher), typeof(bool));


        /// <summary>
        /// LogonBlockFastUserSwitching
        /// </summary>
        public static PropertyDefinition LogonBlockFastUserSwitching = new PropertyDefinition(nameof(LogonBlockFastUserSwitching), typeof(bool));


        /// <summary>
        /// TenantLockdownRequireNetworkDuringOutOfBoxExperience
        /// </summary>
        public static PropertyDefinition TenantLockdownRequireNetworkDuringOutOfBoxExperience = new PropertyDefinition(nameof(TenantLockdownRequireNetworkDuringOutOfBoxExperience), typeof(bool));


        /// <summary>
        /// AppManagementMSIAllowUserControlOverInstall
        /// </summary>
        public static PropertyDefinition AppManagementMSIAllowUserControlOverInstall = new PropertyDefinition(nameof(AppManagementMSIAllowUserControlOverInstall), typeof(bool));


        /// <summary>
        /// AppManagementMSIAlwaysInstallWithElevatedPrivileges
        /// </summary>
        public static PropertyDefinition AppManagementMSIAlwaysInstallWithElevatedPrivileges = new PropertyDefinition(nameof(AppManagementMSIAlwaysInstallWithElevatedPrivileges), typeof(bool));


        /// <summary>
        /// DataProtectionBlockDirectMemoryAccess
        /// </summary>
        public static PropertyDefinition DataProtectionBlockDirectMemoryAccess = new PropertyDefinition(nameof(DataProtectionBlockDirectMemoryAccess), typeof(bool));


        /// <summary>
        /// PrivacyAccessControls
        /// </summary>
        public static PropertyDefinition PrivacyAccessControls = new PropertyDefinition(nameof(PrivacyAccessControls), typeof(IList<WindowsPrivacyDataAccessControlItem>));

    }


    /// <summary>
    /// WindowsDefenderAdvancedThreatProtectionConfigurationObjectSchema
    /// </summary>
    public class WindowsDefenderAdvancedThreatProtectionConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AdvancedThreatProtectionOnboardingBlob
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOnboardingBlob = new PropertyDefinition(nameof(AdvancedThreatProtectionOnboardingBlob), typeof(string));


        /// <summary>
        /// AdvancedThreatProtectionOnboardingFilename
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOnboardingFilename = new PropertyDefinition(nameof(AdvancedThreatProtectionOnboardingFilename), typeof(string));


        /// <summary>
        /// AdvancedThreatProtectionAutoPopulateOnboardingBlob
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionAutoPopulateOnboardingBlob = new PropertyDefinition(nameof(AdvancedThreatProtectionAutoPopulateOnboardingBlob), typeof(bool));


        /// <summary>
        /// AllowSampleSharing
        /// </summary>
        public static PropertyDefinition AllowSampleSharing = new PropertyDefinition(nameof(AllowSampleSharing), typeof(bool));


        /// <summary>
        /// EnableExpeditedTelemetryReporting
        /// </summary>
        public static PropertyDefinition EnableExpeditedTelemetryReporting = new PropertyDefinition(nameof(EnableExpeditedTelemetryReporting), typeof(bool));


        /// <summary>
        /// AdvancedThreatProtectionOffboardingBlob
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOffboardingBlob = new PropertyDefinition(nameof(AdvancedThreatProtectionOffboardingBlob), typeof(string));


        /// <summary>
        /// AdvancedThreatProtectionOffboardingFilename
        /// </summary>
        public static PropertyDefinition AdvancedThreatProtectionOffboardingFilename = new PropertyDefinition(nameof(AdvancedThreatProtectionOffboardingFilename), typeof(string));

    }


    /// <summary>
    /// EditionUpgradeConfigurationObjectSchema
    /// </summary>
    public class EditionUpgradeConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// LicenseType
        /// </summary>
        public static PropertyDefinition LicenseType = new PropertyDefinition(nameof(LicenseType), typeof(EditionUpgradeLicenseType));


        /// <summary>
        /// TargetEdition
        /// </summary>
        public static PropertyDefinition TargetEdition = new PropertyDefinition(nameof(TargetEdition), typeof(Windows10EditionType));


        /// <summary>
        /// License
        /// </summary>
        public static PropertyDefinition License = new PropertyDefinition(nameof(License), typeof(string));


        /// <summary>
        /// ProductKey
        /// </summary>
        public static PropertyDefinition ProductKey = new PropertyDefinition(nameof(ProductKey), typeof(string));


        /// <summary>
        /// WindowsSMode
        /// </summary>
        public static PropertyDefinition WindowsSMode = new PropertyDefinition(nameof(WindowsSMode), typeof(WindowsSModeConfiguration));

    }


    /// <summary>
    /// Windows10NetworkBoundaryConfigurationObjectSchema
    /// </summary>
    public class Windows10NetworkBoundaryConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// WindowsNetworkIsolationPolicy
        /// </summary>
        public static PropertyDefinition WindowsNetworkIsolationPolicy = new PropertyDefinition(nameof(WindowsNetworkIsolationPolicy), typeof(WindowsNetworkIsolationPolicy));

    }


    /// <summary>
    /// Windows10CustomConfigurationObjectSchema
    /// </summary>
    public class Windows10CustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OmaSettings
        /// </summary>
        public static PropertyDefinition OmaSettings = new PropertyDefinition(nameof(OmaSettings), typeof(IList<OmaSetting>));

    }


    /// <summary>
    /// WindowsDeliveryOptimizationConfigurationObjectSchema
    /// </summary>
    public class WindowsDeliveryOptimizationConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// DeliveryOptimizationMode
        /// </summary>
        public static PropertyDefinition DeliveryOptimizationMode = new PropertyDefinition(nameof(DeliveryOptimizationMode), typeof(WindowsDeliveryOptimizationMode));

    }


    /// <summary>
    /// WindowsIdentityProtectionConfigurationObjectSchema
    /// </summary>
    public class WindowsIdentityProtectionConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// UseSecurityKeyForSignin
        /// </summary>
        public static PropertyDefinition UseSecurityKeyForSignin = new PropertyDefinition(nameof(UseSecurityKeyForSignin), typeof(bool));


        /// <summary>
        /// EnhancedAntiSpoofingForFacialFeaturesEnabled
        /// </summary>
        public static PropertyDefinition EnhancedAntiSpoofingForFacialFeaturesEnabled = new PropertyDefinition(nameof(EnhancedAntiSpoofingForFacialFeaturesEnabled), typeof(bool));


        /// <summary>
        /// PinMinimumLength
        /// </summary>
        public static PropertyDefinition PinMinimumLength = new PropertyDefinition(nameof(PinMinimumLength), typeof(int));


        /// <summary>
        /// PinMaximumLength
        /// </summary>
        public static PropertyDefinition PinMaximumLength = new PropertyDefinition(nameof(PinMaximumLength), typeof(int));


        /// <summary>
        /// PinUppercaseCharactersUsage
        /// </summary>
        public static PropertyDefinition PinUppercaseCharactersUsage = new PropertyDefinition(nameof(PinUppercaseCharactersUsage), typeof(ConfigurationUsage));


        /// <summary>
        /// PinLowercaseCharactersUsage
        /// </summary>
        public static PropertyDefinition PinLowercaseCharactersUsage = new PropertyDefinition(nameof(PinLowercaseCharactersUsage), typeof(ConfigurationUsage));


        /// <summary>
        /// PinSpecialCharactersUsage
        /// </summary>
        public static PropertyDefinition PinSpecialCharactersUsage = new PropertyDefinition(nameof(PinSpecialCharactersUsage), typeof(ConfigurationUsage));


        /// <summary>
        /// PinExpirationInDays
        /// </summary>
        public static PropertyDefinition PinExpirationInDays = new PropertyDefinition(nameof(PinExpirationInDays), typeof(int));


        /// <summary>
        /// PinPreviousBlockCount
        /// </summary>
        public static PropertyDefinition PinPreviousBlockCount = new PropertyDefinition(nameof(PinPreviousBlockCount), typeof(int));


        /// <summary>
        /// PinRecoveryEnabled
        /// </summary>
        public static PropertyDefinition PinRecoveryEnabled = new PropertyDefinition(nameof(PinRecoveryEnabled), typeof(bool));


        /// <summary>
        /// SecurityDeviceRequired
        /// </summary>
        public static PropertyDefinition SecurityDeviceRequired = new PropertyDefinition(nameof(SecurityDeviceRequired), typeof(bool));


        /// <summary>
        /// UnlockWithBiometricsEnabled
        /// </summary>
        public static PropertyDefinition UnlockWithBiometricsEnabled = new PropertyDefinition(nameof(UnlockWithBiometricsEnabled), typeof(bool));


        /// <summary>
        /// UseCertificatesForOnPremisesAuthEnabled
        /// </summary>
        public static PropertyDefinition UseCertificatesForOnPremisesAuthEnabled = new PropertyDefinition(nameof(UseCertificatesForOnPremisesAuthEnabled), typeof(bool));


        /// <summary>
        /// WindowsHelloForBusinessBlocked
        /// </summary>
        public static PropertyDefinition WindowsHelloForBusinessBlocked = new PropertyDefinition(nameof(WindowsHelloForBusinessBlocked), typeof(bool));

    }


    /// <summary>
    /// WindowsKioskConfigurationObjectSchema
    /// </summary>
    public class WindowsKioskConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// KioskProfiles
        /// </summary>
        public static PropertyDefinition KioskProfiles = new PropertyDefinition(nameof(KioskProfiles), typeof(IList<WindowsKioskProfile>));


        /// <summary>
        /// KioskBrowserDefaultUrl
        /// </summary>
        public static PropertyDefinition KioskBrowserDefaultUrl = new PropertyDefinition(nameof(KioskBrowserDefaultUrl), typeof(string));


        /// <summary>
        /// KioskBrowserEnableHomeButton
        /// </summary>
        public static PropertyDefinition KioskBrowserEnableHomeButton = new PropertyDefinition(nameof(KioskBrowserEnableHomeButton), typeof(bool));


        /// <summary>
        /// KioskBrowserEnableNavigationButtons
        /// </summary>
        public static PropertyDefinition KioskBrowserEnableNavigationButtons = new PropertyDefinition(nameof(KioskBrowserEnableNavigationButtons), typeof(bool));


        /// <summary>
        /// KioskBrowserEnableEndSessionButton
        /// </summary>
        public static PropertyDefinition KioskBrowserEnableEndSessionButton = new PropertyDefinition(nameof(KioskBrowserEnableEndSessionButton), typeof(bool));


        /// <summary>
        /// KioskBrowserRestartOnIdleTimeInMinutes
        /// </summary>
        public static PropertyDefinition KioskBrowserRestartOnIdleTimeInMinutes = new PropertyDefinition(nameof(KioskBrowserRestartOnIdleTimeInMinutes), typeof(int));


        /// <summary>
        /// KioskBrowserBlockedURLs
        /// </summary>
        public static PropertyDefinition KioskBrowserBlockedURLs = new PropertyDefinition(nameof(KioskBrowserBlockedURLs), typeof(IList<String>));


        /// <summary>
        /// KioskBrowserBlockedUrlExceptions
        /// </summary>
        public static PropertyDefinition KioskBrowserBlockedUrlExceptions = new PropertyDefinition(nameof(KioskBrowserBlockedUrlExceptions), typeof(IList<String>));


        /// <summary>
        /// EdgeKioskEnablePublicBrowsing
        /// </summary>
        public static PropertyDefinition EdgeKioskEnablePublicBrowsing = new PropertyDefinition(nameof(EdgeKioskEnablePublicBrowsing), typeof(bool));


        /// <summary>
        /// EdgeKioskResetAfterIdleTimeInMinutes
        /// </summary>
        public static PropertyDefinition EdgeKioskResetAfterIdleTimeInMinutes = new PropertyDefinition(nameof(EdgeKioskResetAfterIdleTimeInMinutes), typeof(int));

    }


    /// <summary>
    /// Windows10EnterpriseModernAppManagementConfigurationObjectSchema
    /// </summary>
    public class Windows10EnterpriseModernAppManagementConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// UninstallBuiltInApps
        /// </summary>
        public static PropertyDefinition UninstallBuiltInApps = new PropertyDefinition(nameof(UninstallBuiltInApps), typeof(bool));

    }


    /// <summary>
    /// SharedPCConfigurationObjectSchema
    /// </summary>
    public class SharedPCConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AccountManagerPolicy
        /// </summary>
        public static PropertyDefinition AccountManagerPolicy = new PropertyDefinition(nameof(AccountManagerPolicy), typeof(SharedPCAccountManagerPolicy));


        /// <summary>
        /// AllowedAccounts
        /// </summary>
        public static PropertyDefinition AllowedAccounts = new PropertyDefinition(nameof(AllowedAccounts), typeof(SharedPCAllowedAccountType));


        /// <summary>
        /// LocalStorage
        /// </summary>
        public static PropertyDefinition LocalStorage = new PropertyDefinition(nameof(LocalStorage), typeof(Enablement));


        /// <summary>
        /// AllowLocalStorage
        /// </summary>
        public static PropertyDefinition AllowLocalStorage = new PropertyDefinition(nameof(AllowLocalStorage), typeof(bool));


        /// <summary>
        /// SetAccountManager
        /// </summary>
        public static PropertyDefinition SetAccountManager = new PropertyDefinition(nameof(SetAccountManager), typeof(Enablement));


        /// <summary>
        /// DisableAccountManager
        /// </summary>
        public static PropertyDefinition DisableAccountManager = new PropertyDefinition(nameof(DisableAccountManager), typeof(bool));


        /// <summary>
        /// SetEduPolicies
        /// </summary>
        public static PropertyDefinition SetEduPolicies = new PropertyDefinition(nameof(SetEduPolicies), typeof(Enablement));


        /// <summary>
        /// DisableEduPolicies
        /// </summary>
        public static PropertyDefinition DisableEduPolicies = new PropertyDefinition(nameof(DisableEduPolicies), typeof(bool));


        /// <summary>
        /// SetPowerPolicies
        /// </summary>
        public static PropertyDefinition SetPowerPolicies = new PropertyDefinition(nameof(SetPowerPolicies), typeof(Enablement));


        /// <summary>
        /// DisablePowerPolicies
        /// </summary>
        public static PropertyDefinition DisablePowerPolicies = new PropertyDefinition(nameof(DisablePowerPolicies), typeof(bool));


        /// <summary>
        /// SignInOnResume
        /// </summary>
        public static PropertyDefinition SignInOnResume = new PropertyDefinition(nameof(SignInOnResume), typeof(Enablement));


        /// <summary>
        /// DisableSignInOnResume
        /// </summary>
        public static PropertyDefinition DisableSignInOnResume = new PropertyDefinition(nameof(DisableSignInOnResume), typeof(bool));


        /// <summary>
        /// Enabled
        /// </summary>
        public static PropertyDefinition Enabled = new PropertyDefinition(nameof(Enabled), typeof(bool));


        /// <summary>
        /// IdleTimeBeforeSleepInSeconds
        /// </summary>
        public static PropertyDefinition IdleTimeBeforeSleepInSeconds = new PropertyDefinition(nameof(IdleTimeBeforeSleepInSeconds), typeof(int));


        /// <summary>
        /// KioskAppDisplayName
        /// </summary>
        public static PropertyDefinition KioskAppDisplayName = new PropertyDefinition(nameof(KioskAppDisplayName), typeof(string));


        /// <summary>
        /// KioskAppUserModelId
        /// </summary>
        public static PropertyDefinition KioskAppUserModelId = new PropertyDefinition(nameof(KioskAppUserModelId), typeof(string));


        /// <summary>
        /// MaintenanceStartTime
        /// </summary>
        public static PropertyDefinition MaintenanceStartTime = new PropertyDefinition(nameof(MaintenanceStartTime), typeof(TimeSpan));

    }


    /// <summary>
    /// Windows10PFXImportCertificateProfileObjectSchema
    /// </summary>
    public class Windows10PFXImportCertificateProfileObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// KeyStorageProvider
        /// </summary>
        public static PropertyDefinition KeyStorageProvider = new PropertyDefinition(nameof(KeyStorageProvider), typeof(KeyStorageProviderOption));

    }


    /// <summary>
    /// Windows10SecureAssessmentConfigurationObjectSchema
    /// </summary>
    public class Windows10SecureAssessmentConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// LaunchUri
        /// </summary>
        public static PropertyDefinition LaunchUri = new PropertyDefinition(nameof(LaunchUri), typeof(string));


        /// <summary>
        /// ConfigurationAccount
        /// </summary>
        public static PropertyDefinition ConfigurationAccount = new PropertyDefinition(nameof(ConfigurationAccount), typeof(string));


        /// <summary>
        /// ConfigurationAccountType
        /// </summary>
        public static PropertyDefinition ConfigurationAccountType = new PropertyDefinition(nameof(ConfigurationAccountType), typeof(SecureAssessmentAccountType));


        /// <summary>
        /// AllowPrinting
        /// </summary>
        public static PropertyDefinition AllowPrinting = new PropertyDefinition(nameof(AllowPrinting), typeof(bool));


        /// <summary>
        /// AllowScreenCapture
        /// </summary>
        public static PropertyDefinition AllowScreenCapture = new PropertyDefinition(nameof(AllowScreenCapture), typeof(bool));


        /// <summary>
        /// AllowTextSuggestion
        /// </summary>
        public static PropertyDefinition AllowTextSuggestion = new PropertyDefinition(nameof(AllowTextSuggestion), typeof(bool));

    }


    /// <summary>
    /// WindowsWifiConfigurationObjectSchema
    /// </summary>
    public class WindowsWifiConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PreSharedKey
        /// </summary>
        public static PropertyDefinition PreSharedKey = new PropertyDefinition(nameof(PreSharedKey), typeof(string));


        /// <summary>
        /// WifiSecurityType
        /// </summary>
        public static PropertyDefinition WifiSecurityType = new PropertyDefinition(nameof(WifiSecurityType), typeof(WiFiSecurityType));


        /// <summary>
        /// MeteredConnectionLimit
        /// </summary>
        public static PropertyDefinition MeteredConnectionLimit = new PropertyDefinition(nameof(MeteredConnectionLimit), typeof(MeteredConnectionLimitType));


        /// <summary>
        /// Ssid
        /// </summary>
        public static PropertyDefinition Ssid = new PropertyDefinition(nameof(Ssid), typeof(string));


        /// <summary>
        /// NetworkName
        /// </summary>
        public static PropertyDefinition NetworkName = new PropertyDefinition(nameof(NetworkName), typeof(string));


        /// <summary>
        /// ConnectAutomatically
        /// </summary>
        public static PropertyDefinition ConnectAutomatically = new PropertyDefinition(nameof(ConnectAutomatically), typeof(bool));


        /// <summary>
        /// ConnectToPreferredNetwork
        /// </summary>
        public static PropertyDefinition ConnectToPreferredNetwork = new PropertyDefinition(nameof(ConnectToPreferredNetwork), typeof(bool));


        /// <summary>
        /// ConnectWhenNetworkNameIsHidden
        /// </summary>
        public static PropertyDefinition ConnectWhenNetworkNameIsHidden = new PropertyDefinition(nameof(ConnectWhenNetworkNameIsHidden), typeof(bool));


        /// <summary>
        /// ProxySetting
        /// </summary>
        public static PropertyDefinition ProxySetting = new PropertyDefinition(nameof(ProxySetting), typeof(WiFiProxySetting));


        /// <summary>
        /// ProxyManualAddress
        /// </summary>
        public static PropertyDefinition ProxyManualAddress = new PropertyDefinition(nameof(ProxyManualAddress), typeof(string));


        /// <summary>
        /// ProxyManualPort
        /// </summary>
        public static PropertyDefinition ProxyManualPort = new PropertyDefinition(nameof(ProxyManualPort), typeof(int));


        /// <summary>
        /// ProxyAutomaticConfigurationUrl
        /// </summary>
        public static PropertyDefinition ProxyAutomaticConfigurationUrl = new PropertyDefinition(nameof(ProxyAutomaticConfigurationUrl), typeof(string));


        /// <summary>
        /// ForceFIPSCompliance
        /// </summary>
        public static PropertyDefinition ForceFIPSCompliance = new PropertyDefinition(nameof(ForceFIPSCompliance), typeof(bool));

    }


    /// <summary>
    /// WindowsWifiEnterpriseEAPConfigurationObjectSchema
    /// </summary>
    public class WindowsWifiEnterpriseEAPConfigurationObjectSchema : WindowsWifiConfigurationObjectSchema
    {

        /// <summary>
        /// NetworkSingleSignOn
        /// </summary>
        public static PropertyDefinition NetworkSingleSignOn = new PropertyDefinition(nameof(NetworkSingleSignOn), typeof(NetworkSingleSignOnType));


        /// <summary>
        /// MaximumAuthenticationTimeoutInSeconds
        /// </summary>
        public static PropertyDefinition MaximumAuthenticationTimeoutInSeconds = new PropertyDefinition(nameof(MaximumAuthenticationTimeoutInSeconds), typeof(int));


        /// <summary>
        /// PromptForAdditionalAuthenticationCredentials
        /// </summary>
        public static PropertyDefinition PromptForAdditionalAuthenticationCredentials = new PropertyDefinition(nameof(PromptForAdditionalAuthenticationCredentials), typeof(bool));


        /// <summary>
        /// EnablePairwiseMasterKeyCaching
        /// </summary>
        public static PropertyDefinition EnablePairwiseMasterKeyCaching = new PropertyDefinition(nameof(EnablePairwiseMasterKeyCaching), typeof(bool));


        /// <summary>
        /// MaximumPairwiseMasterKeyCacheTimeInMinutes
        /// </summary>
        public static PropertyDefinition MaximumPairwiseMasterKeyCacheTimeInMinutes = new PropertyDefinition(nameof(MaximumPairwiseMasterKeyCacheTimeInMinutes), typeof(int));


        /// <summary>
        /// MaximumNumberOfPairwiseMasterKeysInCache
        /// </summary>
        public static PropertyDefinition MaximumNumberOfPairwiseMasterKeysInCache = new PropertyDefinition(nameof(MaximumNumberOfPairwiseMasterKeysInCache), typeof(int));


        /// <summary>
        /// EnablePreAuthentication
        /// </summary>
        public static PropertyDefinition EnablePreAuthentication = new PropertyDefinition(nameof(EnablePreAuthentication), typeof(bool));


        /// <summary>
        /// MaximumPreAuthenticationAttempts
        /// </summary>
        public static PropertyDefinition MaximumPreAuthenticationAttempts = new PropertyDefinition(nameof(MaximumPreAuthenticationAttempts), typeof(int));


        /// <summary>
        /// EapType
        /// </summary>
        public static PropertyDefinition EapType = new PropertyDefinition(nameof(EapType), typeof(EapType));


        /// <summary>
        /// TrustedServerCertificateNames
        /// </summary>
        public static PropertyDefinition TrustedServerCertificateNames = new PropertyDefinition(nameof(TrustedServerCertificateNames), typeof(IList<String>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(WiFiAuthenticationMethod));


        /// <summary>
        /// InnerAuthenticationProtocolForEAPTTLS
        /// </summary>
        public static PropertyDefinition InnerAuthenticationProtocolForEAPTTLS = new PropertyDefinition(nameof(InnerAuthenticationProtocolForEAPTTLS), typeof(NonEapAuthenticationMethodForEapTtlsType));


        /// <summary>
        /// OuterIdentityPrivacyTemporaryValue
        /// </summary>
        public static PropertyDefinition OuterIdentityPrivacyTemporaryValue = new PropertyDefinition(nameof(OuterIdentityPrivacyTemporaryValue), typeof(string));


        /// <summary>
        /// RootCertificatesForServerValidation
        /// </summary>
        public static PropertyDefinition RootCertificatesForServerValidation = new PropertyDefinition(nameof(RootCertificatesForServerValidation), typeof(IList<Windows81TrustedRootCertificate>));


        /// <summary>
        /// IdentityCertificateForClientAuthentication
        /// </summary>
        public static PropertyDefinition IdentityCertificateForClientAuthentication = new PropertyDefinition(nameof(IdentityCertificateForClientAuthentication), typeof(WindowsCertificateProfileBase));

    }


    /// <summary>
    /// Windows81TrustedRootCertificateObjectSchema
    /// </summary>
    public class Windows81TrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));


        /// <summary>
        /// DestinationStore
        /// </summary>
        public static PropertyDefinition DestinationStore = new PropertyDefinition(nameof(DestinationStore), typeof(CertificateDestinationStore));

    }


    /// <summary>
    /// WindowsCertificateProfileBaseObjectSchema
    /// </summary>
    public class WindowsCertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// KeyStorageProvider
        /// </summary>
        public static PropertyDefinition KeyStorageProvider = new PropertyDefinition(nameof(KeyStorageProvider), typeof(KeyStorageProviderOption));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));

    }


    /// <summary>
    /// Windows10ImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class Windows10ImportedPFXCertificateProfileObjectSchema : WindowsCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// WindowsPhone81ImportedPFXCertificateProfileObjectSchema
    /// </summary>
    public class WindowsPhone81ImportedPFXCertificateProfileObjectSchema : WindowsCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// IntendedPurpose
        /// </summary>
        public static PropertyDefinition IntendedPurpose = new PropertyDefinition(nameof(IntendedPurpose), typeof(IntendedPurpose));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// Windows10CertificateProfileBaseObjectSchema
    /// </summary>
    public class Windows10CertificateProfileBaseObjectSchema : WindowsCertificateProfileBaseObjectSchema
    {
    }


    /// <summary>
    /// Windows10PkcsCertificateProfileObjectSchema
    /// </summary>
    public class Windows10PkcsCertificateProfileObjectSchema : Windows10CertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// CertificationAuthority
        /// </summary>
        public static PropertyDefinition CertificationAuthority = new PropertyDefinition(nameof(CertificationAuthority), typeof(string));


        /// <summary>
        /// CertificationAuthorityName
        /// </summary>
        public static PropertyDefinition CertificationAuthorityName = new PropertyDefinition(nameof(CertificationAuthorityName), typeof(string));


        /// <summary>
        /// CertificateTemplateName
        /// </summary>
        public static PropertyDefinition CertificateTemplateName = new PropertyDefinition(nameof(CertificateTemplateName), typeof(string));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// Windows81CertificateProfileBaseObjectSchema
    /// </summary>
    public class Windows81CertificateProfileBaseObjectSchema : WindowsCertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));


        /// <summary>
        /// CustomSubjectAlternativeNames
        /// </summary>
        public static PropertyDefinition CustomSubjectAlternativeNames = new PropertyDefinition(nameof(CustomSubjectAlternativeNames), typeof(IList<CustomSubjectAlternativeName>));

    }


    /// <summary>
    /// Windows81SCEPCertificateProfileObjectSchema
    /// </summary>
    public class Windows81SCEPCertificateProfileObjectSchema : Windows81CertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// CertificateStore
        /// </summary>
        public static PropertyDefinition CertificateStore = new PropertyDefinition(nameof(CertificateStore), typeof(CertificateStore));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(Windows81TrustedRootCertificate));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// Windows81WifiImportConfigurationObjectSchema
    /// </summary>
    public class Windows81WifiImportConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// PayloadFileName
        /// </summary>
        public static PropertyDefinition PayloadFileName = new PropertyDefinition(nameof(PayloadFileName), typeof(string));


        /// <summary>
        /// ProfileName
        /// </summary>
        public static PropertyDefinition ProfileName = new PropertyDefinition(nameof(ProfileName), typeof(string));


        /// <summary>
        /// Payload
        /// </summary>
        public static PropertyDefinition Payload = new PropertyDefinition(nameof(Payload), typeof(string));

    }


    /// <summary>
    /// WindowsDomainJoinConfigurationObjectSchema
    /// </summary>
    public class WindowsDomainJoinConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ComputerNameStaticPrefix
        /// </summary>
        public static PropertyDefinition ComputerNameStaticPrefix = new PropertyDefinition(nameof(ComputerNameStaticPrefix), typeof(string));


        /// <summary>
        /// ComputerNameSuffixRandomCharCount
        /// </summary>
        public static PropertyDefinition ComputerNameSuffixRandomCharCount = new PropertyDefinition(nameof(ComputerNameSuffixRandomCharCount), typeof(int));


        /// <summary>
        /// ActiveDirectoryDomainName
        /// </summary>
        public static PropertyDefinition ActiveDirectoryDomainName = new PropertyDefinition(nameof(ActiveDirectoryDomainName), typeof(string));


        /// <summary>
        /// OrganizationalUnit
        /// </summary>
        public static PropertyDefinition OrganizationalUnit = new PropertyDefinition(nameof(OrganizationalUnit), typeof(string));


        /// <summary>
        /// NetworkAccessConfigurations
        /// </summary>
        public static PropertyDefinition NetworkAccessConfigurations = new PropertyDefinition(nameof(NetworkAccessConfigurations), typeof(IList<DeviceConfiguration>));

    }


    /// <summary>
    /// WindowsPhone81CustomConfigurationObjectSchema
    /// </summary>
    public class WindowsPhone81CustomConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// OmaSettings
        /// </summary>
        public static PropertyDefinition OmaSettings = new PropertyDefinition(nameof(OmaSettings), typeof(IList<OmaSetting>));

    }


    /// <summary>
    /// WindowsPhone81TrustedRootCertificateObjectSchema
    /// </summary>
    public class WindowsPhone81TrustedRootCertificateObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// TrustedRootCertificate
        /// </summary>
        public static PropertyDefinition TrustedRootCertificate = new PropertyDefinition(nameof(TrustedRootCertificate), typeof(string));


        /// <summary>
        /// CertFileName
        /// </summary>
        public static PropertyDefinition CertFileName = new PropertyDefinition(nameof(CertFileName), typeof(string));

    }


    /// <summary>
    /// WindowsUpdateStateObjectSchema
    /// </summary>
    public class WindowsUpdateStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// DeviceDisplayName
        /// </summary>
        public static PropertyDefinition DeviceDisplayName = new PropertyDefinition(nameof(DeviceDisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(WindowsUpdateStatus));


        /// <summary>
        /// QualityUpdateVersion
        /// </summary>
        public static PropertyDefinition QualityUpdateVersion = new PropertyDefinition(nameof(QualityUpdateVersion), typeof(string));


        /// <summary>
        /// FeatureUpdateVersion
        /// </summary>
        public static PropertyDefinition FeatureUpdateVersion = new PropertyDefinition(nameof(FeatureUpdateVersion), typeof(string));


        /// <summary>
        /// LastScanDateTime
        /// </summary>
        public static PropertyDefinition LastScanDateTime = new PropertyDefinition(nameof(LastScanDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// WindowsVpnConfigurationObjectSchema
    /// </summary>
    public class WindowsVpnConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ConnectionName
        /// </summary>
        public static PropertyDefinition ConnectionName = new PropertyDefinition(nameof(ConnectionName), typeof(string));


        /// <summary>
        /// Servers
        /// </summary>
        public static PropertyDefinition Servers = new PropertyDefinition(nameof(Servers), typeof(IList<VpnServer>));


        /// <summary>
        /// CustomXml
        /// </summary>
        public static PropertyDefinition CustomXml = new PropertyDefinition(nameof(CustomXml), typeof(string));

    }


    /// <summary>
    /// Windows10VpnConfigurationObjectSchema
    /// </summary>
    public class Windows10VpnConfigurationObjectSchema : WindowsVpnConfigurationObjectSchema
    {

        /// <summary>
        /// ProfileTarget
        /// </summary>
        public static PropertyDefinition ProfileTarget = new PropertyDefinition(nameof(ProfileTarget), typeof(Windows10VpnProfileTarget));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(Windows10VpnConnectionType));


        /// <summary>
        /// EnableSplitTunneling
        /// </summary>
        public static PropertyDefinition EnableSplitTunneling = new PropertyDefinition(nameof(EnableSplitTunneling), typeof(bool));


        /// <summary>
        /// EnableAlwaysOn
        /// </summary>
        public static PropertyDefinition EnableAlwaysOn = new PropertyDefinition(nameof(EnableAlwaysOn), typeof(bool));


        /// <summary>
        /// EnableDeviceTunnel
        /// </summary>
        public static PropertyDefinition EnableDeviceTunnel = new PropertyDefinition(nameof(EnableDeviceTunnel), typeof(bool));


        /// <summary>
        /// EnableDnsRegistration
        /// </summary>
        public static PropertyDefinition EnableDnsRegistration = new PropertyDefinition(nameof(EnableDnsRegistration), typeof(bool));


        /// <summary>
        /// DnsSuffixes
        /// </summary>
        public static PropertyDefinition DnsSuffixes = new PropertyDefinition(nameof(DnsSuffixes), typeof(IList<String>));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(Windows10VpnAuthenticationMethod));


        /// <summary>
        /// RememberUserCredentials
        /// </summary>
        public static PropertyDefinition RememberUserCredentials = new PropertyDefinition(nameof(RememberUserCredentials), typeof(bool));


        /// <summary>
        /// EnableConditionalAccess
        /// </summary>
        public static PropertyDefinition EnableConditionalAccess = new PropertyDefinition(nameof(EnableConditionalAccess), typeof(bool));


        /// <summary>
        /// EnableSingleSignOnWithAlternateCertificate
        /// </summary>
        public static PropertyDefinition EnableSingleSignOnWithAlternateCertificate = new PropertyDefinition(nameof(EnableSingleSignOnWithAlternateCertificate), typeof(bool));


        /// <summary>
        /// SingleSignOnEku
        /// </summary>
        public static PropertyDefinition SingleSignOnEku = new PropertyDefinition(nameof(SingleSignOnEku), typeof(ExtendedKeyUsage));


        /// <summary>
        /// SingleSignOnIssuerHash
        /// </summary>
        public static PropertyDefinition SingleSignOnIssuerHash = new PropertyDefinition(nameof(SingleSignOnIssuerHash), typeof(string));


        /// <summary>
        /// EapXml
        /// </summary>
        public static PropertyDefinition EapXml = new PropertyDefinition(nameof(EapXml), typeof(string));


        /// <summary>
        /// ProxyServer
        /// </summary>
        public static PropertyDefinition ProxyServer = new PropertyDefinition(nameof(ProxyServer), typeof(Windows10VpnProxyServer));


        /// <summary>
        /// AssociatedApps
        /// </summary>
        public static PropertyDefinition AssociatedApps = new PropertyDefinition(nameof(AssociatedApps), typeof(IList<Windows10AssociatedApps>));


        /// <summary>
        /// OnlyAssociatedAppsCanUseConnection
        /// </summary>
        public static PropertyDefinition OnlyAssociatedAppsCanUseConnection = new PropertyDefinition(nameof(OnlyAssociatedAppsCanUseConnection), typeof(bool));


        /// <summary>
        /// WindowsInformationProtectionDomain
        /// </summary>
        public static PropertyDefinition WindowsInformationProtectionDomain = new PropertyDefinition(nameof(WindowsInformationProtectionDomain), typeof(string));


        /// <summary>
        /// TrafficRules
        /// </summary>
        public static PropertyDefinition TrafficRules = new PropertyDefinition(nameof(TrafficRules), typeof(IList<VpnTrafficRule>));


        /// <summary>
        /// Routes
        /// </summary>
        public static PropertyDefinition Routes = new PropertyDefinition(nameof(Routes), typeof(IList<VpnRoute>));


        /// <summary>
        /// DnsRules
        /// </summary>
        public static PropertyDefinition DnsRules = new PropertyDefinition(nameof(DnsRules), typeof(IList<VpnDnsRule>));


        /// <summary>
        /// TrustedNetworkDomains
        /// </summary>
        public static PropertyDefinition TrustedNetworkDomains = new PropertyDefinition(nameof(TrustedNetworkDomains), typeof(IList<String>));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(WindowsCertificateProfileBase));

    }


    /// <summary>
    /// Windows81VpnConfigurationObjectSchema
    /// </summary>
    public class Windows81VpnConfigurationObjectSchema : WindowsVpnConfigurationObjectSchema
    {

        /// <summary>
        /// ApplyOnlyToWindows81
        /// </summary>
        public static PropertyDefinition ApplyOnlyToWindows81 = new PropertyDefinition(nameof(ApplyOnlyToWindows81), typeof(bool));


        /// <summary>
        /// ConnectionType
        /// </summary>
        public static PropertyDefinition ConnectionType = new PropertyDefinition(nameof(ConnectionType), typeof(WindowsVpnConnectionType));


        /// <summary>
        /// LoginGroupOrDomain
        /// </summary>
        public static PropertyDefinition LoginGroupOrDomain = new PropertyDefinition(nameof(LoginGroupOrDomain), typeof(string));


        /// <summary>
        /// EnableSplitTunneling
        /// </summary>
        public static PropertyDefinition EnableSplitTunneling = new PropertyDefinition(nameof(EnableSplitTunneling), typeof(bool));


        /// <summary>
        /// ProxyServer
        /// </summary>
        public static PropertyDefinition ProxyServer = new PropertyDefinition(nameof(ProxyServer), typeof(Windows81VpnProxyServer));

    }


    /// <summary>
    /// WindowsPhone81VpnConfigurationObjectSchema
    /// </summary>
    public class WindowsPhone81VpnConfigurationObjectSchema : Windows81VpnConfigurationObjectSchema
    {

        /// <summary>
        /// BypassVpnOnCompanyWifi
        /// </summary>
        public static PropertyDefinition BypassVpnOnCompanyWifi = new PropertyDefinition(nameof(BypassVpnOnCompanyWifi), typeof(bool));


        /// <summary>
        /// BypassVpnOnHomeWifi
        /// </summary>
        public static PropertyDefinition BypassVpnOnHomeWifi = new PropertyDefinition(nameof(BypassVpnOnHomeWifi), typeof(bool));


        /// <summary>
        /// AuthenticationMethod
        /// </summary>
        public static PropertyDefinition AuthenticationMethod = new PropertyDefinition(nameof(AuthenticationMethod), typeof(VpnAuthenticationMethod));


        /// <summary>
        /// RememberUserCredentials
        /// </summary>
        public static PropertyDefinition RememberUserCredentials = new PropertyDefinition(nameof(RememberUserCredentials), typeof(bool));


        /// <summary>
        /// DnsSuffixSearchList
        /// </summary>
        public static PropertyDefinition DnsSuffixSearchList = new PropertyDefinition(nameof(DnsSuffixSearchList), typeof(IList<String>));


        /// <summary>
        /// IdentityCertificate
        /// </summary>
        public static PropertyDefinition IdentityCertificate = new PropertyDefinition(nameof(IdentityCertificate), typeof(WindowsPhone81CertificateProfileBase));

    }


    /// <summary>
    /// WindowsPhone81CertificateProfileBaseObjectSchema
    /// </summary>
    public class WindowsPhone81CertificateProfileBaseObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// RenewalThresholdPercentage
        /// </summary>
        public static PropertyDefinition RenewalThresholdPercentage = new PropertyDefinition(nameof(RenewalThresholdPercentage), typeof(int));


        /// <summary>
        /// KeyStorageProvider
        /// </summary>
        public static PropertyDefinition KeyStorageProvider = new PropertyDefinition(nameof(KeyStorageProvider), typeof(KeyStorageProviderOption));


        /// <summary>
        /// SubjectNameFormat
        /// </summary>
        public static PropertyDefinition SubjectNameFormat = new PropertyDefinition(nameof(SubjectNameFormat), typeof(SubjectNameFormat));


        /// <summary>
        /// SubjectAlternativeNameType
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameType = new PropertyDefinition(nameof(SubjectAlternativeNameType), typeof(SubjectAlternativeNameType));


        /// <summary>
        /// CertificateValidityPeriodValue
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodValue = new PropertyDefinition(nameof(CertificateValidityPeriodValue), typeof(int));


        /// <summary>
        /// CertificateValidityPeriodScale
        /// </summary>
        public static PropertyDefinition CertificateValidityPeriodScale = new PropertyDefinition(nameof(CertificateValidityPeriodScale), typeof(CertificateValidityPeriodScale));


        /// <summary>
        /// ExtendedKeyUsages
        /// </summary>
        public static PropertyDefinition ExtendedKeyUsages = new PropertyDefinition(nameof(ExtendedKeyUsages), typeof(IList<ExtendedKeyUsage>));

    }


    /// <summary>
    /// WindowsPhone81SCEPCertificateProfileObjectSchema
    /// </summary>
    public class WindowsPhone81SCEPCertificateProfileObjectSchema : WindowsPhone81CertificateProfileBaseObjectSchema
    {

        /// <summary>
        /// ScepServerUrls
        /// </summary>
        public static PropertyDefinition ScepServerUrls = new PropertyDefinition(nameof(ScepServerUrls), typeof(IList<String>));


        /// <summary>
        /// SubjectNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectNameFormatString = new PropertyDefinition(nameof(SubjectNameFormatString), typeof(string));


        /// <summary>
        /// KeyUsage
        /// </summary>
        public static PropertyDefinition KeyUsage = new PropertyDefinition(nameof(KeyUsage), typeof(KeyUsages));


        /// <summary>
        /// KeySize
        /// </summary>
        public static PropertyDefinition KeySize = new PropertyDefinition(nameof(KeySize), typeof(KeySize));


        /// <summary>
        /// HashAlgorithm
        /// </summary>
        public static PropertyDefinition HashAlgorithm = new PropertyDefinition(nameof(HashAlgorithm), typeof(HashAlgorithms));


        /// <summary>
        /// SubjectAlternativeNameFormatString
        /// </summary>
        public static PropertyDefinition SubjectAlternativeNameFormatString = new PropertyDefinition(nameof(SubjectAlternativeNameFormatString), typeof(string));


        /// <summary>
        /// RootCertificate
        /// </summary>
        public static PropertyDefinition RootCertificate = new PropertyDefinition(nameof(RootCertificate), typeof(WindowsPhone81TrustedRootCertificate));


        /// <summary>
        /// ManagedDeviceCertificateStates
        /// </summary>
        public static PropertyDefinition ManagedDeviceCertificateStates = new PropertyDefinition(nameof(ManagedDeviceCertificateStates), typeof(IList<ManagedDeviceCertificateState>));

    }


    /// <summary>
    /// Windows81GeneralConfigurationObjectSchema
    /// </summary>
    public class Windows81GeneralConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AccountsBlockAddingNonMicrosoftAccountEmail
        /// </summary>
        public static PropertyDefinition AccountsBlockAddingNonMicrosoftAccountEmail = new PropertyDefinition(nameof(AccountsBlockAddingNonMicrosoftAccountEmail), typeof(bool));


        /// <summary>
        /// ApplyOnlyToWindows81
        /// </summary>
        public static PropertyDefinition ApplyOnlyToWindows81 = new PropertyDefinition(nameof(ApplyOnlyToWindows81), typeof(bool));


        /// <summary>
        /// BrowserBlockAutofill
        /// </summary>
        public static PropertyDefinition BrowserBlockAutofill = new PropertyDefinition(nameof(BrowserBlockAutofill), typeof(bool));


        /// <summary>
        /// BrowserBlockAutomaticDetectionOfIntranetSites
        /// </summary>
        public static PropertyDefinition BrowserBlockAutomaticDetectionOfIntranetSites = new PropertyDefinition(nameof(BrowserBlockAutomaticDetectionOfIntranetSites), typeof(bool));


        /// <summary>
        /// BrowserBlockEnterpriseModeAccess
        /// </summary>
        public static PropertyDefinition BrowserBlockEnterpriseModeAccess = new PropertyDefinition(nameof(BrowserBlockEnterpriseModeAccess), typeof(bool));


        /// <summary>
        /// BrowserBlockJavaScript
        /// </summary>
        public static PropertyDefinition BrowserBlockJavaScript = new PropertyDefinition(nameof(BrowserBlockJavaScript), typeof(bool));


        /// <summary>
        /// BrowserBlockPlugins
        /// </summary>
        public static PropertyDefinition BrowserBlockPlugins = new PropertyDefinition(nameof(BrowserBlockPlugins), typeof(bool));


        /// <summary>
        /// BrowserBlockPopups
        /// </summary>
        public static PropertyDefinition BrowserBlockPopups = new PropertyDefinition(nameof(BrowserBlockPopups), typeof(bool));


        /// <summary>
        /// BrowserBlockSendingDoNotTrackHeader
        /// </summary>
        public static PropertyDefinition BrowserBlockSendingDoNotTrackHeader = new PropertyDefinition(nameof(BrowserBlockSendingDoNotTrackHeader), typeof(bool));


        /// <summary>
        /// BrowserBlockSingleWordEntryOnIntranetSites
        /// </summary>
        public static PropertyDefinition BrowserBlockSingleWordEntryOnIntranetSites = new PropertyDefinition(nameof(BrowserBlockSingleWordEntryOnIntranetSites), typeof(bool));


        /// <summary>
        /// BrowserRequireSmartScreen
        /// </summary>
        public static PropertyDefinition BrowserRequireSmartScreen = new PropertyDefinition(nameof(BrowserRequireSmartScreen), typeof(bool));


        /// <summary>
        /// BrowserEnterpriseModeSiteListLocation
        /// </summary>
        public static PropertyDefinition BrowserEnterpriseModeSiteListLocation = new PropertyDefinition(nameof(BrowserEnterpriseModeSiteListLocation), typeof(string));


        /// <summary>
        /// BrowserInternetSecurityLevel
        /// </summary>
        public static PropertyDefinition BrowserInternetSecurityLevel = new PropertyDefinition(nameof(BrowserInternetSecurityLevel), typeof(InternetSiteSecurityLevel));


        /// <summary>
        /// BrowserIntranetSecurityLevel
        /// </summary>
        public static PropertyDefinition BrowserIntranetSecurityLevel = new PropertyDefinition(nameof(BrowserIntranetSecurityLevel), typeof(SiteSecurityLevel));


        /// <summary>
        /// BrowserLoggingReportLocation
        /// </summary>
        public static PropertyDefinition BrowserLoggingReportLocation = new PropertyDefinition(nameof(BrowserLoggingReportLocation), typeof(string));


        /// <summary>
        /// BrowserRequireHighSecurityForRestrictedSites
        /// </summary>
        public static PropertyDefinition BrowserRequireHighSecurityForRestrictedSites = new PropertyDefinition(nameof(BrowserRequireHighSecurityForRestrictedSites), typeof(bool));


        /// <summary>
        /// BrowserRequireFirewall
        /// </summary>
        public static PropertyDefinition BrowserRequireFirewall = new PropertyDefinition(nameof(BrowserRequireFirewall), typeof(bool));


        /// <summary>
        /// BrowserRequireFraudWarning
        /// </summary>
        public static PropertyDefinition BrowserRequireFraudWarning = new PropertyDefinition(nameof(BrowserRequireFraudWarning), typeof(bool));


        /// <summary>
        /// BrowserTrustedSitesSecurityLevel
        /// </summary>
        public static PropertyDefinition BrowserTrustedSitesSecurityLevel = new PropertyDefinition(nameof(BrowserTrustedSitesSecurityLevel), typeof(SiteSecurityLevel));


        /// <summary>
        /// CellularBlockDataRoaming
        /// </summary>
        public static PropertyDefinition CellularBlockDataRoaming = new PropertyDefinition(nameof(CellularBlockDataRoaming), typeof(bool));


        /// <summary>
        /// DiagnosticsBlockDataSubmission
        /// </summary>
        public static PropertyDefinition DiagnosticsBlockDataSubmission = new PropertyDefinition(nameof(DiagnosticsBlockDataSubmission), typeof(bool));


        /// <summary>
        /// PasswordBlockPicturePasswordAndPin
        /// </summary>
        public static PropertyDefinition PasswordBlockPicturePasswordAndPin = new PropertyDefinition(nameof(PasswordBlockPicturePasswordAndPin), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// StorageRequireDeviceEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireDeviceEncryption = new PropertyDefinition(nameof(StorageRequireDeviceEncryption), typeof(bool));


        /// <summary>
        /// MinimumAutoInstallClassification
        /// </summary>
        public static PropertyDefinition MinimumAutoInstallClassification = new PropertyDefinition(nameof(MinimumAutoInstallClassification), typeof(UpdateClassification));


        /// <summary>
        /// UpdatesMinimumAutoInstallClassification
        /// </summary>
        public static PropertyDefinition UpdatesMinimumAutoInstallClassification = new PropertyDefinition(nameof(UpdatesMinimumAutoInstallClassification), typeof(UpdateClassification));


        /// <summary>
        /// UpdatesRequireAutomaticUpdates
        /// </summary>
        public static PropertyDefinition UpdatesRequireAutomaticUpdates = new PropertyDefinition(nameof(UpdatesRequireAutomaticUpdates), typeof(bool));


        /// <summary>
        /// UserAccountControlSettings
        /// </summary>
        public static PropertyDefinition UserAccountControlSettings = new PropertyDefinition(nameof(UserAccountControlSettings), typeof(WindowsUserAccountControlSettings));


        /// <summary>
        /// WorkFoldersUrl
        /// </summary>
        public static PropertyDefinition WorkFoldersUrl = new PropertyDefinition(nameof(WorkFoldersUrl), typeof(string));

    }


    /// <summary>
    /// WindowsPhone81GeneralConfigurationObjectSchema
    /// </summary>
    public class WindowsPhone81GeneralConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// ApplyOnlyToWindowsPhone81
        /// </summary>
        public static PropertyDefinition ApplyOnlyToWindowsPhone81 = new PropertyDefinition(nameof(ApplyOnlyToWindowsPhone81), typeof(bool));


        /// <summary>
        /// AppsBlockCopyPaste
        /// </summary>
        public static PropertyDefinition AppsBlockCopyPaste = new PropertyDefinition(nameof(AppsBlockCopyPaste), typeof(bool));


        /// <summary>
        /// BluetoothBlocked
        /// </summary>
        public static PropertyDefinition BluetoothBlocked = new PropertyDefinition(nameof(BluetoothBlocked), typeof(bool));


        /// <summary>
        /// CameraBlocked
        /// </summary>
        public static PropertyDefinition CameraBlocked = new PropertyDefinition(nameof(CameraBlocked), typeof(bool));


        /// <summary>
        /// CellularBlockWifiTethering
        /// </summary>
        public static PropertyDefinition CellularBlockWifiTethering = new PropertyDefinition(nameof(CellularBlockWifiTethering), typeof(bool));


        /// <summary>
        /// CompliantAppsList
        /// </summary>
        public static PropertyDefinition CompliantAppsList = new PropertyDefinition(nameof(CompliantAppsList), typeof(IList<AppListItem>));


        /// <summary>
        /// CompliantAppListType
        /// </summary>
        public static PropertyDefinition CompliantAppListType = new PropertyDefinition(nameof(CompliantAppListType), typeof(AppListType));


        /// <summary>
        /// DiagnosticDataBlockSubmission
        /// </summary>
        public static PropertyDefinition DiagnosticDataBlockSubmission = new PropertyDefinition(nameof(DiagnosticDataBlockSubmission), typeof(bool));


        /// <summary>
        /// EmailBlockAddingAccounts
        /// </summary>
        public static PropertyDefinition EmailBlockAddingAccounts = new PropertyDefinition(nameof(EmailBlockAddingAccounts), typeof(bool));


        /// <summary>
        /// LocationServicesBlocked
        /// </summary>
        public static PropertyDefinition LocationServicesBlocked = new PropertyDefinition(nameof(LocationServicesBlocked), typeof(bool));


        /// <summary>
        /// MicrosoftAccountBlocked
        /// </summary>
        public static PropertyDefinition MicrosoftAccountBlocked = new PropertyDefinition(nameof(MicrosoftAccountBlocked), typeof(bool));


        /// <summary>
        /// NfcBlocked
        /// </summary>
        public static PropertyDefinition NfcBlocked = new PropertyDefinition(nameof(NfcBlocked), typeof(bool));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// ScreenCaptureBlocked
        /// </summary>
        public static PropertyDefinition ScreenCaptureBlocked = new PropertyDefinition(nameof(ScreenCaptureBlocked), typeof(bool));


        /// <summary>
        /// StorageBlockRemovableStorage
        /// </summary>
        public static PropertyDefinition StorageBlockRemovableStorage = new PropertyDefinition(nameof(StorageBlockRemovableStorage), typeof(bool));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// WebBrowserBlocked
        /// </summary>
        public static PropertyDefinition WebBrowserBlocked = new PropertyDefinition(nameof(WebBrowserBlocked), typeof(bool));


        /// <summary>
        /// WifiBlocked
        /// </summary>
        public static PropertyDefinition WifiBlocked = new PropertyDefinition(nameof(WifiBlocked), typeof(bool));


        /// <summary>
        /// WifiBlockAutomaticConnectHotspots
        /// </summary>
        public static PropertyDefinition WifiBlockAutomaticConnectHotspots = new PropertyDefinition(nameof(WifiBlockAutomaticConnectHotspots), typeof(bool));


        /// <summary>
        /// WifiBlockHotspotReporting
        /// </summary>
        public static PropertyDefinition WifiBlockHotspotReporting = new PropertyDefinition(nameof(WifiBlockHotspotReporting), typeof(bool));


        /// <summary>
        /// WindowsStoreBlocked
        /// </summary>
        public static PropertyDefinition WindowsStoreBlocked = new PropertyDefinition(nameof(WindowsStoreBlocked), typeof(bool));

    }


    /// <summary>
    /// Windows10TeamGeneralConfigurationObjectSchema
    /// </summary>
    public class Windows10TeamGeneralConfigurationObjectSchema : DeviceConfigurationObjectSchema
    {

        /// <summary>
        /// AzureOperationalInsightsBlockTelemetry
        /// </summary>
        public static PropertyDefinition AzureOperationalInsightsBlockTelemetry = new PropertyDefinition(nameof(AzureOperationalInsightsBlockTelemetry), typeof(bool));


        /// <summary>
        /// AzureOperationalInsightsWorkspaceId
        /// </summary>
        public static PropertyDefinition AzureOperationalInsightsWorkspaceId = new PropertyDefinition(nameof(AzureOperationalInsightsWorkspaceId), typeof(string));


        /// <summary>
        /// AzureOperationalInsightsWorkspaceKey
        /// </summary>
        public static PropertyDefinition AzureOperationalInsightsWorkspaceKey = new PropertyDefinition(nameof(AzureOperationalInsightsWorkspaceKey), typeof(string));


        /// <summary>
        /// ConnectAppBlockAutoLaunch
        /// </summary>
        public static PropertyDefinition ConnectAppBlockAutoLaunch = new PropertyDefinition(nameof(ConnectAppBlockAutoLaunch), typeof(bool));


        /// <summary>
        /// MaintenanceWindowBlocked
        /// </summary>
        public static PropertyDefinition MaintenanceWindowBlocked = new PropertyDefinition(nameof(MaintenanceWindowBlocked), typeof(bool));


        /// <summary>
        /// MaintenanceWindowDurationInHours
        /// </summary>
        public static PropertyDefinition MaintenanceWindowDurationInHours = new PropertyDefinition(nameof(MaintenanceWindowDurationInHours), typeof(int));


        /// <summary>
        /// MaintenanceWindowStartTime
        /// </summary>
        public static PropertyDefinition MaintenanceWindowStartTime = new PropertyDefinition(nameof(MaintenanceWindowStartTime), typeof(TimeSpan));


        /// <summary>
        /// MiracastChannel
        /// </summary>
        public static PropertyDefinition MiracastChannel = new PropertyDefinition(nameof(MiracastChannel), typeof(MiracastChannel));


        /// <summary>
        /// MiracastBlocked
        /// </summary>
        public static PropertyDefinition MiracastBlocked = new PropertyDefinition(nameof(MiracastBlocked), typeof(bool));


        /// <summary>
        /// MiracastRequirePin
        /// </summary>
        public static PropertyDefinition MiracastRequirePin = new PropertyDefinition(nameof(MiracastRequirePin), typeof(bool));


        /// <summary>
        /// SettingsBlockMyMeetingsAndFiles
        /// </summary>
        public static PropertyDefinition SettingsBlockMyMeetingsAndFiles = new PropertyDefinition(nameof(SettingsBlockMyMeetingsAndFiles), typeof(bool));


        /// <summary>
        /// SettingsBlockSessionResume
        /// </summary>
        public static PropertyDefinition SettingsBlockSessionResume = new PropertyDefinition(nameof(SettingsBlockSessionResume), typeof(bool));


        /// <summary>
        /// SettingsBlockSigninSuggestions
        /// </summary>
        public static PropertyDefinition SettingsBlockSigninSuggestions = new PropertyDefinition(nameof(SettingsBlockSigninSuggestions), typeof(bool));


        /// <summary>
        /// SettingsDefaultVolume
        /// </summary>
        public static PropertyDefinition SettingsDefaultVolume = new PropertyDefinition(nameof(SettingsDefaultVolume), typeof(int));


        /// <summary>
        /// SettingsScreenTimeoutInMinutes
        /// </summary>
        public static PropertyDefinition SettingsScreenTimeoutInMinutes = new PropertyDefinition(nameof(SettingsScreenTimeoutInMinutes), typeof(int));


        /// <summary>
        /// SettingsSessionTimeoutInMinutes
        /// </summary>
        public static PropertyDefinition SettingsSessionTimeoutInMinutes = new PropertyDefinition(nameof(SettingsSessionTimeoutInMinutes), typeof(int));


        /// <summary>
        /// SettingsSleepTimeoutInMinutes
        /// </summary>
        public static PropertyDefinition SettingsSleepTimeoutInMinutes = new PropertyDefinition(nameof(SettingsSleepTimeoutInMinutes), typeof(int));


        /// <summary>
        /// WelcomeScreenBlockAutomaticWakeUp
        /// </summary>
        public static PropertyDefinition WelcomeScreenBlockAutomaticWakeUp = new PropertyDefinition(nameof(WelcomeScreenBlockAutomaticWakeUp), typeof(bool));


        /// <summary>
        /// WelcomeScreenBackgroundImageUrl
        /// </summary>
        public static PropertyDefinition WelcomeScreenBackgroundImageUrl = new PropertyDefinition(nameof(WelcomeScreenBackgroundImageUrl), typeof(string));


        /// <summary>
        /// WelcomeScreenMeetingInformation
        /// </summary>
        public static PropertyDefinition WelcomeScreenMeetingInformation = new PropertyDefinition(nameof(WelcomeScreenMeetingInformation), typeof(WelcomeScreenMeetingInformation));

    }


    /// <summary>
    /// DeviceCompliancePolicyGroupAssignmentObjectSchema
    /// </summary>
    public class DeviceCompliancePolicyGroupAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TargetGroupId
        /// </summary>
        public static PropertyDefinition TargetGroupId = new PropertyDefinition(nameof(TargetGroupId), typeof(string));


        /// <summary>
        /// ExcludeGroup
        /// </summary>
        public static PropertyDefinition ExcludeGroup = new PropertyDefinition(nameof(ExcludeGroup), typeof(bool));


        /// <summary>
        /// DeviceCompliancePolicy
        /// </summary>
        public static PropertyDefinition DeviceCompliancePolicy = new PropertyDefinition(nameof(DeviceCompliancePolicy), typeof(DeviceCompliancePolicy));

    }


    /// <summary>
    /// AndroidForWorkCompliancePolicyObjectSchema
    /// </summary>
    public class AndroidForWorkCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidRequiredPasswordType));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// SecurityPreventInstallAppsFromUnknownSources
        /// </summary>
        public static PropertyDefinition SecurityPreventInstallAppsFromUnknownSources = new PropertyDefinition(nameof(SecurityPreventInstallAppsFromUnknownSources), typeof(bool));


        /// <summary>
        /// SecurityDisableUsbDebugging
        /// </summary>
        public static PropertyDefinition SecurityDisableUsbDebugging = new PropertyDefinition(nameof(SecurityDisableUsbDebugging), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// SecurityBlockJailbrokenDevices
        /// </summary>
        public static PropertyDefinition SecurityBlockJailbrokenDevices = new PropertyDefinition(nameof(SecurityBlockJailbrokenDevices), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// MinAndroidSecurityPatchLevel
        /// </summary>
        public static PropertyDefinition MinAndroidSecurityPatchLevel = new PropertyDefinition(nameof(MinAndroidSecurityPatchLevel), typeof(string));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationBasicIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationBasicIntegrity = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationBasicIntegrity), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationCertifiedDevice
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationCertifiedDevice = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationCertifiedDevice), typeof(bool));


        /// <summary>
        /// SecurityRequireGooglePlayServices
        /// </summary>
        public static PropertyDefinition SecurityRequireGooglePlayServices = new PropertyDefinition(nameof(SecurityRequireGooglePlayServices), typeof(bool));


        /// <summary>
        /// SecurityRequireUpToDateSecurityProviders
        /// </summary>
        public static PropertyDefinition SecurityRequireUpToDateSecurityProviders = new PropertyDefinition(nameof(SecurityRequireUpToDateSecurityProviders), typeof(bool));


        /// <summary>
        /// SecurityRequireCompanyPortalAppIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireCompanyPortalAppIntegrity = new PropertyDefinition(nameof(SecurityRequireCompanyPortalAppIntegrity), typeof(bool));

    }


    /// <summary>
    /// AndroidCompliancePolicyObjectSchema
    /// </summary>
    public class AndroidCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidRequiredPasswordType));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// SecurityPreventInstallAppsFromUnknownSources
        /// </summary>
        public static PropertyDefinition SecurityPreventInstallAppsFromUnknownSources = new PropertyDefinition(nameof(SecurityPreventInstallAppsFromUnknownSources), typeof(bool));


        /// <summary>
        /// SecurityDisableUsbDebugging
        /// </summary>
        public static PropertyDefinition SecurityDisableUsbDebugging = new PropertyDefinition(nameof(SecurityDisableUsbDebugging), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// SecurityBlockJailbrokenDevices
        /// </summary>
        public static PropertyDefinition SecurityBlockJailbrokenDevices = new PropertyDefinition(nameof(SecurityBlockJailbrokenDevices), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// MinAndroidSecurityPatchLevel
        /// </summary>
        public static PropertyDefinition MinAndroidSecurityPatchLevel = new PropertyDefinition(nameof(MinAndroidSecurityPatchLevel), typeof(string));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationBasicIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationBasicIntegrity = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationBasicIntegrity), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationCertifiedDevice
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationCertifiedDevice = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationCertifiedDevice), typeof(bool));


        /// <summary>
        /// SecurityRequireGooglePlayServices
        /// </summary>
        public static PropertyDefinition SecurityRequireGooglePlayServices = new PropertyDefinition(nameof(SecurityRequireGooglePlayServices), typeof(bool));


        /// <summary>
        /// SecurityRequireUpToDateSecurityProviders
        /// </summary>
        public static PropertyDefinition SecurityRequireUpToDateSecurityProviders = new PropertyDefinition(nameof(SecurityRequireUpToDateSecurityProviders), typeof(bool));


        /// <summary>
        /// SecurityRequireCompanyPortalAppIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireCompanyPortalAppIntegrity = new PropertyDefinition(nameof(SecurityRequireCompanyPortalAppIntegrity), typeof(bool));


        /// <summary>
        /// ConditionStatementId
        /// </summary>
        public static PropertyDefinition ConditionStatementId = new PropertyDefinition(nameof(ConditionStatementId), typeof(string));


        /// <summary>
        /// RestrictedApps
        /// </summary>
        public static PropertyDefinition RestrictedApps = new PropertyDefinition(nameof(RestrictedApps), typeof(IList<AppListItem>));

    }


    /// <summary>
    /// AndroidDeviceComplianceLocalActionBaseObjectSchema
    /// </summary>
    public class AndroidDeviceComplianceLocalActionBaseObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// GracePeriodInMinutes
        /// </summary>
        public static PropertyDefinition GracePeriodInMinutes = new PropertyDefinition(nameof(GracePeriodInMinutes), typeof(int));

    }


    /// <summary>
    /// AndroidDeviceComplianceLocalActionLockDeviceObjectSchema
    /// </summary>
    public class AndroidDeviceComplianceLocalActionLockDeviceObjectSchema : AndroidDeviceComplianceLocalActionBaseObjectSchema
    {
    }


    /// <summary>
    /// AndroidDeviceComplianceLocalActionLockDeviceWithPasscodeObjectSchema
    /// </summary>
    public class AndroidDeviceComplianceLocalActionLockDeviceWithPasscodeObjectSchema : AndroidDeviceComplianceLocalActionBaseObjectSchema
    {

        /// <summary>
        /// Passcode
        /// </summary>
        public static PropertyDefinition Passcode = new PropertyDefinition(nameof(Passcode), typeof(string));


        /// <summary>
        /// PasscodeSignInFailureCountBeforeWipe
        /// </summary>
        public static PropertyDefinition PasscodeSignInFailureCountBeforeWipe = new PropertyDefinition(nameof(PasscodeSignInFailureCountBeforeWipe), typeof(int));

    }


    /// <summary>
    /// AndroidWorkProfileCompliancePolicyObjectSchema
    /// </summary>
    public class AndroidWorkProfileCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(AndroidRequiredPasswordType));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordSignInFailureCountBeforeFactoryReset
        /// </summary>
        public static PropertyDefinition PasswordSignInFailureCountBeforeFactoryReset = new PropertyDefinition(nameof(PasswordSignInFailureCountBeforeFactoryReset), typeof(int));


        /// <summary>
        /// SecurityPreventInstallAppsFromUnknownSources
        /// </summary>
        public static PropertyDefinition SecurityPreventInstallAppsFromUnknownSources = new PropertyDefinition(nameof(SecurityPreventInstallAppsFromUnknownSources), typeof(bool));


        /// <summary>
        /// SecurityDisableUsbDebugging
        /// </summary>
        public static PropertyDefinition SecurityDisableUsbDebugging = new PropertyDefinition(nameof(SecurityDisableUsbDebugging), typeof(bool));


        /// <summary>
        /// SecurityRequireVerifyApps
        /// </summary>
        public static PropertyDefinition SecurityRequireVerifyApps = new PropertyDefinition(nameof(SecurityRequireVerifyApps), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// SecurityBlockJailbrokenDevices
        /// </summary>
        public static PropertyDefinition SecurityBlockJailbrokenDevices = new PropertyDefinition(nameof(SecurityBlockJailbrokenDevices), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// MinAndroidSecurityPatchLevel
        /// </summary>
        public static PropertyDefinition MinAndroidSecurityPatchLevel = new PropertyDefinition(nameof(MinAndroidSecurityPatchLevel), typeof(string));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationBasicIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationBasicIntegrity = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationBasicIntegrity), typeof(bool));


        /// <summary>
        /// SecurityRequireSafetyNetAttestationCertifiedDevice
        /// </summary>
        public static PropertyDefinition SecurityRequireSafetyNetAttestationCertifiedDevice = new PropertyDefinition(nameof(SecurityRequireSafetyNetAttestationCertifiedDevice), typeof(bool));


        /// <summary>
        /// SecurityRequireGooglePlayServices
        /// </summary>
        public static PropertyDefinition SecurityRequireGooglePlayServices = new PropertyDefinition(nameof(SecurityRequireGooglePlayServices), typeof(bool));


        /// <summary>
        /// SecurityRequireUpToDateSecurityProviders
        /// </summary>
        public static PropertyDefinition SecurityRequireUpToDateSecurityProviders = new PropertyDefinition(nameof(SecurityRequireUpToDateSecurityProviders), typeof(bool));


        /// <summary>
        /// SecurityRequireCompanyPortalAppIntegrity
        /// </summary>
        public static PropertyDefinition SecurityRequireCompanyPortalAppIntegrity = new PropertyDefinition(nameof(SecurityRequireCompanyPortalAppIntegrity), typeof(bool));

    }


    /// <summary>
    /// IosCompliancePolicyObjectSchema
    /// </summary>
    public class IosCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasscodeBlockSimple
        /// </summary>
        public static PropertyDefinition PasscodeBlockSimple = new PropertyDefinition(nameof(PasscodeBlockSimple), typeof(bool));


        /// <summary>
        /// PasscodeExpirationDays
        /// </summary>
        public static PropertyDefinition PasscodeExpirationDays = new PropertyDefinition(nameof(PasscodeExpirationDays), typeof(int));


        /// <summary>
        /// PasscodeMinimumLength
        /// </summary>
        public static PropertyDefinition PasscodeMinimumLength = new PropertyDefinition(nameof(PasscodeMinimumLength), typeof(int));


        /// <summary>
        /// PasscodeMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasscodeMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasscodeMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasscodeMinutesOfInactivityBeforeScreenTimeout
        /// </summary>
        public static PropertyDefinition PasscodeMinutesOfInactivityBeforeScreenTimeout = new PropertyDefinition(nameof(PasscodeMinutesOfInactivityBeforeScreenTimeout), typeof(int));


        /// <summary>
        /// PasscodePreviousPasscodeBlockCount
        /// </summary>
        public static PropertyDefinition PasscodePreviousPasscodeBlockCount = new PropertyDefinition(nameof(PasscodePreviousPasscodeBlockCount), typeof(int));


        /// <summary>
        /// PasscodeMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasscodeMinimumCharacterSetCount = new PropertyDefinition(nameof(PasscodeMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasscodeRequiredType
        /// </summary>
        public static PropertyDefinition PasscodeRequiredType = new PropertyDefinition(nameof(PasscodeRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasscodeRequired
        /// </summary>
        public static PropertyDefinition PasscodeRequired = new PropertyDefinition(nameof(PasscodeRequired), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// OsMinimumBuildVersion
        /// </summary>
        public static PropertyDefinition OsMinimumBuildVersion = new PropertyDefinition(nameof(OsMinimumBuildVersion), typeof(string));


        /// <summary>
        /// OsMaximumBuildVersion
        /// </summary>
        public static PropertyDefinition OsMaximumBuildVersion = new PropertyDefinition(nameof(OsMaximumBuildVersion), typeof(string));


        /// <summary>
        /// SecurityBlockJailbrokenDevices
        /// </summary>
        public static PropertyDefinition SecurityBlockJailbrokenDevices = new PropertyDefinition(nameof(SecurityBlockJailbrokenDevices), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// ManagedEmailProfileRequired
        /// </summary>
        public static PropertyDefinition ManagedEmailProfileRequired = new PropertyDefinition(nameof(ManagedEmailProfileRequired), typeof(bool));


        /// <summary>
        /// RestrictedApps
        /// </summary>
        public static PropertyDefinition RestrictedApps = new PropertyDefinition(nameof(RestrictedApps), typeof(IList<AppListItem>));

    }


    /// <summary>
    /// MacOSCompliancePolicyObjectSchema
    /// </summary>
    public class MacOSCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// OsMinimumBuildVersion
        /// </summary>
        public static PropertyDefinition OsMinimumBuildVersion = new PropertyDefinition(nameof(OsMinimumBuildVersion), typeof(string));


        /// <summary>
        /// OsMaximumBuildVersion
        /// </summary>
        public static PropertyDefinition OsMaximumBuildVersion = new PropertyDefinition(nameof(OsMaximumBuildVersion), typeof(string));


        /// <summary>
        /// SystemIntegrityProtectionEnabled
        /// </summary>
        public static PropertyDefinition SystemIntegrityProtectionEnabled = new PropertyDefinition(nameof(SystemIntegrityProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// GatekeeperAllowedAppSource
        /// </summary>
        public static PropertyDefinition GatekeeperAllowedAppSource = new PropertyDefinition(nameof(GatekeeperAllowedAppSource), typeof(MacOSGatekeeperAppSources));


        /// <summary>
        /// FirewallEnabled
        /// </summary>
        public static PropertyDefinition FirewallEnabled = new PropertyDefinition(nameof(FirewallEnabled), typeof(bool));


        /// <summary>
        /// FirewallBlockAllIncoming
        /// </summary>
        public static PropertyDefinition FirewallBlockAllIncoming = new PropertyDefinition(nameof(FirewallBlockAllIncoming), typeof(bool));


        /// <summary>
        /// FirewallEnableStealthMode
        /// </summary>
        public static PropertyDefinition FirewallEnableStealthMode = new PropertyDefinition(nameof(FirewallEnableStealthMode), typeof(bool));

    }


    /// <summary>
    /// DefaultDeviceCompliancePolicyObjectSchema
    /// </summary>
    public class DefaultDeviceCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {
    }


    /// <summary>
    /// Windows10CompliancePolicyObjectSchema
    /// </summary>
    public class Windows10CompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordRequiredToUnlockFromIdle
        /// </summary>
        public static PropertyDefinition PasswordRequiredToUnlockFromIdle = new PropertyDefinition(nameof(PasswordRequiredToUnlockFromIdle), typeof(bool));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// RequireHealthyDeviceReport
        /// </summary>
        public static PropertyDefinition RequireHealthyDeviceReport = new PropertyDefinition(nameof(RequireHealthyDeviceReport), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// MobileOsMinimumVersion
        /// </summary>
        public static PropertyDefinition MobileOsMinimumVersion = new PropertyDefinition(nameof(MobileOsMinimumVersion), typeof(string));


        /// <summary>
        /// MobileOsMaximumVersion
        /// </summary>
        public static PropertyDefinition MobileOsMaximumVersion = new PropertyDefinition(nameof(MobileOsMaximumVersion), typeof(string));


        /// <summary>
        /// EarlyLaunchAntiMalwareDriverEnabled
        /// </summary>
        public static PropertyDefinition EarlyLaunchAntiMalwareDriverEnabled = new PropertyDefinition(nameof(EarlyLaunchAntiMalwareDriverEnabled), typeof(bool));


        /// <summary>
        /// BitLockerEnabled
        /// </summary>
        public static PropertyDefinition BitLockerEnabled = new PropertyDefinition(nameof(BitLockerEnabled), typeof(bool));


        /// <summary>
        /// SecureBootEnabled
        /// </summary>
        public static PropertyDefinition SecureBootEnabled = new PropertyDefinition(nameof(SecureBootEnabled), typeof(bool));


        /// <summary>
        /// CodeIntegrityEnabled
        /// </summary>
        public static PropertyDefinition CodeIntegrityEnabled = new PropertyDefinition(nameof(CodeIntegrityEnabled), typeof(bool));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// ActiveFirewallRequired
        /// </summary>
        public static PropertyDefinition ActiveFirewallRequired = new PropertyDefinition(nameof(ActiveFirewallRequired), typeof(bool));


        /// <summary>
        /// DefenderEnabled
        /// </summary>
        public static PropertyDefinition DefenderEnabled = new PropertyDefinition(nameof(DefenderEnabled), typeof(bool));


        /// <summary>
        /// DefenderVersion
        /// </summary>
        public static PropertyDefinition DefenderVersion = new PropertyDefinition(nameof(DefenderVersion), typeof(string));


        /// <summary>
        /// SignatureOutOfDate
        /// </summary>
        public static PropertyDefinition SignatureOutOfDate = new PropertyDefinition(nameof(SignatureOutOfDate), typeof(bool));


        /// <summary>
        /// RtpEnabled
        /// </summary>
        public static PropertyDefinition RtpEnabled = new PropertyDefinition(nameof(RtpEnabled), typeof(bool));


        /// <summary>
        /// AntivirusRequired
        /// </summary>
        public static PropertyDefinition AntivirusRequired = new PropertyDefinition(nameof(AntivirusRequired), typeof(bool));


        /// <summary>
        /// AntiSpywareRequired
        /// </summary>
        public static PropertyDefinition AntiSpywareRequired = new PropertyDefinition(nameof(AntiSpywareRequired), typeof(bool));


        /// <summary>
        /// ValidOperatingSystemBuildRanges
        /// </summary>
        public static PropertyDefinition ValidOperatingSystemBuildRanges = new PropertyDefinition(nameof(ValidOperatingSystemBuildRanges), typeof(IList<OperatingSystemVersionRange>));


        /// <summary>
        /// DeviceThreatProtectionEnabled
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionEnabled = new PropertyDefinition(nameof(DeviceThreatProtectionEnabled), typeof(bool));


        /// <summary>
        /// DeviceThreatProtectionRequiredSecurityLevel
        /// </summary>
        public static PropertyDefinition DeviceThreatProtectionRequiredSecurityLevel = new PropertyDefinition(nameof(DeviceThreatProtectionRequiredSecurityLevel), typeof(DeviceThreatProtectionLevel));


        /// <summary>
        /// ConfigurationManagerComplianceRequired
        /// </summary>
        public static PropertyDefinition ConfigurationManagerComplianceRequired = new PropertyDefinition(nameof(ConfigurationManagerComplianceRequired), typeof(bool));

    }


    /// <summary>
    /// Windows10MobileCompliancePolicyObjectSchema
    /// </summary>
    public class Windows10MobileCompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordRequireToUnlockFromIdle
        /// </summary>
        public static PropertyDefinition PasswordRequireToUnlockFromIdle = new PropertyDefinition(nameof(PasswordRequireToUnlockFromIdle), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// EarlyLaunchAntiMalwareDriverEnabled
        /// </summary>
        public static PropertyDefinition EarlyLaunchAntiMalwareDriverEnabled = new PropertyDefinition(nameof(EarlyLaunchAntiMalwareDriverEnabled), typeof(bool));


        /// <summary>
        /// BitLockerEnabled
        /// </summary>
        public static PropertyDefinition BitLockerEnabled = new PropertyDefinition(nameof(BitLockerEnabled), typeof(bool));


        /// <summary>
        /// SecureBootEnabled
        /// </summary>
        public static PropertyDefinition SecureBootEnabled = new PropertyDefinition(nameof(SecureBootEnabled), typeof(bool));


        /// <summary>
        /// CodeIntegrityEnabled
        /// </summary>
        public static PropertyDefinition CodeIntegrityEnabled = new PropertyDefinition(nameof(CodeIntegrityEnabled), typeof(bool));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));


        /// <summary>
        /// ActiveFirewallRequired
        /// </summary>
        public static PropertyDefinition ActiveFirewallRequired = new PropertyDefinition(nameof(ActiveFirewallRequired), typeof(bool));


        /// <summary>
        /// ValidOperatingSystemBuildRanges
        /// </summary>
        public static PropertyDefinition ValidOperatingSystemBuildRanges = new PropertyDefinition(nameof(ValidOperatingSystemBuildRanges), typeof(IList<OperatingSystemVersionRange>));

    }


    /// <summary>
    /// Windows81CompliancePolicyObjectSchema
    /// </summary>
    public class Windows81CompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));

    }


    /// <summary>
    /// WindowsPhone81CompliancePolicyObjectSchema
    /// </summary>
    public class WindowsPhone81CompliancePolicyObjectSchema : DeviceCompliancePolicyObjectSchema
    {

        /// <summary>
        /// PasswordBlockSimple
        /// </summary>
        public static PropertyDefinition PasswordBlockSimple = new PropertyDefinition(nameof(PasswordBlockSimple), typeof(bool));


        /// <summary>
        /// PasswordExpirationDays
        /// </summary>
        public static PropertyDefinition PasswordExpirationDays = new PropertyDefinition(nameof(PasswordExpirationDays), typeof(int));


        /// <summary>
        /// PasswordMinimumLength
        /// </summary>
        public static PropertyDefinition PasswordMinimumLength = new PropertyDefinition(nameof(PasswordMinimumLength), typeof(int));


        /// <summary>
        /// PasswordMinutesOfInactivityBeforeLock
        /// </summary>
        public static PropertyDefinition PasswordMinutesOfInactivityBeforeLock = new PropertyDefinition(nameof(PasswordMinutesOfInactivityBeforeLock), typeof(int));


        /// <summary>
        /// PasswordMinimumCharacterSetCount
        /// </summary>
        public static PropertyDefinition PasswordMinimumCharacterSetCount = new PropertyDefinition(nameof(PasswordMinimumCharacterSetCount), typeof(int));


        /// <summary>
        /// PasswordRequiredType
        /// </summary>
        public static PropertyDefinition PasswordRequiredType = new PropertyDefinition(nameof(PasswordRequiredType), typeof(RequiredPasswordType));


        /// <summary>
        /// PasswordPreviousPasswordBlockCount
        /// </summary>
        public static PropertyDefinition PasswordPreviousPasswordBlockCount = new PropertyDefinition(nameof(PasswordPreviousPasswordBlockCount), typeof(int));


        /// <summary>
        /// PasswordRequired
        /// </summary>
        public static PropertyDefinition PasswordRequired = new PropertyDefinition(nameof(PasswordRequired), typeof(bool));


        /// <summary>
        /// OsMinimumVersion
        /// </summary>
        public static PropertyDefinition OsMinimumVersion = new PropertyDefinition(nameof(OsMinimumVersion), typeof(string));


        /// <summary>
        /// OsMaximumVersion
        /// </summary>
        public static PropertyDefinition OsMaximumVersion = new PropertyDefinition(nameof(OsMaximumVersion), typeof(string));


        /// <summary>
        /// StorageRequireEncryption
        /// </summary>
        public static PropertyDefinition StorageRequireEncryption = new PropertyDefinition(nameof(StorageRequireEncryption), typeof(bool));

    }


    /// <summary>
    /// DeviceSetupConfigurationObjectSchema
    /// </summary>
    public class DeviceSetupConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(int));

    }


    /// <summary>
    /// DeviceComplianceSettingStateObjectSchema
    /// </summary>
    public class DeviceComplianceSettingStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(DeviceType));


        /// <summary>
        /// Setting
        /// </summary>
        public static PropertyDefinition Setting = new PropertyDefinition(nameof(Setting), typeof(string));


        /// <summary>
        /// SettingName
        /// </summary>
        public static PropertyDefinition SettingName = new PropertyDefinition(nameof(SettingName), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserEmail
        /// </summary>
        public static PropertyDefinition UserEmail = new PropertyDefinition(nameof(UserEmail), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ComplianceStatus));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// AdvancedThreatProtectionOnboardingDeviceSettingStateObjectSchema
    /// </summary>
    public class AdvancedThreatProtectionOnboardingDeviceSettingStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PlatformType
        /// </summary>
        public static PropertyDefinition PlatformType = new PropertyDefinition(nameof(PlatformType), typeof(DeviceType));


        /// <summary>
        /// Setting
        /// </summary>
        public static PropertyDefinition Setting = new PropertyDefinition(nameof(Setting), typeof(string));


        /// <summary>
        /// SettingName
        /// </summary>
        public static PropertyDefinition SettingName = new PropertyDefinition(nameof(SettingName), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// UserEmail
        /// </summary>
        public static PropertyDefinition UserEmail = new PropertyDefinition(nameof(UserEmail), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DeviceModel
        /// </summary>
        public static PropertyDefinition DeviceModel = new PropertyDefinition(nameof(DeviceModel), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(ComplianceStatus));


        /// <summary>
        /// ComplianceGracePeriodExpirationDateTime
        /// </summary>
        public static PropertyDefinition ComplianceGracePeriodExpirationDateTime = new PropertyDefinition(nameof(ComplianceGracePeriodExpirationDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// EnrollmentConfigurationAssignmentObjectSchema
    /// </summary>
    public class EnrollmentConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// DeviceEnrollmentLimitConfigurationObjectSchema
    /// </summary>
    public class DeviceEnrollmentLimitConfigurationObjectSchema : DeviceEnrollmentConfigurationObjectSchema
    {

        /// <summary>
        /// Limit
        /// </summary>
        public static PropertyDefinition Limit = new PropertyDefinition(nameof(Limit), typeof(int));

    }


    /// <summary>
    /// DeviceEnrollmentPlatformRestrictionsConfigurationObjectSchema
    /// </summary>
    public class DeviceEnrollmentPlatformRestrictionsConfigurationObjectSchema : DeviceEnrollmentConfigurationObjectSchema
    {

        /// <summary>
        /// IosRestriction
        /// </summary>
        public static PropertyDefinition IosRestriction = new PropertyDefinition(nameof(IosRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// WindowsRestriction
        /// </summary>
        public static PropertyDefinition WindowsRestriction = new PropertyDefinition(nameof(WindowsRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// WindowsMobileRestriction
        /// </summary>
        public static PropertyDefinition WindowsMobileRestriction = new PropertyDefinition(nameof(WindowsMobileRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// AndroidRestriction
        /// </summary>
        public static PropertyDefinition AndroidRestriction = new PropertyDefinition(nameof(AndroidRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// AndroidForWorkRestriction
        /// </summary>
        public static PropertyDefinition AndroidForWorkRestriction = new PropertyDefinition(nameof(AndroidForWorkRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// MacRestriction
        /// </summary>
        public static PropertyDefinition MacRestriction = new PropertyDefinition(nameof(MacRestriction), typeof(DeviceEnrollmentPlatformRestriction));


        /// <summary>
        /// MacOSRestriction
        /// </summary>
        public static PropertyDefinition MacOSRestriction = new PropertyDefinition(nameof(MacOSRestriction), typeof(DeviceEnrollmentPlatformRestriction));

    }


    /// <summary>
    /// Windows10EnrollmentCompletionPageConfigurationObjectSchema
    /// </summary>
    public class Windows10EnrollmentCompletionPageConfigurationObjectSchema : DeviceEnrollmentConfigurationObjectSchema
    {

        /// <summary>
        /// ShowInstallationProgress
        /// </summary>
        public static PropertyDefinition ShowInstallationProgress = new PropertyDefinition(nameof(ShowInstallationProgress), typeof(bool));


        /// <summary>
        /// BlockDeviceSetupRetryByUser
        /// </summary>
        public static PropertyDefinition BlockDeviceSetupRetryByUser = new PropertyDefinition(nameof(BlockDeviceSetupRetryByUser), typeof(bool));


        /// <summary>
        /// AllowDeviceResetOnInstallFailure
        /// </summary>
        public static PropertyDefinition AllowDeviceResetOnInstallFailure = new PropertyDefinition(nameof(AllowDeviceResetOnInstallFailure), typeof(bool));


        /// <summary>
        /// AllowLogCollectionOnInstallFailure
        /// </summary>
        public static PropertyDefinition AllowLogCollectionOnInstallFailure = new PropertyDefinition(nameof(AllowLogCollectionOnInstallFailure), typeof(bool));


        /// <summary>
        /// CustomErrorMessage
        /// </summary>
        public static PropertyDefinition CustomErrorMessage = new PropertyDefinition(nameof(CustomErrorMessage), typeof(string));


        /// <summary>
        /// InstallProgressTimeoutInMinutes
        /// </summary>
        public static PropertyDefinition InstallProgressTimeoutInMinutes = new PropertyDefinition(nameof(InstallProgressTimeoutInMinutes), typeof(int));


        /// <summary>
        /// AllowDeviceUseOnInstallFailure
        /// </summary>
        public static PropertyDefinition AllowDeviceUseOnInstallFailure = new PropertyDefinition(nameof(AllowDeviceUseOnInstallFailure), typeof(bool));


        /// <summary>
        /// SelectedMobileAppIds
        /// </summary>
        public static PropertyDefinition SelectedMobileAppIds = new PropertyDefinition(nameof(SelectedMobileAppIds), typeof(IList<String>));

    }


    /// <summary>
    /// DeviceEnrollmentWindowsHelloForBusinessConfigurationObjectSchema
    /// </summary>
    public class DeviceEnrollmentWindowsHelloForBusinessConfigurationObjectSchema : DeviceEnrollmentConfigurationObjectSchema
    {

        /// <summary>
        /// PinMinimumLength
        /// </summary>
        public static PropertyDefinition PinMinimumLength = new PropertyDefinition(nameof(PinMinimumLength), typeof(int));


        /// <summary>
        /// PinMaximumLength
        /// </summary>
        public static PropertyDefinition PinMaximumLength = new PropertyDefinition(nameof(PinMaximumLength), typeof(int));


        /// <summary>
        /// PinUppercaseCharactersUsage
        /// </summary>
        public static PropertyDefinition PinUppercaseCharactersUsage = new PropertyDefinition(nameof(PinUppercaseCharactersUsage), typeof(WindowsHelloForBusinessPinUsage));


        /// <summary>
        /// PinLowercaseCharactersUsage
        /// </summary>
        public static PropertyDefinition PinLowercaseCharactersUsage = new PropertyDefinition(nameof(PinLowercaseCharactersUsage), typeof(WindowsHelloForBusinessPinUsage));


        /// <summary>
        /// PinSpecialCharactersUsage
        /// </summary>
        public static PropertyDefinition PinSpecialCharactersUsage = new PropertyDefinition(nameof(PinSpecialCharactersUsage), typeof(WindowsHelloForBusinessPinUsage));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(Enablement));


        /// <summary>
        /// SecurityDeviceRequired
        /// </summary>
        public static PropertyDefinition SecurityDeviceRequired = new PropertyDefinition(nameof(SecurityDeviceRequired), typeof(bool));


        /// <summary>
        /// UnlockWithBiometricsEnabled
        /// </summary>
        public static PropertyDefinition UnlockWithBiometricsEnabled = new PropertyDefinition(nameof(UnlockWithBiometricsEnabled), typeof(bool));


        /// <summary>
        /// RemotePassportEnabled
        /// </summary>
        public static PropertyDefinition RemotePassportEnabled = new PropertyDefinition(nameof(RemotePassportEnabled), typeof(bool));


        /// <summary>
        /// PinPreviousBlockCount
        /// </summary>
        public static PropertyDefinition PinPreviousBlockCount = new PropertyDefinition(nameof(PinPreviousBlockCount), typeof(int));


        /// <summary>
        /// PinExpirationInDays
        /// </summary>
        public static PropertyDefinition PinExpirationInDays = new PropertyDefinition(nameof(PinExpirationInDays), typeof(int));


        /// <summary>
        /// EnhancedBiometricsState
        /// </summary>
        public static PropertyDefinition EnhancedBiometricsState = new PropertyDefinition(nameof(EnhancedBiometricsState), typeof(Enablement));

    }


    /// <summary>
    /// LocationManagementConditionObjectSchema
    /// </summary>
    public class LocationManagementConditionObjectSchema : ManagementConditionObjectSchema
    {
    }


    /// <summary>
    /// CircularGeofenceManagementConditionObjectSchema
    /// </summary>
    public class CircularGeofenceManagementConditionObjectSchema : LocationManagementConditionObjectSchema
    {

        /// <summary>
        /// Latitude
        /// </summary>
        public static PropertyDefinition Latitude = new PropertyDefinition(nameof(Latitude), typeof(Double));


        /// <summary>
        /// Longitude
        /// </summary>
        public static PropertyDefinition Longitude = new PropertyDefinition(nameof(Longitude), typeof(Double));


        /// <summary>
        /// RadiusInMeters
        /// </summary>
        public static PropertyDefinition RadiusInMeters = new PropertyDefinition(nameof(RadiusInMeters), typeof(Single));

    }


    /// <summary>
    /// NetworkManagementConditionObjectSchema
    /// </summary>
    public class NetworkManagementConditionObjectSchema : ManagementConditionObjectSchema
    {
    }


    /// <summary>
    /// NetworkIPv4ConfigurationManagementConditionObjectSchema
    /// </summary>
    public class NetworkIPv4ConfigurationManagementConditionObjectSchema : NetworkManagementConditionObjectSchema
    {

        /// <summary>
        /// IpV4Prefix
        /// </summary>
        public static PropertyDefinition IpV4Prefix = new PropertyDefinition(nameof(IpV4Prefix), typeof(string));


        /// <summary>
        /// IpV4Gateway
        /// </summary>
        public static PropertyDefinition IpV4Gateway = new PropertyDefinition(nameof(IpV4Gateway), typeof(string));


        /// <summary>
        /// IpV4DHCPServer
        /// </summary>
        public static PropertyDefinition IpV4DHCPServer = new PropertyDefinition(nameof(IpV4DHCPServer), typeof(string));


        /// <summary>
        /// IpV4DNSServerList
        /// </summary>
        public static PropertyDefinition IpV4DNSServerList = new PropertyDefinition(nameof(IpV4DNSServerList), typeof(IList<String>));


        /// <summary>
        /// DnsSuffixList
        /// </summary>
        public static PropertyDefinition DnsSuffixList = new PropertyDefinition(nameof(DnsSuffixList), typeof(IList<String>));

    }


    /// <summary>
    /// NetworkIPv6ConfigurationManagementConditionObjectSchema
    /// </summary>
    public class NetworkIPv6ConfigurationManagementConditionObjectSchema : NetworkManagementConditionObjectSchema
    {

        /// <summary>
        /// IpV6Prefix
        /// </summary>
        public static PropertyDefinition IpV6Prefix = new PropertyDefinition(nameof(IpV6Prefix), typeof(string));


        /// <summary>
        /// IpV6Gateway
        /// </summary>
        public static PropertyDefinition IpV6Gateway = new PropertyDefinition(nameof(IpV6Gateway), typeof(string));


        /// <summary>
        /// IpV6DNSServerList
        /// </summary>
        public static PropertyDefinition IpV6DNSServerList = new PropertyDefinition(nameof(IpV6DNSServerList), typeof(IList<String>));


        /// <summary>
        /// DnsSuffixList
        /// </summary>
        public static PropertyDefinition DnsSuffixList = new PropertyDefinition(nameof(DnsSuffixList), typeof(IList<String>));

    }


    /// <summary>
    /// ManagedMobileAppObjectSchema
    /// </summary>
    public class ManagedMobileAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// MobileAppIdentifier
        /// </summary>
        public static PropertyDefinition MobileAppIdentifier = new PropertyDefinition(nameof(MobileAppIdentifier), typeof(MobileAppIdentifier));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// TargetedManagedAppPolicyAssignmentObjectSchema
    /// </summary>
    public class TargetedManagedAppPolicyAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// ManagedAppOperationObjectSchema
    /// </summary>
    public class ManagedAppOperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// ManagedAppPolicyDeploymentSummaryObjectSchema
    /// </summary>
    public class ManagedAppPolicyDeploymentSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// ConfigurationDeployedUserCount
        /// </summary>
        public static PropertyDefinition ConfigurationDeployedUserCount = new PropertyDefinition(nameof(ConfigurationDeployedUserCount), typeof(int));


        /// <summary>
        /// LastRefreshTime
        /// </summary>
        public static PropertyDefinition LastRefreshTime = new PropertyDefinition(nameof(LastRefreshTime), typeof(DateTimeOffset));


        /// <summary>
        /// ConfigurationDeploymentSummaryPerApp
        /// </summary>
        public static PropertyDefinition ConfigurationDeploymentSummaryPerApp = new PropertyDefinition(nameof(ConfigurationDeploymentSummaryPerApp), typeof(IList<ManagedAppPolicyDeploymentSummaryPerApp>));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// WindowsInformationProtectionAppLockerFileObjectSchema
    /// </summary>
    public class WindowsInformationProtectionAppLockerFileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// FileHash
        /// </summary>
        public static PropertyDefinition FileHash = new PropertyDefinition(nameof(FileHash), typeof(string));


        /// <summary>
        /// File
        /// </summary>
        public static PropertyDefinition File = new PropertyDefinition(nameof(File), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// IosManagedAppRegistrationObjectSchema
    /// </summary>
    public class IosManagedAppRegistrationObjectSchema : ManagedAppRegistrationObjectSchema
    {
    }


    /// <summary>
    /// AndroidManagedAppRegistrationObjectSchema
    /// </summary>
    public class AndroidManagedAppRegistrationObjectSchema : ManagedAppRegistrationObjectSchema
    {

        /// <summary>
        /// PatchVersion
        /// </summary>
        public static PropertyDefinition PatchVersion = new PropertyDefinition(nameof(PatchVersion), typeof(string));

    }


    /// <summary>
    /// ManagedAppStatusRawObjectSchema
    /// </summary>
    public class ManagedAppStatusRawObjectSchema : ManagedAppStatusObjectSchema
    {

        /// <summary>
        /// Content
        /// </summary>
        public static PropertyDefinition Content = new PropertyDefinition(nameof(Content), typeof(Json));

    }


    /// <summary>
    /// LocalizedNotificationMessageObjectSchema
    /// </summary>
    public class LocalizedNotificationMessageObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Locale
        /// </summary>
        public static PropertyDefinition Locale = new PropertyDefinition(nameof(Locale), typeof(string));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// MessageTemplate
        /// </summary>
        public static PropertyDefinition MessageTemplate = new PropertyDefinition(nameof(MessageTemplate), typeof(string));


        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));

    }


    /// <summary>
    /// DeviceAndAppManagementRoleDefinitionObjectSchema
    /// </summary>
    public class DeviceAndAppManagementRoleDefinitionObjectSchema : RoleDefinitionObjectSchema
    {
    }


    /// <summary>
    /// EmbeddedSIMActivationCodePoolAssignmentObjectSchema
    /// </summary>
    public class EmbeddedSIMActivationCodePoolAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// EmbeddedSIMDeviceStateObjectSchema
    /// </summary>
    public class EmbeddedSIMDeviceStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ModifiedDateTime
        /// </summary>
        public static PropertyDefinition ModifiedDateTime = new PropertyDefinition(nameof(ModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UniversalIntegratedCircuitCardIdentifier
        /// </summary>
        public static PropertyDefinition UniversalIntegratedCircuitCardIdentifier = new PropertyDefinition(nameof(UniversalIntegratedCircuitCardIdentifier), typeof(string));


        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(EmbeddedSIMDeviceStateValue));


        /// <summary>
        /// StateDetails
        /// </summary>
        public static PropertyDefinition StateDetails = new PropertyDefinition(nameof(StateDetails), typeof(string));

    }


    /// <summary>
    /// ManagedEBookAssignmentObjectSchema
    /// </summary>
    public class ManagedEBookAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));


        /// <summary>
        /// InstallIntent
        /// </summary>
        public static PropertyDefinition InstallIntent = new PropertyDefinition(nameof(InstallIntent), typeof(InstallIntent));

    }


    /// <summary>
    /// EBookInstallSummaryObjectSchema
    /// </summary>
    public class EBookInstallSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// InstalledDeviceCount
        /// </summary>
        public static PropertyDefinition InstalledDeviceCount = new PropertyDefinition(nameof(InstalledDeviceCount), typeof(int));


        /// <summary>
        /// FailedDeviceCount
        /// </summary>
        public static PropertyDefinition FailedDeviceCount = new PropertyDefinition(nameof(FailedDeviceCount), typeof(int));


        /// <summary>
        /// NotInstalledDeviceCount
        /// </summary>
        public static PropertyDefinition NotInstalledDeviceCount = new PropertyDefinition(nameof(NotInstalledDeviceCount), typeof(int));


        /// <summary>
        /// InstalledUserCount
        /// </summary>
        public static PropertyDefinition InstalledUserCount = new PropertyDefinition(nameof(InstalledUserCount), typeof(int));


        /// <summary>
        /// FailedUserCount
        /// </summary>
        public static PropertyDefinition FailedUserCount = new PropertyDefinition(nameof(FailedUserCount), typeof(int));


        /// <summary>
        /// NotInstalledUserCount
        /// </summary>
        public static PropertyDefinition NotInstalledUserCount = new PropertyDefinition(nameof(NotInstalledUserCount), typeof(int));

    }


    /// <summary>
    /// DeviceInstallStateObjectSchema
    /// </summary>
    public class DeviceInstallStateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DeviceName
        /// </summary>
        public static PropertyDefinition DeviceName = new PropertyDefinition(nameof(DeviceName), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// LastSyncDateTime
        /// </summary>
        public static PropertyDefinition LastSyncDateTime = new PropertyDefinition(nameof(LastSyncDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// InstallState
        /// </summary>
        public static PropertyDefinition InstallState = new PropertyDefinition(nameof(InstallState), typeof(InstallState));


        /// <summary>
        /// ErrorCode
        /// </summary>
        public static PropertyDefinition ErrorCode = new PropertyDefinition(nameof(ErrorCode), typeof(string));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// OsDescription
        /// </summary>
        public static PropertyDefinition OsDescription = new PropertyDefinition(nameof(OsDescription), typeof(string));


        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));

    }


    /// <summary>
    /// UserInstallStateSummaryObjectSchema
    /// </summary>
    public class UserInstallStateSummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserName
        /// </summary>
        public static PropertyDefinition UserName = new PropertyDefinition(nameof(UserName), typeof(string));


        /// <summary>
        /// InstalledDeviceCount
        /// </summary>
        public static PropertyDefinition InstalledDeviceCount = new PropertyDefinition(nameof(InstalledDeviceCount), typeof(int));


        /// <summary>
        /// FailedDeviceCount
        /// </summary>
        public static PropertyDefinition FailedDeviceCount = new PropertyDefinition(nameof(FailedDeviceCount), typeof(int));


        /// <summary>
        /// NotInstalledDeviceCount
        /// </summary>
        public static PropertyDefinition NotInstalledDeviceCount = new PropertyDefinition(nameof(NotInstalledDeviceCount), typeof(int));


        /// <summary>
        /// DeviceStates
        /// </summary>
        public static PropertyDefinition DeviceStates = new PropertyDefinition(nameof(DeviceStates), typeof(IList<DeviceInstallState>));

    }


    /// <summary>
    /// IosVppEBookAssignmentObjectSchema
    /// </summary>
    public class IosVppEBookAssignmentObjectSchema : ManagedEBookAssignmentObjectSchema
    {
    }


    /// <summary>
    /// IosVppEBookObjectSchema
    /// </summary>
    public class IosVppEBookObjectSchema : ManagedEBookObjectSchema
    {

        /// <summary>
        /// VppTokenId
        /// </summary>
        public static PropertyDefinition VppTokenId = new PropertyDefinition(nameof(VppTokenId), typeof(Guid));


        /// <summary>
        /// AppleId
        /// </summary>
        public static PropertyDefinition AppleId = new PropertyDefinition(nameof(AppleId), typeof(string));


        /// <summary>
        /// VppOrganizationName
        /// </summary>
        public static PropertyDefinition VppOrganizationName = new PropertyDefinition(nameof(VppOrganizationName), typeof(string));


        /// <summary>
        /// Genres
        /// </summary>
        public static PropertyDefinition Genres = new PropertyDefinition(nameof(Genres), typeof(IList<String>));


        /// <summary>
        /// Language
        /// </summary>
        public static PropertyDefinition Language = new PropertyDefinition(nameof(Language), typeof(string));


        /// <summary>
        /// Seller
        /// </summary>
        public static PropertyDefinition Seller = new PropertyDefinition(nameof(Seller), typeof(string));


        /// <summary>
        /// TotalLicenseCount
        /// </summary>
        public static PropertyDefinition TotalLicenseCount = new PropertyDefinition(nameof(TotalLicenseCount), typeof(int));


        /// <summary>
        /// UsedLicenseCount
        /// </summary>
        public static PropertyDefinition UsedLicenseCount = new PropertyDefinition(nameof(UsedLicenseCount), typeof(int));


        /// <summary>
        /// RoleScopeTagIds
        /// </summary>
        public static PropertyDefinition RoleScopeTagIds = new PropertyDefinition(nameof(RoleScopeTagIds), typeof(IList<String>));

    }


    /// <summary>
    /// ImportedDeviceIdentityResultObjectSchema
    /// </summary>
    public class ImportedDeviceIdentityResultObjectSchema : ImportedDeviceIdentityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(bool));

    }


    /// <summary>
    /// WindowsAutopilotDeploymentProfileAssignmentObjectSchema
    /// </summary>
    public class WindowsAutopilotDeploymentProfileAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// EnrollmentProfileObjectSchema
    /// </summary>
    public class EnrollmentProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// RequiresUserAuthentication
        /// </summary>
        public static PropertyDefinition RequiresUserAuthentication = new PropertyDefinition(nameof(RequiresUserAuthentication), typeof(bool));


        /// <summary>
        /// ConfigurationEndpointUrl
        /// </summary>
        public static PropertyDefinition ConfigurationEndpointUrl = new PropertyDefinition(nameof(ConfigurationEndpointUrl), typeof(string));


        /// <summary>
        /// EnableAuthenticationViaCompanyPortal
        /// </summary>
        public static PropertyDefinition EnableAuthenticationViaCompanyPortal = new PropertyDefinition(nameof(EnableAuthenticationViaCompanyPortal), typeof(bool));


        /// <summary>
        /// RequireCompanyPortalOnSetupAssistantEnrolledDevices
        /// </summary>
        public static PropertyDefinition RequireCompanyPortalOnSetupAssistantEnrolledDevices = new PropertyDefinition(nameof(RequireCompanyPortalOnSetupAssistantEnrolledDevices), typeof(bool));

    }


    /// <summary>
    /// DepEnrollmentBaseProfileObjectSchema
    /// </summary>
    public class DepEnrollmentBaseProfileObjectSchema : EnrollmentProfileObjectSchema
    {

        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// SupervisedModeEnabled
        /// </summary>
        public static PropertyDefinition SupervisedModeEnabled = new PropertyDefinition(nameof(SupervisedModeEnabled), typeof(bool));


        /// <summary>
        /// SupportDepartment
        /// </summary>
        public static PropertyDefinition SupportDepartment = new PropertyDefinition(nameof(SupportDepartment), typeof(string));


        /// <summary>
        /// PassCodeDisabled
        /// </summary>
        public static PropertyDefinition PassCodeDisabled = new PropertyDefinition(nameof(PassCodeDisabled), typeof(bool));


        /// <summary>
        /// IsMandatory
        /// </summary>
        public static PropertyDefinition IsMandatory = new PropertyDefinition(nameof(IsMandatory), typeof(bool));


        /// <summary>
        /// LocationDisabled
        /// </summary>
        public static PropertyDefinition LocationDisabled = new PropertyDefinition(nameof(LocationDisabled), typeof(bool));


        /// <summary>
        /// SupportPhoneNumber
        /// </summary>
        public static PropertyDefinition SupportPhoneNumber = new PropertyDefinition(nameof(SupportPhoneNumber), typeof(string));


        /// <summary>
        /// ProfileRemovalDisabled
        /// </summary>
        public static PropertyDefinition ProfileRemovalDisabled = new PropertyDefinition(nameof(ProfileRemovalDisabled), typeof(bool));


        /// <summary>
        /// RestoreBlocked
        /// </summary>
        public static PropertyDefinition RestoreBlocked = new PropertyDefinition(nameof(RestoreBlocked), typeof(bool));


        /// <summary>
        /// AppleIdDisabled
        /// </summary>
        public static PropertyDefinition AppleIdDisabled = new PropertyDefinition(nameof(AppleIdDisabled), typeof(bool));


        /// <summary>
        /// TermsAndConditionsDisabled
        /// </summary>
        public static PropertyDefinition TermsAndConditionsDisabled = new PropertyDefinition(nameof(TermsAndConditionsDisabled), typeof(bool));


        /// <summary>
        /// TouchIdDisabled
        /// </summary>
        public static PropertyDefinition TouchIdDisabled = new PropertyDefinition(nameof(TouchIdDisabled), typeof(bool));


        /// <summary>
        /// ApplePayDisabled
        /// </summary>
        public static PropertyDefinition ApplePayDisabled = new PropertyDefinition(nameof(ApplePayDisabled), typeof(bool));


        /// <summary>
        /// ZoomDisabled
        /// </summary>
        public static PropertyDefinition ZoomDisabled = new PropertyDefinition(nameof(ZoomDisabled), typeof(bool));


        /// <summary>
        /// SiriDisabled
        /// </summary>
        public static PropertyDefinition SiriDisabled = new PropertyDefinition(nameof(SiriDisabled), typeof(bool));


        /// <summary>
        /// DiagnosticsDisabled
        /// </summary>
        public static PropertyDefinition DiagnosticsDisabled = new PropertyDefinition(nameof(DiagnosticsDisabled), typeof(bool));


        /// <summary>
        /// DisplayToneSetupDisabled
        /// </summary>
        public static PropertyDefinition DisplayToneSetupDisabled = new PropertyDefinition(nameof(DisplayToneSetupDisabled), typeof(bool));


        /// <summary>
        /// PrivacyPaneDisabled
        /// </summary>
        public static PropertyDefinition PrivacyPaneDisabled = new PropertyDefinition(nameof(PrivacyPaneDisabled), typeof(bool));

    }


    /// <summary>
    /// DepIOSEnrollmentProfileObjectSchema
    /// </summary>
    public class DepIOSEnrollmentProfileObjectSchema : DepEnrollmentBaseProfileObjectSchema
    {

        /// <summary>
        /// ITunesPairingMode
        /// </summary>
        public static PropertyDefinition ITunesPairingMode = new PropertyDefinition(nameof(ITunesPairingMode), typeof(ITunesPairingMode));


        /// <summary>
        /// ManagementCertificates
        /// </summary>
        public static PropertyDefinition ManagementCertificates = new PropertyDefinition(nameof(ManagementCertificates), typeof(IList<ManagementCertificateWithThumbprint>));


        /// <summary>
        /// RestoreFromAndroidDisabled
        /// </summary>
        public static PropertyDefinition RestoreFromAndroidDisabled = new PropertyDefinition(nameof(RestoreFromAndroidDisabled), typeof(bool));


        /// <summary>
        /// AwaitDeviceConfiguredConfirmation
        /// </summary>
        public static PropertyDefinition AwaitDeviceConfiguredConfirmation = new PropertyDefinition(nameof(AwaitDeviceConfiguredConfirmation), typeof(bool));


        /// <summary>
        /// SharedIPadMaximumUserCount
        /// </summary>
        public static PropertyDefinition SharedIPadMaximumUserCount = new PropertyDefinition(nameof(SharedIPadMaximumUserCount), typeof(int));


        /// <summary>
        /// EnableSharedIPad
        /// </summary>
        public static PropertyDefinition EnableSharedIPad = new PropertyDefinition(nameof(EnableSharedIPad), typeof(bool));


        /// <summary>
        /// CompanyPortalVppTokenId
        /// </summary>
        public static PropertyDefinition CompanyPortalVppTokenId = new PropertyDefinition(nameof(CompanyPortalVppTokenId), typeof(string));


        /// <summary>
        /// EnableSingleAppEnrollmentMode
        /// </summary>
        public static PropertyDefinition EnableSingleAppEnrollmentMode = new PropertyDefinition(nameof(EnableSingleAppEnrollmentMode), typeof(bool));


        /// <summary>
        /// HomeButtonScreenDisabled
        /// </summary>
        public static PropertyDefinition HomeButtonScreenDisabled = new PropertyDefinition(nameof(HomeButtonScreenDisabled), typeof(bool));


        /// <summary>
        /// IMessageAndFaceTimeScreenDisabled
        /// </summary>
        public static PropertyDefinition IMessageAndFaceTimeScreenDisabled = new PropertyDefinition(nameof(IMessageAndFaceTimeScreenDisabled), typeof(bool));


        /// <summary>
        /// OnBoardingScreenDisabled
        /// </summary>
        public static PropertyDefinition OnBoardingScreenDisabled = new PropertyDefinition(nameof(OnBoardingScreenDisabled), typeof(bool));


        /// <summary>
        /// ScreenTimeScreenDisabled
        /// </summary>
        public static PropertyDefinition ScreenTimeScreenDisabled = new PropertyDefinition(nameof(ScreenTimeScreenDisabled), typeof(bool));


        /// <summary>
        /// SimSetupScreenDisabled
        /// </summary>
        public static PropertyDefinition SimSetupScreenDisabled = new PropertyDefinition(nameof(SimSetupScreenDisabled), typeof(bool));


        /// <summary>
        /// SoftwareUpdateScreenDisabled
        /// </summary>
        public static PropertyDefinition SoftwareUpdateScreenDisabled = new PropertyDefinition(nameof(SoftwareUpdateScreenDisabled), typeof(bool));


        /// <summary>
        /// WatchMigrationScreenDisabled
        /// </summary>
        public static PropertyDefinition WatchMigrationScreenDisabled = new PropertyDefinition(nameof(WatchMigrationScreenDisabled), typeof(bool));

    }


    /// <summary>
    /// DepMacOSEnrollmentProfileObjectSchema
    /// </summary>
    public class DepMacOSEnrollmentProfileObjectSchema : DepEnrollmentBaseProfileObjectSchema
    {

        /// <summary>
        /// RegistrationDisabled
        /// </summary>
        public static PropertyDefinition RegistrationDisabled = new PropertyDefinition(nameof(RegistrationDisabled), typeof(bool));


        /// <summary>
        /// FileVaultDisabled
        /// </summary>
        public static PropertyDefinition FileVaultDisabled = new PropertyDefinition(nameof(FileVaultDisabled), typeof(bool));


        /// <summary>
        /// ICloudDiagnosticsDisabled
        /// </summary>
        public static PropertyDefinition ICloudDiagnosticsDisabled = new PropertyDefinition(nameof(ICloudDiagnosticsDisabled), typeof(bool));

    }


    /// <summary>
    /// ImportedAppleDeviceIdentityObjectSchema
    /// </summary>
    public class ImportedAppleDeviceIdentityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SerialNumber
        /// </summary>
        public static PropertyDefinition SerialNumber = new PropertyDefinition(nameof(SerialNumber), typeof(string));


        /// <summary>
        /// RequestedEnrollmentProfileId
        /// </summary>
        public static PropertyDefinition RequestedEnrollmentProfileId = new PropertyDefinition(nameof(RequestedEnrollmentProfileId), typeof(string));


        /// <summary>
        /// RequestedEnrollmentProfileAssignmentDateTime
        /// </summary>
        public static PropertyDefinition RequestedEnrollmentProfileAssignmentDateTime = new PropertyDefinition(nameof(RequestedEnrollmentProfileAssignmentDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IsSupervised
        /// </summary>
        public static PropertyDefinition IsSupervised = new PropertyDefinition(nameof(IsSupervised), typeof(bool));


        /// <summary>
        /// DiscoverySource
        /// </summary>
        public static PropertyDefinition DiscoverySource = new PropertyDefinition(nameof(DiscoverySource), typeof(DiscoverySource));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastContactedDateTime
        /// </summary>
        public static PropertyDefinition LastContactedDateTime = new PropertyDefinition(nameof(LastContactedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// EnrollmentState
        /// </summary>
        public static PropertyDefinition EnrollmentState = new PropertyDefinition(nameof(EnrollmentState), typeof(EnrollmentState));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(Platform));

    }


    /// <summary>
    /// ImportedAppleDeviceIdentityResultObjectSchema
    /// </summary>
    public class ImportedAppleDeviceIdentityResultObjectSchema : ImportedAppleDeviceIdentityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(bool));

    }


    /// <summary>
    /// ActiveDirectoryWindowsAutopilotDeploymentProfileObjectSchema
    /// </summary>
    public class ActiveDirectoryWindowsAutopilotDeploymentProfileObjectSchema : WindowsAutopilotDeploymentProfileObjectSchema
    {

        /// <summary>
        /// DomainJoinConfiguration
        /// </summary>
        public static PropertyDefinition DomainJoinConfiguration = new PropertyDefinition(nameof(DomainJoinConfiguration), typeof(WindowsDomainJoinConfiguration));

    }


    /// <summary>
    /// AzureADWindowsAutopilotDeploymentProfileObjectSchema
    /// </summary>
    public class AzureADWindowsAutopilotDeploymentProfileObjectSchema : WindowsAutopilotDeploymentProfileObjectSchema
    {
    }


    /// <summary>
    /// DepEnrollmentProfileObjectSchema
    /// </summary>
    public class DepEnrollmentProfileObjectSchema : EnrollmentProfileObjectSchema
    {

        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// SupervisedModeEnabled
        /// </summary>
        public static PropertyDefinition SupervisedModeEnabled = new PropertyDefinition(nameof(SupervisedModeEnabled), typeof(bool));


        /// <summary>
        /// SupportDepartment
        /// </summary>
        public static PropertyDefinition SupportDepartment = new PropertyDefinition(nameof(SupportDepartment), typeof(string));


        /// <summary>
        /// PassCodeDisabled
        /// </summary>
        public static PropertyDefinition PassCodeDisabled = new PropertyDefinition(nameof(PassCodeDisabled), typeof(bool));


        /// <summary>
        /// IsMandatory
        /// </summary>
        public static PropertyDefinition IsMandatory = new PropertyDefinition(nameof(IsMandatory), typeof(bool));


        /// <summary>
        /// LocationDisabled
        /// </summary>
        public static PropertyDefinition LocationDisabled = new PropertyDefinition(nameof(LocationDisabled), typeof(bool));


        /// <summary>
        /// SupportPhoneNumber
        /// </summary>
        public static PropertyDefinition SupportPhoneNumber = new PropertyDefinition(nameof(SupportPhoneNumber), typeof(string));


        /// <summary>
        /// ITunesPairingMode
        /// </summary>
        public static PropertyDefinition ITunesPairingMode = new PropertyDefinition(nameof(ITunesPairingMode), typeof(ITunesPairingMode));


        /// <summary>
        /// ProfileRemovalDisabled
        /// </summary>
        public static PropertyDefinition ProfileRemovalDisabled = new PropertyDefinition(nameof(ProfileRemovalDisabled), typeof(bool));


        /// <summary>
        /// ManagementCertificates
        /// </summary>
        public static PropertyDefinition ManagementCertificates = new PropertyDefinition(nameof(ManagementCertificates), typeof(IList<ManagementCertificateWithThumbprint>));


        /// <summary>
        /// RestoreBlocked
        /// </summary>
        public static PropertyDefinition RestoreBlocked = new PropertyDefinition(nameof(RestoreBlocked), typeof(bool));


        /// <summary>
        /// RestoreFromAndroidDisabled
        /// </summary>
        public static PropertyDefinition RestoreFromAndroidDisabled = new PropertyDefinition(nameof(RestoreFromAndroidDisabled), typeof(bool));


        /// <summary>
        /// AppleIdDisabled
        /// </summary>
        public static PropertyDefinition AppleIdDisabled = new PropertyDefinition(nameof(AppleIdDisabled), typeof(bool));


        /// <summary>
        /// TermsAndConditionsDisabled
        /// </summary>
        public static PropertyDefinition TermsAndConditionsDisabled = new PropertyDefinition(nameof(TermsAndConditionsDisabled), typeof(bool));


        /// <summary>
        /// TouchIdDisabled
        /// </summary>
        public static PropertyDefinition TouchIdDisabled = new PropertyDefinition(nameof(TouchIdDisabled), typeof(bool));


        /// <summary>
        /// ApplePayDisabled
        /// </summary>
        public static PropertyDefinition ApplePayDisabled = new PropertyDefinition(nameof(ApplePayDisabled), typeof(bool));


        /// <summary>
        /// ZoomDisabled
        /// </summary>
        public static PropertyDefinition ZoomDisabled = new PropertyDefinition(nameof(ZoomDisabled), typeof(bool));


        /// <summary>
        /// SiriDisabled
        /// </summary>
        public static PropertyDefinition SiriDisabled = new PropertyDefinition(nameof(SiriDisabled), typeof(bool));


        /// <summary>
        /// DiagnosticsDisabled
        /// </summary>
        public static PropertyDefinition DiagnosticsDisabled = new PropertyDefinition(nameof(DiagnosticsDisabled), typeof(bool));


        /// <summary>
        /// MacOSRegistrationDisabled
        /// </summary>
        public static PropertyDefinition MacOSRegistrationDisabled = new PropertyDefinition(nameof(MacOSRegistrationDisabled), typeof(bool));


        /// <summary>
        /// MacOSFileVaultDisabled
        /// </summary>
        public static PropertyDefinition MacOSFileVaultDisabled = new PropertyDefinition(nameof(MacOSFileVaultDisabled), typeof(bool));


        /// <summary>
        /// AwaitDeviceConfiguredConfirmation
        /// </summary>
        public static PropertyDefinition AwaitDeviceConfiguredConfirmation = new PropertyDefinition(nameof(AwaitDeviceConfiguredConfirmation), typeof(bool));


        /// <summary>
        /// SharedIPadMaximumUserCount
        /// </summary>
        public static PropertyDefinition SharedIPadMaximumUserCount = new PropertyDefinition(nameof(SharedIPadMaximumUserCount), typeof(int));


        /// <summary>
        /// EnableSharedIPad
        /// </summary>
        public static PropertyDefinition EnableSharedIPad = new PropertyDefinition(nameof(EnableSharedIPad), typeof(bool));

    }


    /// <summary>
    /// IntuneBrandingProfileAssignmentObjectSchema
    /// </summary>
    public class IntuneBrandingProfileAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// Office365ActivationsUserDetailObjectSchema
    /// </summary>
    public class Office365ActivationsUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// UserActivationCounts
        /// </summary>
        public static PropertyDefinition UserActivationCounts = new PropertyDefinition(nameof(UserActivationCounts), typeof(IList<UserActivationCounts>));

    }


    /// <summary>
    /// Office365ActivationCountsObjectSchema
    /// </summary>
    public class Office365ActivationCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ProductType
        /// </summary>
        public static PropertyDefinition ProductType = new PropertyDefinition(nameof(ProductType), typeof(string));


        /// <summary>
        /// Windows
        /// </summary>
        public static PropertyDefinition Windows = new PropertyDefinition(nameof(Windows), typeof(Int64));


        /// <summary>
        /// Mac
        /// </summary>
        public static PropertyDefinition Mac = new PropertyDefinition(nameof(Mac), typeof(Int64));


        /// <summary>
        /// Android
        /// </summary>
        public static PropertyDefinition Android = new PropertyDefinition(nameof(Android), typeof(Int64));


        /// <summary>
        /// Ios
        /// </summary>
        public static PropertyDefinition Ios = new PropertyDefinition(nameof(Ios), typeof(Int64));


        /// <summary>
        /// Windows10Mobile
        /// </summary>
        public static PropertyDefinition Windows10Mobile = new PropertyDefinition(nameof(Windows10Mobile), typeof(Int64));

    }


    /// <summary>
    /// Office365ActivationsUserCountsObjectSchema
    /// </summary>
    public class Office365ActivationsUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ProductType
        /// </summary>
        public static PropertyDefinition ProductType = new PropertyDefinition(nameof(ProductType), typeof(string));


        /// <summary>
        /// Assigned
        /// </summary>
        public static PropertyDefinition Assigned = new PropertyDefinition(nameof(Assigned), typeof(Int64));


        /// <summary>
        /// Activated
        /// </summary>
        public static PropertyDefinition Activated = new PropertyDefinition(nameof(Activated), typeof(Int64));


        /// <summary>
        /// SharedComputerActivation
        /// </summary>
        public static PropertyDefinition SharedComputerActivation = new PropertyDefinition(nameof(SharedComputerActivation), typeof(Int64));

    }


    /// <summary>
    /// Office365ActiveUserDetailObjectSchema
    /// </summary>
    public class Office365ActiveUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// HasExchangeLicense
        /// </summary>
        public static PropertyDefinition HasExchangeLicense = new PropertyDefinition(nameof(HasExchangeLicense), typeof(bool));


        /// <summary>
        /// HasOneDriveLicense
        /// </summary>
        public static PropertyDefinition HasOneDriveLicense = new PropertyDefinition(nameof(HasOneDriveLicense), typeof(bool));


        /// <summary>
        /// HasSharePointLicense
        /// </summary>
        public static PropertyDefinition HasSharePointLicense = new PropertyDefinition(nameof(HasSharePointLicense), typeof(bool));


        /// <summary>
        /// HasSkypeForBusinessLicense
        /// </summary>
        public static PropertyDefinition HasSkypeForBusinessLicense = new PropertyDefinition(nameof(HasSkypeForBusinessLicense), typeof(bool));


        /// <summary>
        /// HasYammerLicense
        /// </summary>
        public static PropertyDefinition HasYammerLicense = new PropertyDefinition(nameof(HasYammerLicense), typeof(bool));


        /// <summary>
        /// HasTeamsLicense
        /// </summary>
        public static PropertyDefinition HasTeamsLicense = new PropertyDefinition(nameof(HasTeamsLicense), typeof(bool));


        /// <summary>
        /// ExchangeLastActivityDate
        /// </summary>
        public static PropertyDefinition ExchangeLastActivityDate = new PropertyDefinition(nameof(ExchangeLastActivityDate), typeof(DateTime));


        /// <summary>
        /// OneDriveLastActivityDate
        /// </summary>
        public static PropertyDefinition OneDriveLastActivityDate = new PropertyDefinition(nameof(OneDriveLastActivityDate), typeof(DateTime));


        /// <summary>
        /// SharePointLastActivityDate
        /// </summary>
        public static PropertyDefinition SharePointLastActivityDate = new PropertyDefinition(nameof(SharePointLastActivityDate), typeof(DateTime));


        /// <summary>
        /// SkypeForBusinessLastActivityDate
        /// </summary>
        public static PropertyDefinition SkypeForBusinessLastActivityDate = new PropertyDefinition(nameof(SkypeForBusinessLastActivityDate), typeof(DateTime));


        /// <summary>
        /// YammerLastActivityDate
        /// </summary>
        public static PropertyDefinition YammerLastActivityDate = new PropertyDefinition(nameof(YammerLastActivityDate), typeof(DateTime));


        /// <summary>
        /// TeamsLastActivityDate
        /// </summary>
        public static PropertyDefinition TeamsLastActivityDate = new PropertyDefinition(nameof(TeamsLastActivityDate), typeof(DateTime));


        /// <summary>
        /// ExchangeLicenseAssignDate
        /// </summary>
        public static PropertyDefinition ExchangeLicenseAssignDate = new PropertyDefinition(nameof(ExchangeLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// OneDriveLicenseAssignDate
        /// </summary>
        public static PropertyDefinition OneDriveLicenseAssignDate = new PropertyDefinition(nameof(OneDriveLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// SharePointLicenseAssignDate
        /// </summary>
        public static PropertyDefinition SharePointLicenseAssignDate = new PropertyDefinition(nameof(SharePointLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// SkypeForBusinessLicenseAssignDate
        /// </summary>
        public static PropertyDefinition SkypeForBusinessLicenseAssignDate = new PropertyDefinition(nameof(SkypeForBusinessLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// YammerLicenseAssignDate
        /// </summary>
        public static PropertyDefinition YammerLicenseAssignDate = new PropertyDefinition(nameof(YammerLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// TeamsLicenseAssignDate
        /// </summary>
        public static PropertyDefinition TeamsLicenseAssignDate = new PropertyDefinition(nameof(TeamsLicenseAssignDate), typeof(DateTime));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));

    }


    /// <summary>
    /// Office365ServicesUserCountsObjectSchema
    /// </summary>
    public class Office365ServicesUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ExchangeActive
        /// </summary>
        public static PropertyDefinition ExchangeActive = new PropertyDefinition(nameof(ExchangeActive), typeof(Int64));


        /// <summary>
        /// ExchangeInactive
        /// </summary>
        public static PropertyDefinition ExchangeInactive = new PropertyDefinition(nameof(ExchangeInactive), typeof(Int64));


        /// <summary>
        /// OneDriveActive
        /// </summary>
        public static PropertyDefinition OneDriveActive = new PropertyDefinition(nameof(OneDriveActive), typeof(Int64));


        /// <summary>
        /// OneDriveInactive
        /// </summary>
        public static PropertyDefinition OneDriveInactive = new PropertyDefinition(nameof(OneDriveInactive), typeof(Int64));


        /// <summary>
        /// SharePointActive
        /// </summary>
        public static PropertyDefinition SharePointActive = new PropertyDefinition(nameof(SharePointActive), typeof(Int64));


        /// <summary>
        /// SharePointInactive
        /// </summary>
        public static PropertyDefinition SharePointInactive = new PropertyDefinition(nameof(SharePointInactive), typeof(Int64));


        /// <summary>
        /// SkypeForBusinessActive
        /// </summary>
        public static PropertyDefinition SkypeForBusinessActive = new PropertyDefinition(nameof(SkypeForBusinessActive), typeof(Int64));


        /// <summary>
        /// SkypeForBusinessInactive
        /// </summary>
        public static PropertyDefinition SkypeForBusinessInactive = new PropertyDefinition(nameof(SkypeForBusinessInactive), typeof(Int64));


        /// <summary>
        /// YammerActive
        /// </summary>
        public static PropertyDefinition YammerActive = new PropertyDefinition(nameof(YammerActive), typeof(Int64));


        /// <summary>
        /// YammerInactive
        /// </summary>
        public static PropertyDefinition YammerInactive = new PropertyDefinition(nameof(YammerInactive), typeof(Int64));


        /// <summary>
        /// TeamsActive
        /// </summary>
        public static PropertyDefinition TeamsActive = new PropertyDefinition(nameof(TeamsActive), typeof(Int64));


        /// <summary>
        /// TeamsInactive
        /// </summary>
        public static PropertyDefinition TeamsInactive = new PropertyDefinition(nameof(TeamsInactive), typeof(Int64));


        /// <summary>
        /// Office365Active
        /// </summary>
        public static PropertyDefinition Office365Active = new PropertyDefinition(nameof(Office365Active), typeof(Int64));


        /// <summary>
        /// Office365Inactive
        /// </summary>
        public static PropertyDefinition Office365Inactive = new PropertyDefinition(nameof(Office365Inactive), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365ActiveUserCountsObjectSchema
    /// </summary>
    public class Office365ActiveUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Office365
        /// </summary>
        public static PropertyDefinition Office365 = new PropertyDefinition(nameof(Office365), typeof(Int64));


        /// <summary>
        /// Exchange
        /// </summary>
        public static PropertyDefinition Exchange = new PropertyDefinition(nameof(Exchange), typeof(Int64));


        /// <summary>
        /// OneDrive
        /// </summary>
        public static PropertyDefinition OneDrive = new PropertyDefinition(nameof(OneDrive), typeof(Int64));


        /// <summary>
        /// SharePoint
        /// </summary>
        public static PropertyDefinition SharePoint = new PropertyDefinition(nameof(SharePoint), typeof(Int64));


        /// <summary>
        /// SkypeForBusiness
        /// </summary>
        public static PropertyDefinition SkypeForBusiness = new PropertyDefinition(nameof(SkypeForBusiness), typeof(Int64));


        /// <summary>
        /// Yammer
        /// </summary>
        public static PropertyDefinition Yammer = new PropertyDefinition(nameof(Yammer), typeof(Int64));


        /// <summary>
        /// Teams
        /// </summary>
        public static PropertyDefinition Teams = new PropertyDefinition(nameof(Teams), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365GroupsActivityDetailObjectSchema
    /// </summary>
    public class Office365GroupsActivityDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// GroupDisplayName
        /// </summary>
        public static PropertyDefinition GroupDisplayName = new PropertyDefinition(nameof(GroupDisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// OwnerPrincipalName
        /// </summary>
        public static PropertyDefinition OwnerPrincipalName = new PropertyDefinition(nameof(OwnerPrincipalName), typeof(string));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// GroupType
        /// </summary>
        public static PropertyDefinition GroupType = new PropertyDefinition(nameof(GroupType), typeof(string));


        /// <summary>
        /// MemberCount
        /// </summary>
        public static PropertyDefinition MemberCount = new PropertyDefinition(nameof(MemberCount), typeof(Int64));


        /// <summary>
        /// ExternalMemberCount
        /// </summary>
        public static PropertyDefinition ExternalMemberCount = new PropertyDefinition(nameof(ExternalMemberCount), typeof(Int64));


        /// <summary>
        /// ExchangeReceivedEmailCount
        /// </summary>
        public static PropertyDefinition ExchangeReceivedEmailCount = new PropertyDefinition(nameof(ExchangeReceivedEmailCount), typeof(Int64));


        /// <summary>
        /// SharePointActiveFileCount
        /// </summary>
        public static PropertyDefinition SharePointActiveFileCount = new PropertyDefinition(nameof(SharePointActiveFileCount), typeof(Int64));


        /// <summary>
        /// YammerPostedMessageCount
        /// </summary>
        public static PropertyDefinition YammerPostedMessageCount = new PropertyDefinition(nameof(YammerPostedMessageCount), typeof(Int64));


        /// <summary>
        /// YammerReadMessageCount
        /// </summary>
        public static PropertyDefinition YammerReadMessageCount = new PropertyDefinition(nameof(YammerReadMessageCount), typeof(Int64));


        /// <summary>
        /// YammerLikedMessageCount
        /// </summary>
        public static PropertyDefinition YammerLikedMessageCount = new PropertyDefinition(nameof(YammerLikedMessageCount), typeof(Int64));


        /// <summary>
        /// ExchangeMailboxTotalItemCount
        /// </summary>
        public static PropertyDefinition ExchangeMailboxTotalItemCount = new PropertyDefinition(nameof(ExchangeMailboxTotalItemCount), typeof(Int64));


        /// <summary>
        /// ExchangeMailboxStorageUsedInBytes
        /// </summary>
        public static PropertyDefinition ExchangeMailboxStorageUsedInBytes = new PropertyDefinition(nameof(ExchangeMailboxStorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// SharePointTotalFileCount
        /// </summary>
        public static PropertyDefinition SharePointTotalFileCount = new PropertyDefinition(nameof(SharePointTotalFileCount), typeof(Int64));


        /// <summary>
        /// SharePointSiteStorageUsedInBytes
        /// </summary>
        public static PropertyDefinition SharePointSiteStorageUsedInBytes = new PropertyDefinition(nameof(SharePointSiteStorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365GroupsActivityCountsObjectSchema
    /// </summary>
    public class Office365GroupsActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ExchangeEmailsReceived
        /// </summary>
        public static PropertyDefinition ExchangeEmailsReceived = new PropertyDefinition(nameof(ExchangeEmailsReceived), typeof(Int64));


        /// <summary>
        /// YammerMessagesPosted
        /// </summary>
        public static PropertyDefinition YammerMessagesPosted = new PropertyDefinition(nameof(YammerMessagesPosted), typeof(Int64));


        /// <summary>
        /// YammerMessagesRead
        /// </summary>
        public static PropertyDefinition YammerMessagesRead = new PropertyDefinition(nameof(YammerMessagesRead), typeof(Int64));


        /// <summary>
        /// YammerMessagesLiked
        /// </summary>
        public static PropertyDefinition YammerMessagesLiked = new PropertyDefinition(nameof(YammerMessagesLiked), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365GroupsActivityGroupCountsObjectSchema
    /// </summary>
    public class Office365GroupsActivityGroupCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365GroupsActivityStorageObjectSchema
    /// </summary>
    public class Office365GroupsActivityStorageObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// MailboxStorageUsedInBytes
        /// </summary>
        public static PropertyDefinition MailboxStorageUsedInBytes = new PropertyDefinition(nameof(MailboxStorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// SiteStorageUsedInBytes
        /// </summary>
        public static PropertyDefinition SiteStorageUsedInBytes = new PropertyDefinition(nameof(SiteStorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// Office365GroupsActivityFileCountsObjectSchema
    /// </summary>
    public class Office365GroupsActivityFileCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailActivityUserDetailObjectSchema
    /// </summary>
    public class EmailActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// SendCount
        /// </summary>
        public static PropertyDefinition SendCount = new PropertyDefinition(nameof(SendCount), typeof(Int64));


        /// <summary>
        /// ReceiveCount
        /// </summary>
        public static PropertyDefinition ReceiveCount = new PropertyDefinition(nameof(ReceiveCount), typeof(Int64));


        /// <summary>
        /// ReadCount
        /// </summary>
        public static PropertyDefinition ReadCount = new PropertyDefinition(nameof(ReadCount), typeof(Int64));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailActivitySummaryObjectSchema
    /// </summary>
    public class EmailActivitySummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Send
        /// </summary>
        public static PropertyDefinition Send = new PropertyDefinition(nameof(Send), typeof(Int64));


        /// <summary>
        /// Receive
        /// </summary>
        public static PropertyDefinition Receive = new PropertyDefinition(nameof(Receive), typeof(Int64));


        /// <summary>
        /// Read
        /// </summary>
        public static PropertyDefinition Read = new PropertyDefinition(nameof(Read), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailAppUsageUserDetailObjectSchema
    /// </summary>
    public class EmailAppUsageUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// MailForMac
        /// </summary>
        public static PropertyDefinition MailForMac = new PropertyDefinition(nameof(MailForMac), typeof(IList<String>));


        /// <summary>
        /// OutlookForMac
        /// </summary>
        public static PropertyDefinition OutlookForMac = new PropertyDefinition(nameof(OutlookForMac), typeof(IList<String>));


        /// <summary>
        /// OutlookForWindows
        /// </summary>
        public static PropertyDefinition OutlookForWindows = new PropertyDefinition(nameof(OutlookForWindows), typeof(IList<String>));


        /// <summary>
        /// OutlookForMobile
        /// </summary>
        public static PropertyDefinition OutlookForMobile = new PropertyDefinition(nameof(OutlookForMobile), typeof(IList<String>));


        /// <summary>
        /// OtherForMobile
        /// </summary>
        public static PropertyDefinition OtherForMobile = new PropertyDefinition(nameof(OtherForMobile), typeof(IList<String>));


        /// <summary>
        /// OutlookForWeb
        /// </summary>
        public static PropertyDefinition OutlookForWeb = new PropertyDefinition(nameof(OutlookForWeb), typeof(IList<String>));


        /// <summary>
        /// Pop3App
        /// </summary>
        public static PropertyDefinition Pop3App = new PropertyDefinition(nameof(Pop3App), typeof(IList<String>));


        /// <summary>
        /// Imap4App
        /// </summary>
        public static PropertyDefinition Imap4App = new PropertyDefinition(nameof(Imap4App), typeof(IList<String>));


        /// <summary>
        /// SmtpApp
        /// </summary>
        public static PropertyDefinition SmtpApp = new PropertyDefinition(nameof(SmtpApp), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailAppUsageAppsUserCountsObjectSchema
    /// </summary>
    public class EmailAppUsageAppsUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// MailForMac
        /// </summary>
        public static PropertyDefinition MailForMac = new PropertyDefinition(nameof(MailForMac), typeof(Int64));


        /// <summary>
        /// OutlookForMac
        /// </summary>
        public static PropertyDefinition OutlookForMac = new PropertyDefinition(nameof(OutlookForMac), typeof(Int64));


        /// <summary>
        /// OutlookForWindows
        /// </summary>
        public static PropertyDefinition OutlookForWindows = new PropertyDefinition(nameof(OutlookForWindows), typeof(Int64));


        /// <summary>
        /// OutlookForMobile
        /// </summary>
        public static PropertyDefinition OutlookForMobile = new PropertyDefinition(nameof(OutlookForMobile), typeof(Int64));


        /// <summary>
        /// OtherForMobile
        /// </summary>
        public static PropertyDefinition OtherForMobile = new PropertyDefinition(nameof(OtherForMobile), typeof(Int64));


        /// <summary>
        /// OutlookForWeb
        /// </summary>
        public static PropertyDefinition OutlookForWeb = new PropertyDefinition(nameof(OutlookForWeb), typeof(Int64));


        /// <summary>
        /// Pop3App
        /// </summary>
        public static PropertyDefinition Pop3App = new PropertyDefinition(nameof(Pop3App), typeof(Int64));


        /// <summary>
        /// Imap4App
        /// </summary>
        public static PropertyDefinition Imap4App = new PropertyDefinition(nameof(Imap4App), typeof(Int64));


        /// <summary>
        /// SmtpApp
        /// </summary>
        public static PropertyDefinition SmtpApp = new PropertyDefinition(nameof(SmtpApp), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailAppUsageUserCountsObjectSchema
    /// </summary>
    public class EmailAppUsageUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// MailForMac
        /// </summary>
        public static PropertyDefinition MailForMac = new PropertyDefinition(nameof(MailForMac), typeof(Int64));


        /// <summary>
        /// OutlookForMac
        /// </summary>
        public static PropertyDefinition OutlookForMac = new PropertyDefinition(nameof(OutlookForMac), typeof(Int64));


        /// <summary>
        /// OutlookForWindows
        /// </summary>
        public static PropertyDefinition OutlookForWindows = new PropertyDefinition(nameof(OutlookForWindows), typeof(Int64));


        /// <summary>
        /// OutlookForMobile
        /// </summary>
        public static PropertyDefinition OutlookForMobile = new PropertyDefinition(nameof(OutlookForMobile), typeof(Int64));


        /// <summary>
        /// OtherForMobile
        /// </summary>
        public static PropertyDefinition OtherForMobile = new PropertyDefinition(nameof(OtherForMobile), typeof(Int64));


        /// <summary>
        /// OutlookForWeb
        /// </summary>
        public static PropertyDefinition OutlookForWeb = new PropertyDefinition(nameof(OutlookForWeb), typeof(Int64));


        /// <summary>
        /// Pop3App
        /// </summary>
        public static PropertyDefinition Pop3App = new PropertyDefinition(nameof(Pop3App), typeof(Int64));


        /// <summary>
        /// Imap4App
        /// </summary>
        public static PropertyDefinition Imap4App = new PropertyDefinition(nameof(Imap4App), typeof(Int64));


        /// <summary>
        /// SmtpApp
        /// </summary>
        public static PropertyDefinition SmtpApp = new PropertyDefinition(nameof(SmtpApp), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// EmailAppUsageVersionsUserCountsObjectSchema
    /// </summary>
    public class EmailAppUsageVersionsUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Outlook2016
        /// </summary>
        public static PropertyDefinition Outlook2016 = new PropertyDefinition(nameof(Outlook2016), typeof(Int64));


        /// <summary>
        /// Outlook2013
        /// </summary>
        public static PropertyDefinition Outlook2013 = new PropertyDefinition(nameof(Outlook2013), typeof(Int64));


        /// <summary>
        /// Outlook2010
        /// </summary>
        public static PropertyDefinition Outlook2010 = new PropertyDefinition(nameof(Outlook2010), typeof(Int64));


        /// <summary>
        /// Outlook2007
        /// </summary>
        public static PropertyDefinition Outlook2007 = new PropertyDefinition(nameof(Outlook2007), typeof(Int64));


        /// <summary>
        /// Undetermined
        /// </summary>
        public static PropertyDefinition Undetermined = new PropertyDefinition(nameof(Undetermined), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// MailboxUsageDetailObjectSchema
    /// </summary>
    public class MailboxUsageDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// CreatedDate
        /// </summary>
        public static PropertyDefinition CreatedDate = new PropertyDefinition(nameof(CreatedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// ItemCount
        /// </summary>
        public static PropertyDefinition ItemCount = new PropertyDefinition(nameof(ItemCount), typeof(Int64));


        /// <summary>
        /// StorageUsedInBytes
        /// </summary>
        public static PropertyDefinition StorageUsedInBytes = new PropertyDefinition(nameof(StorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// IssueWarningQuotaInBytes
        /// </summary>
        public static PropertyDefinition IssueWarningQuotaInBytes = new PropertyDefinition(nameof(IssueWarningQuotaInBytes), typeof(Int64));


        /// <summary>
        /// ProhibitSendQuotaInBytes
        /// </summary>
        public static PropertyDefinition ProhibitSendQuotaInBytes = new PropertyDefinition(nameof(ProhibitSendQuotaInBytes), typeof(Int64));


        /// <summary>
        /// ProhibitSendReceiveQuotaInBytes
        /// </summary>
        public static PropertyDefinition ProhibitSendReceiveQuotaInBytes = new PropertyDefinition(nameof(ProhibitSendReceiveQuotaInBytes), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// MailboxUsageMailboxCountsObjectSchema
    /// </summary>
    public class MailboxUsageMailboxCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// MailboxUsageQuotaStatusMailboxCountsObjectSchema
    /// </summary>
    public class MailboxUsageQuotaStatusMailboxCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UnderLimit
        /// </summary>
        public static PropertyDefinition UnderLimit = new PropertyDefinition(nameof(UnderLimit), typeof(Int64));


        /// <summary>
        /// WarningIssued
        /// </summary>
        public static PropertyDefinition WarningIssued = new PropertyDefinition(nameof(WarningIssued), typeof(Int64));


        /// <summary>
        /// SendProhibited
        /// </summary>
        public static PropertyDefinition SendProhibited = new PropertyDefinition(nameof(SendProhibited), typeof(Int64));


        /// <summary>
        /// SendReceiveProhibited
        /// </summary>
        public static PropertyDefinition SendReceiveProhibited = new PropertyDefinition(nameof(SendReceiveProhibited), typeof(Int64));


        /// <summary>
        /// Indeterminate
        /// </summary>
        public static PropertyDefinition Indeterminate = new PropertyDefinition(nameof(Indeterminate), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// MailboxUsageStorageObjectSchema
    /// </summary>
    public class MailboxUsageStorageObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// StorageUsedInBytes
        /// </summary>
        public static PropertyDefinition StorageUsedInBytes = new PropertyDefinition(nameof(StorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// OneDriveActivityUserDetailObjectSchema
    /// </summary>
    public class OneDriveActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// ViewedOrEditedFileCount
        /// </summary>
        public static PropertyDefinition ViewedOrEditedFileCount = new PropertyDefinition(nameof(ViewedOrEditedFileCount), typeof(Int64));


        /// <summary>
        /// SyncedFileCount
        /// </summary>
        public static PropertyDefinition SyncedFileCount = new PropertyDefinition(nameof(SyncedFileCount), typeof(Int64));


        /// <summary>
        /// SharedInternallyFileCount
        /// </summary>
        public static PropertyDefinition SharedInternallyFileCount = new PropertyDefinition(nameof(SharedInternallyFileCount), typeof(Int64));


        /// <summary>
        /// SharedExternallyFileCount
        /// </summary>
        public static PropertyDefinition SharedExternallyFileCount = new PropertyDefinition(nameof(SharedExternallyFileCount), typeof(Int64));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SiteActivitySummaryObjectSchema
    /// </summary>
    public class SiteActivitySummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ViewedOrEdited
        /// </summary>
        public static PropertyDefinition ViewedOrEdited = new PropertyDefinition(nameof(ViewedOrEdited), typeof(Int64));


        /// <summary>
        /// Synced
        /// </summary>
        public static PropertyDefinition Synced = new PropertyDefinition(nameof(Synced), typeof(Int64));


        /// <summary>
        /// SharedInternally
        /// </summary>
        public static PropertyDefinition SharedInternally = new PropertyDefinition(nameof(SharedInternally), typeof(Int64));


        /// <summary>
        /// SharedExternally
        /// </summary>
        public static PropertyDefinition SharedExternally = new PropertyDefinition(nameof(SharedExternally), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// OneDriveUsageAccountDetailObjectSchema
    /// </summary>
    public class OneDriveUsageAccountDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteUrl
        /// </summary>
        public static PropertyDefinition SiteUrl = new PropertyDefinition(nameof(SiteUrl), typeof(string));


        /// <summary>
        /// OwnerDisplayName
        /// </summary>
        public static PropertyDefinition OwnerDisplayName = new PropertyDefinition(nameof(OwnerDisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// FileCount
        /// </summary>
        public static PropertyDefinition FileCount = new PropertyDefinition(nameof(FileCount), typeof(Int64));


        /// <summary>
        /// ActiveFileCount
        /// </summary>
        public static PropertyDefinition ActiveFileCount = new PropertyDefinition(nameof(ActiveFileCount), typeof(Int64));


        /// <summary>
        /// StorageUsedInBytes
        /// </summary>
        public static PropertyDefinition StorageUsedInBytes = new PropertyDefinition(nameof(StorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// StorageAllocatedInBytes
        /// </summary>
        public static PropertyDefinition StorageAllocatedInBytes = new PropertyDefinition(nameof(StorageAllocatedInBytes), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// OneDriveUsageAccountCountsObjectSchema
    /// </summary>
    public class OneDriveUsageAccountCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// OneDriveUsageFileCountsObjectSchema
    /// </summary>
    public class OneDriveUsageFileCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SiteUsageStorageObjectSchema
    /// </summary>
    public class SiteUsageStorageObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// StorageUsedInBytes
        /// </summary>
        public static PropertyDefinition StorageUsedInBytes = new PropertyDefinition(nameof(StorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointActivityUserDetailObjectSchema
    /// </summary>
    public class SharePointActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// ViewedOrEditedFileCount
        /// </summary>
        public static PropertyDefinition ViewedOrEditedFileCount = new PropertyDefinition(nameof(ViewedOrEditedFileCount), typeof(Int64));


        /// <summary>
        /// SyncedFileCount
        /// </summary>
        public static PropertyDefinition SyncedFileCount = new PropertyDefinition(nameof(SyncedFileCount), typeof(Int64));


        /// <summary>
        /// SharedInternallyFileCount
        /// </summary>
        public static PropertyDefinition SharedInternallyFileCount = new PropertyDefinition(nameof(SharedInternallyFileCount), typeof(Int64));


        /// <summary>
        /// SharedExternallyFileCount
        /// </summary>
        public static PropertyDefinition SharedExternallyFileCount = new PropertyDefinition(nameof(SharedExternallyFileCount), typeof(Int64));


        /// <summary>
        /// VisitedPageCount
        /// </summary>
        public static PropertyDefinition VisitedPageCount = new PropertyDefinition(nameof(VisitedPageCount), typeof(Int64));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointActivityUserCountsObjectSchema
    /// </summary>
    public class SharePointActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// VisitedPage
        /// </summary>
        public static PropertyDefinition VisitedPage = new PropertyDefinition(nameof(VisitedPage), typeof(Int64));


        /// <summary>
        /// ViewedOrEdited
        /// </summary>
        public static PropertyDefinition ViewedOrEdited = new PropertyDefinition(nameof(ViewedOrEdited), typeof(Int64));


        /// <summary>
        /// Synced
        /// </summary>
        public static PropertyDefinition Synced = new PropertyDefinition(nameof(Synced), typeof(Int64));


        /// <summary>
        /// SharedInternally
        /// </summary>
        public static PropertyDefinition SharedInternally = new PropertyDefinition(nameof(SharedInternally), typeof(Int64));


        /// <summary>
        /// SharedExternally
        /// </summary>
        public static PropertyDefinition SharedExternally = new PropertyDefinition(nameof(SharedExternally), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointActivityPagesObjectSchema
    /// </summary>
    public class SharePointActivityPagesObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// VisitedPageCount
        /// </summary>
        public static PropertyDefinition VisitedPageCount = new PropertyDefinition(nameof(VisitedPageCount), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointSiteUsageDetailObjectSchema
    /// </summary>
    public class SharePointSiteUsageDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteId
        /// </summary>
        public static PropertyDefinition SiteId = new PropertyDefinition(nameof(SiteId), typeof(Guid));


        /// <summary>
        /// SiteUrl
        /// </summary>
        public static PropertyDefinition SiteUrl = new PropertyDefinition(nameof(SiteUrl), typeof(string));


        /// <summary>
        /// OwnerDisplayName
        /// </summary>
        public static PropertyDefinition OwnerDisplayName = new PropertyDefinition(nameof(OwnerDisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// FileCount
        /// </summary>
        public static PropertyDefinition FileCount = new PropertyDefinition(nameof(FileCount), typeof(Int64));


        /// <summary>
        /// ActiveFileCount
        /// </summary>
        public static PropertyDefinition ActiveFileCount = new PropertyDefinition(nameof(ActiveFileCount), typeof(Int64));


        /// <summary>
        /// PageViewCount
        /// </summary>
        public static PropertyDefinition PageViewCount = new PropertyDefinition(nameof(PageViewCount), typeof(Int64));


        /// <summary>
        /// VisitedPageCount
        /// </summary>
        public static PropertyDefinition VisitedPageCount = new PropertyDefinition(nameof(VisitedPageCount), typeof(Int64));


        /// <summary>
        /// StorageUsedInBytes
        /// </summary>
        public static PropertyDefinition StorageUsedInBytes = new PropertyDefinition(nameof(StorageUsedInBytes), typeof(Int64));


        /// <summary>
        /// StorageAllocatedInBytes
        /// </summary>
        public static PropertyDefinition StorageAllocatedInBytes = new PropertyDefinition(nameof(StorageAllocatedInBytes), typeof(Int64));


        /// <summary>
        /// RootWebTemplate
        /// </summary>
        public static PropertyDefinition RootWebTemplate = new PropertyDefinition(nameof(RootWebTemplate), typeof(string));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointSiteUsageFileCountsObjectSchema
    /// </summary>
    public class SharePointSiteUsageFileCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointSiteUsageSiteCountsObjectSchema
    /// </summary>
    public class SharePointSiteUsageSiteCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SharePointSiteUsagePagesObjectSchema
    /// </summary>
    public class SharePointSiteUsagePagesObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// SiteType
        /// </summary>
        public static PropertyDefinition SiteType = new PropertyDefinition(nameof(SiteType), typeof(string));


        /// <summary>
        /// PageViewCount
        /// </summary>
        public static PropertyDefinition PageViewCount = new PropertyDefinition(nameof(PageViewCount), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessActivityUserDetailObjectSchema
    /// </summary>
    public class SkypeForBusinessActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TotalPeerToPeerSessionCount
        /// </summary>
        public static PropertyDefinition TotalPeerToPeerSessionCount = new PropertyDefinition(nameof(TotalPeerToPeerSessionCount), typeof(Int64));


        /// <summary>
        /// TotalOrganizedConferenceCount
        /// </summary>
        public static PropertyDefinition TotalOrganizedConferenceCount = new PropertyDefinition(nameof(TotalOrganizedConferenceCount), typeof(Int64));


        /// <summary>
        /// TotalParticipatedConferenceCount
        /// </summary>
        public static PropertyDefinition TotalParticipatedConferenceCount = new PropertyDefinition(nameof(TotalParticipatedConferenceCount), typeof(Int64));


        /// <summary>
        /// PeerToPeerLastActivityDate
        /// </summary>
        public static PropertyDefinition PeerToPeerLastActivityDate = new PropertyDefinition(nameof(PeerToPeerLastActivityDate), typeof(DateTime));


        /// <summary>
        /// OrganizedConferenceLastActivityDate
        /// </summary>
        public static PropertyDefinition OrganizedConferenceLastActivityDate = new PropertyDefinition(nameof(OrganizedConferenceLastActivityDate), typeof(DateTime));


        /// <summary>
        /// ParticipatedConferenceLastActivityDate
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceLastActivityDate = new PropertyDefinition(nameof(ParticipatedConferenceLastActivityDate), typeof(DateTime));


        /// <summary>
        /// PeerToPeerIMCount
        /// </summary>
        public static PropertyDefinition PeerToPeerIMCount = new PropertyDefinition(nameof(PeerToPeerIMCount), typeof(Int64));


        /// <summary>
        /// PeerToPeerAudioCount
        /// </summary>
        public static PropertyDefinition PeerToPeerAudioCount = new PropertyDefinition(nameof(PeerToPeerAudioCount), typeof(Int64));


        /// <summary>
        /// PeerToPeerAudioMinutes
        /// </summary>
        public static PropertyDefinition PeerToPeerAudioMinutes = new PropertyDefinition(nameof(PeerToPeerAudioMinutes), typeof(Int64));


        /// <summary>
        /// PeerToPeerVideoCount
        /// </summary>
        public static PropertyDefinition PeerToPeerVideoCount = new PropertyDefinition(nameof(PeerToPeerVideoCount), typeof(Int64));


        /// <summary>
        /// PeerToPeerVideoMinutes
        /// </summary>
        public static PropertyDefinition PeerToPeerVideoMinutes = new PropertyDefinition(nameof(PeerToPeerVideoMinutes), typeof(Int64));


        /// <summary>
        /// PeerToPeerAppSharingCount
        /// </summary>
        public static PropertyDefinition PeerToPeerAppSharingCount = new PropertyDefinition(nameof(PeerToPeerAppSharingCount), typeof(Int64));


        /// <summary>
        /// PeerToPeerFileTransferCount
        /// </summary>
        public static PropertyDefinition PeerToPeerFileTransferCount = new PropertyDefinition(nameof(PeerToPeerFileTransferCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceIMCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceIMCount = new PropertyDefinition(nameof(OrganizedConferenceIMCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceAudioVideoCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceAudioVideoCount = new PropertyDefinition(nameof(OrganizedConferenceAudioVideoCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceAudioVideoMinutes
        /// </summary>
        public static PropertyDefinition OrganizedConferenceAudioVideoMinutes = new PropertyDefinition(nameof(OrganizedConferenceAudioVideoMinutes), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceAppSharingCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceAppSharingCount = new PropertyDefinition(nameof(OrganizedConferenceAppSharingCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceWebCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceWebCount = new PropertyDefinition(nameof(OrganizedConferenceWebCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceDialInOut3rdPartyCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceDialInOut3rdPartyCount = new PropertyDefinition(nameof(OrganizedConferenceDialInOut3rdPartyCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceCloudDialInOutMicrosoftCount
        /// </summary>
        public static PropertyDefinition OrganizedConferenceCloudDialInOutMicrosoftCount = new PropertyDefinition(nameof(OrganizedConferenceCloudDialInOutMicrosoftCount), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceCloudDialInMicrosoftMinutes
        /// </summary>
        public static PropertyDefinition OrganizedConferenceCloudDialInMicrosoftMinutes = new PropertyDefinition(nameof(OrganizedConferenceCloudDialInMicrosoftMinutes), typeof(Int64));


        /// <summary>
        /// OrganizedConferenceCloudDialOutMicrosoftMinutes
        /// </summary>
        public static PropertyDefinition OrganizedConferenceCloudDialOutMicrosoftMinutes = new PropertyDefinition(nameof(OrganizedConferenceCloudDialOutMicrosoftMinutes), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceIMCount
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceIMCount = new PropertyDefinition(nameof(ParticipatedConferenceIMCount), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceAudioVideoCount
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceAudioVideoCount = new PropertyDefinition(nameof(ParticipatedConferenceAudioVideoCount), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceAudioVideoMinutes
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceAudioVideoMinutes = new PropertyDefinition(nameof(ParticipatedConferenceAudioVideoMinutes), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceAppSharingCount
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceAppSharingCount = new PropertyDefinition(nameof(ParticipatedConferenceAppSharingCount), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceWebCount
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceWebCount = new PropertyDefinition(nameof(ParticipatedConferenceWebCount), typeof(Int64));


        /// <summary>
        /// ParticipatedConferenceDialInOut3rdPartyCount
        /// </summary>
        public static PropertyDefinition ParticipatedConferenceDialInOut3rdPartyCount = new PropertyDefinition(nameof(ParticipatedConferenceDialInOut3rdPartyCount), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessActivityCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PeerToPeer
        /// </summary>
        public static PropertyDefinition PeerToPeer = new PropertyDefinition(nameof(PeerToPeer), typeof(Int64));


        /// <summary>
        /// Organized
        /// </summary>
        public static PropertyDefinition Organized = new PropertyDefinition(nameof(Organized), typeof(Int64));


        /// <summary>
        /// Participated
        /// </summary>
        public static PropertyDefinition Participated = new PropertyDefinition(nameof(Participated), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessActivityUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PeerToPeer
        /// </summary>
        public static PropertyDefinition PeerToPeer = new PropertyDefinition(nameof(PeerToPeer), typeof(Int64));


        /// <summary>
        /// Organized
        /// </summary>
        public static PropertyDefinition Organized = new PropertyDefinition(nameof(Organized), typeof(Int64));


        /// <summary>
        /// Participated
        /// </summary>
        public static PropertyDefinition Participated = new PropertyDefinition(nameof(Participated), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessPeerToPeerActivityCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessPeerToPeerActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// Audio
        /// </summary>
        public static PropertyDefinition Audio = new PropertyDefinition(nameof(Audio), typeof(Int64));


        /// <summary>
        /// Video
        /// </summary>
        public static PropertyDefinition Video = new PropertyDefinition(nameof(Video), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// FileTransfer
        /// </summary>
        public static PropertyDefinition FileTransfer = new PropertyDefinition(nameof(FileTransfer), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessPeerToPeerActivityUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessPeerToPeerActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// Audio
        /// </summary>
        public static PropertyDefinition Audio = new PropertyDefinition(nameof(Audio), typeof(Int64));


        /// <summary>
        /// Video
        /// </summary>
        public static PropertyDefinition Video = new PropertyDefinition(nameof(Video), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// FileTransfer
        /// </summary>
        public static PropertyDefinition FileTransfer = new PropertyDefinition(nameof(FileTransfer), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessPeerToPeerActivityMinuteCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessPeerToPeerActivityMinuteCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Audio
        /// </summary>
        public static PropertyDefinition Audio = new PropertyDefinition(nameof(Audio), typeof(Int64));


        /// <summary>
        /// Video
        /// </summary>
        public static PropertyDefinition Video = new PropertyDefinition(nameof(Video), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessOrganizerActivityCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessOrganizerActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// AudioVideo
        /// </summary>
        public static PropertyDefinition AudioVideo = new PropertyDefinition(nameof(AudioVideo), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// DialInOut3rdParty
        /// </summary>
        public static PropertyDefinition DialInOut3rdParty = new PropertyDefinition(nameof(DialInOut3rdParty), typeof(Int64));


        /// <summary>
        /// DialInOutMicrosoft
        /// </summary>
        public static PropertyDefinition DialInOutMicrosoft = new PropertyDefinition(nameof(DialInOutMicrosoft), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessOrganizerActivityUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessOrganizerActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// AudioVideo
        /// </summary>
        public static PropertyDefinition AudioVideo = new PropertyDefinition(nameof(AudioVideo), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// DialInOut3rdParty
        /// </summary>
        public static PropertyDefinition DialInOut3rdParty = new PropertyDefinition(nameof(DialInOut3rdParty), typeof(Int64));


        /// <summary>
        /// DialInOutMicrosoft
        /// </summary>
        public static PropertyDefinition DialInOutMicrosoft = new PropertyDefinition(nameof(DialInOutMicrosoft), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessOrganizerActivityMinuteCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessOrganizerActivityMinuteCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AudioVideo
        /// </summary>
        public static PropertyDefinition AudioVideo = new PropertyDefinition(nameof(AudioVideo), typeof(Int64));


        /// <summary>
        /// DialInMicrosoft
        /// </summary>
        public static PropertyDefinition DialInMicrosoft = new PropertyDefinition(nameof(DialInMicrosoft), typeof(Int64));


        /// <summary>
        /// DialOutMicrosoft
        /// </summary>
        public static PropertyDefinition DialOutMicrosoft = new PropertyDefinition(nameof(DialOutMicrosoft), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessParticipantActivityCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessParticipantActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// AudioVideo
        /// </summary>
        public static PropertyDefinition AudioVideo = new PropertyDefinition(nameof(AudioVideo), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// DialInOut3rdParty
        /// </summary>
        public static PropertyDefinition DialInOut3rdParty = new PropertyDefinition(nameof(DialInOut3rdParty), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessParticipantActivityUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessParticipantActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Im
        /// </summary>
        public static PropertyDefinition Im = new PropertyDefinition(nameof(Im), typeof(Int64));


        /// <summary>
        /// AudioVideo
        /// </summary>
        public static PropertyDefinition AudioVideo = new PropertyDefinition(nameof(AudioVideo), typeof(Int64));


        /// <summary>
        /// AppSharing
        /// </summary>
        public static PropertyDefinition AppSharing = new PropertyDefinition(nameof(AppSharing), typeof(Int64));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// DialInOut3rdParty
        /// </summary>
        public static PropertyDefinition DialInOut3rdParty = new PropertyDefinition(nameof(DialInOut3rdParty), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessParticipantActivityMinuteCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessParticipantActivityMinuteCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Audiovideo
        /// </summary>
        public static PropertyDefinition Audiovideo = new PropertyDefinition(nameof(Audiovideo), typeof(Int64));


        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessDeviceUsageUserDetailObjectSchema
    /// </summary>
    public class SkypeForBusinessDeviceUsageUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// UsedWindows
        /// </summary>
        public static PropertyDefinition UsedWindows = new PropertyDefinition(nameof(UsedWindows), typeof(bool));


        /// <summary>
        /// UsedWindowsPhone
        /// </summary>
        public static PropertyDefinition UsedWindowsPhone = new PropertyDefinition(nameof(UsedWindowsPhone), typeof(bool));


        /// <summary>
        /// UsedAndroidPhone
        /// </summary>
        public static PropertyDefinition UsedAndroidPhone = new PropertyDefinition(nameof(UsedAndroidPhone), typeof(bool));


        /// <summary>
        /// UsediPhone
        /// </summary>
        public static PropertyDefinition UsediPhone = new PropertyDefinition(nameof(UsediPhone), typeof(bool));


        /// <summary>
        /// UsediPad
        /// </summary>
        public static PropertyDefinition UsediPad = new PropertyDefinition(nameof(UsediPad), typeof(bool));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessDeviceUsageDistributionUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessDeviceUsageDistributionUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Windows
        /// </summary>
        public static PropertyDefinition Windows = new PropertyDefinition(nameof(Windows), typeof(int));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(int));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(int));


        /// <summary>
        /// IPhone
        /// </summary>
        public static PropertyDefinition IPhone = new PropertyDefinition(nameof(IPhone), typeof(int));


        /// <summary>
        /// IPad
        /// </summary>
        public static PropertyDefinition IPad = new PropertyDefinition(nameof(IPad), typeof(int));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// SkypeForBusinessDeviceUsageUserCountsObjectSchema
    /// </summary>
    public class SkypeForBusinessDeviceUsageUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Windows
        /// </summary>
        public static PropertyDefinition Windows = new PropertyDefinition(nameof(Windows), typeof(int));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(int));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(int));


        /// <summary>
        /// IPhone
        /// </summary>
        public static PropertyDefinition IPhone = new PropertyDefinition(nameof(IPhone), typeof(int));


        /// <summary>
        /// IPad
        /// </summary>
        public static PropertyDefinition IPad = new PropertyDefinition(nameof(IPad), typeof(int));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerActivityUserDetailObjectSchema
    /// </summary>
    public class YammerActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// UserState
        /// </summary>
        public static PropertyDefinition UserState = new PropertyDefinition(nameof(UserState), typeof(string));


        /// <summary>
        /// StateChangeDate
        /// </summary>
        public static PropertyDefinition StateChangeDate = new PropertyDefinition(nameof(StateChangeDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// PostedCount
        /// </summary>
        public static PropertyDefinition PostedCount = new PropertyDefinition(nameof(PostedCount), typeof(Int64));


        /// <summary>
        /// ReadCount
        /// </summary>
        public static PropertyDefinition ReadCount = new PropertyDefinition(nameof(ReadCount), typeof(Int64));


        /// <summary>
        /// LikedCount
        /// </summary>
        public static PropertyDefinition LikedCount = new PropertyDefinition(nameof(LikedCount), typeof(Int64));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerActivitySummaryObjectSchema
    /// </summary>
    public class YammerActivitySummaryObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Liked
        /// </summary>
        public static PropertyDefinition Liked = new PropertyDefinition(nameof(Liked), typeof(Int64));


        /// <summary>
        /// Posted
        /// </summary>
        public static PropertyDefinition Posted = new PropertyDefinition(nameof(Posted), typeof(Int64));


        /// <summary>
        /// Read
        /// </summary>
        public static PropertyDefinition Read = new PropertyDefinition(nameof(Read), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerDeviceUsageUserDetailObjectSchema
    /// </summary>
    public class YammerDeviceUsageUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// UserState
        /// </summary>
        public static PropertyDefinition UserState = new PropertyDefinition(nameof(UserState), typeof(string));


        /// <summary>
        /// StateChangeDate
        /// </summary>
        public static PropertyDefinition StateChangeDate = new PropertyDefinition(nameof(StateChangeDate), typeof(DateTime));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// UsedWeb
        /// </summary>
        public static PropertyDefinition UsedWeb = new PropertyDefinition(nameof(UsedWeb), typeof(bool));


        /// <summary>
        /// UsedWindowsPhone
        /// </summary>
        public static PropertyDefinition UsedWindowsPhone = new PropertyDefinition(nameof(UsedWindowsPhone), typeof(bool));


        /// <summary>
        /// UsedAndroidPhone
        /// </summary>
        public static PropertyDefinition UsedAndroidPhone = new PropertyDefinition(nameof(UsedAndroidPhone), typeof(bool));


        /// <summary>
        /// UsediPhone
        /// </summary>
        public static PropertyDefinition UsediPhone = new PropertyDefinition(nameof(UsediPhone), typeof(bool));


        /// <summary>
        /// UsediPad
        /// </summary>
        public static PropertyDefinition UsediPad = new PropertyDefinition(nameof(UsediPad), typeof(bool));


        /// <summary>
        /// UsedOthers
        /// </summary>
        public static PropertyDefinition UsedOthers = new PropertyDefinition(nameof(UsedOthers), typeof(bool));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerDeviceUsageDistributionUserCountsObjectSchema
    /// </summary>
    public class YammerDeviceUsageDistributionUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(int));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(int));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(int));


        /// <summary>
        /// IPhone
        /// </summary>
        public static PropertyDefinition IPhone = new PropertyDefinition(nameof(IPhone), typeof(int));


        /// <summary>
        /// IPad
        /// </summary>
        public static PropertyDefinition IPad = new PropertyDefinition(nameof(IPad), typeof(int));


        /// <summary>
        /// Other
        /// </summary>
        public static PropertyDefinition Other = new PropertyDefinition(nameof(Other), typeof(int));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerDeviceUsageUserCountsObjectSchema
    /// </summary>
    public class YammerDeviceUsageUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(int));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(int));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(int));


        /// <summary>
        /// IPhone
        /// </summary>
        public static PropertyDefinition IPhone = new PropertyDefinition(nameof(IPhone), typeof(int));


        /// <summary>
        /// IPad
        /// </summary>
        public static PropertyDefinition IPad = new PropertyDefinition(nameof(IPad), typeof(int));


        /// <summary>
        /// Other
        /// </summary>
        public static PropertyDefinition Other = new PropertyDefinition(nameof(Other), typeof(int));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerGroupsActivityDetailObjectSchema
    /// </summary>
    public class YammerGroupsActivityDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// GroupDisplayName
        /// </summary>
        public static PropertyDefinition GroupDisplayName = new PropertyDefinition(nameof(GroupDisplayName), typeof(string));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// OwnerPrincipalName
        /// </summary>
        public static PropertyDefinition OwnerPrincipalName = new PropertyDefinition(nameof(OwnerPrincipalName), typeof(string));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// GroupType
        /// </summary>
        public static PropertyDefinition GroupType = new PropertyDefinition(nameof(GroupType), typeof(string));


        /// <summary>
        /// Office365Connected
        /// </summary>
        public static PropertyDefinition Office365Connected = new PropertyDefinition(nameof(Office365Connected), typeof(bool));


        /// <summary>
        /// MemberCount
        /// </summary>
        public static PropertyDefinition MemberCount = new PropertyDefinition(nameof(MemberCount), typeof(Int64));


        /// <summary>
        /// PostedCount
        /// </summary>
        public static PropertyDefinition PostedCount = new PropertyDefinition(nameof(PostedCount), typeof(Int64));


        /// <summary>
        /// ReadCount
        /// </summary>
        public static PropertyDefinition ReadCount = new PropertyDefinition(nameof(ReadCount), typeof(Int64));


        /// <summary>
        /// LikedCount
        /// </summary>
        public static PropertyDefinition LikedCount = new PropertyDefinition(nameof(LikedCount), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerGroupsActivityGroupCountsObjectSchema
    /// </summary>
    public class YammerGroupsActivityGroupCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Total
        /// </summary>
        public static PropertyDefinition Total = new PropertyDefinition(nameof(Total), typeof(Int64));


        /// <summary>
        /// Active
        /// </summary>
        public static PropertyDefinition Active = new PropertyDefinition(nameof(Active), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// YammerGroupsActivityCountsObjectSchema
    /// </summary>
    public class YammerGroupsActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Liked
        /// </summary>
        public static PropertyDefinition Liked = new PropertyDefinition(nameof(Liked), typeof(Int64));


        /// <summary>
        /// Posted
        /// </summary>
        public static PropertyDefinition Posted = new PropertyDefinition(nameof(Posted), typeof(Int64));


        /// <summary>
        /// Read
        /// </summary>
        public static PropertyDefinition Read = new PropertyDefinition(nameof(Read), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsUserActivityUserDetailObjectSchema
    /// </summary>
    public class TeamsUserActivityUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// AssignedProducts
        /// </summary>
        public static PropertyDefinition AssignedProducts = new PropertyDefinition(nameof(AssignedProducts), typeof(IList<String>));


        /// <summary>
        /// TeamChatMessageCount
        /// </summary>
        public static PropertyDefinition TeamChatMessageCount = new PropertyDefinition(nameof(TeamChatMessageCount), typeof(Int64));


        /// <summary>
        /// PrivateChatMessageCount
        /// </summary>
        public static PropertyDefinition PrivateChatMessageCount = new PropertyDefinition(nameof(PrivateChatMessageCount), typeof(Int64));


        /// <summary>
        /// CallCount
        /// </summary>
        public static PropertyDefinition CallCount = new PropertyDefinition(nameof(CallCount), typeof(Int64));


        /// <summary>
        /// MeetingCount
        /// </summary>
        public static PropertyDefinition MeetingCount = new PropertyDefinition(nameof(MeetingCount), typeof(Int64));


        /// <summary>
        /// HasOtherAction
        /// </summary>
        public static PropertyDefinition HasOtherAction = new PropertyDefinition(nameof(HasOtherAction), typeof(bool));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsUserActivityCountsObjectSchema
    /// </summary>
    public class TeamsUserActivityCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// TeamChatMessages
        /// </summary>
        public static PropertyDefinition TeamChatMessages = new PropertyDefinition(nameof(TeamChatMessages), typeof(Int64));


        /// <summary>
        /// PrivateChatMessages
        /// </summary>
        public static PropertyDefinition PrivateChatMessages = new PropertyDefinition(nameof(PrivateChatMessages), typeof(Int64));


        /// <summary>
        /// Calls
        /// </summary>
        public static PropertyDefinition Calls = new PropertyDefinition(nameof(Calls), typeof(Int64));


        /// <summary>
        /// Meetings
        /// </summary>
        public static PropertyDefinition Meetings = new PropertyDefinition(nameof(Meetings), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsUserActivityUserCountsObjectSchema
    /// </summary>
    public class TeamsUserActivityUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// TeamChatMessages
        /// </summary>
        public static PropertyDefinition TeamChatMessages = new PropertyDefinition(nameof(TeamChatMessages), typeof(Int64));


        /// <summary>
        /// PrivateChatMessages
        /// </summary>
        public static PropertyDefinition PrivateChatMessages = new PropertyDefinition(nameof(PrivateChatMessages), typeof(Int64));


        /// <summary>
        /// Calls
        /// </summary>
        public static PropertyDefinition Calls = new PropertyDefinition(nameof(Calls), typeof(Int64));


        /// <summary>
        /// Meetings
        /// </summary>
        public static PropertyDefinition Meetings = new PropertyDefinition(nameof(Meetings), typeof(Int64));


        /// <summary>
        /// OtherActions
        /// </summary>
        public static PropertyDefinition OtherActions = new PropertyDefinition(nameof(OtherActions), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsDeviceUsageUserDetailObjectSchema
    /// </summary>
    public class TeamsDeviceUsageUserDetailObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// LastActivityDate
        /// </summary>
        public static PropertyDefinition LastActivityDate = new PropertyDefinition(nameof(LastActivityDate), typeof(DateTime));


        /// <summary>
        /// IsDeleted
        /// </summary>
        public static PropertyDefinition IsDeleted = new PropertyDefinition(nameof(IsDeleted), typeof(bool));


        /// <summary>
        /// DeletedDate
        /// </summary>
        public static PropertyDefinition DeletedDate = new PropertyDefinition(nameof(DeletedDate), typeof(DateTime));


        /// <summary>
        /// UsedWeb
        /// </summary>
        public static PropertyDefinition UsedWeb = new PropertyDefinition(nameof(UsedWeb), typeof(bool));


        /// <summary>
        /// UsedWindowsPhone
        /// </summary>
        public static PropertyDefinition UsedWindowsPhone = new PropertyDefinition(nameof(UsedWindowsPhone), typeof(bool));


        /// <summary>
        /// UsediOS
        /// </summary>
        public static PropertyDefinition UsediOS = new PropertyDefinition(nameof(UsediOS), typeof(bool));


        /// <summary>
        /// UsedMac
        /// </summary>
        public static PropertyDefinition UsedMac = new PropertyDefinition(nameof(UsedMac), typeof(bool));


        /// <summary>
        /// UsedAndroidPhone
        /// </summary>
        public static PropertyDefinition UsedAndroidPhone = new PropertyDefinition(nameof(UsedAndroidPhone), typeof(bool));


        /// <summary>
        /// UsedWindows
        /// </summary>
        public static PropertyDefinition UsedWindows = new PropertyDefinition(nameof(UsedWindows), typeof(bool));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsDeviceUsageUserCountsObjectSchema
    /// </summary>
    public class TeamsDeviceUsageUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(Int64));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(Int64));


        /// <summary>
        /// Ios
        /// </summary>
        public static PropertyDefinition Ios = new PropertyDefinition(nameof(Ios), typeof(Int64));


        /// <summary>
        /// Mac
        /// </summary>
        public static PropertyDefinition Mac = new PropertyDefinition(nameof(Mac), typeof(Int64));


        /// <summary>
        /// Windows
        /// </summary>
        public static PropertyDefinition Windows = new PropertyDefinition(nameof(Windows), typeof(Int64));


        /// <summary>
        /// ReportDate
        /// </summary>
        public static PropertyDefinition ReportDate = new PropertyDefinition(nameof(ReportDate), typeof(DateTime));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// TeamsDeviceUsageDistributionUserCountsObjectSchema
    /// </summary>
    public class TeamsDeviceUsageDistributionUserCountsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReportRefreshDate
        /// </summary>
        public static PropertyDefinition ReportRefreshDate = new PropertyDefinition(nameof(ReportRefreshDate), typeof(DateTime));


        /// <summary>
        /// Web
        /// </summary>
        public static PropertyDefinition Web = new PropertyDefinition(nameof(Web), typeof(Int64));


        /// <summary>
        /// WindowsPhone
        /// </summary>
        public static PropertyDefinition WindowsPhone = new PropertyDefinition(nameof(WindowsPhone), typeof(Int64));


        /// <summary>
        /// AndroidPhone
        /// </summary>
        public static PropertyDefinition AndroidPhone = new PropertyDefinition(nameof(AndroidPhone), typeof(Int64));


        /// <summary>
        /// Ios
        /// </summary>
        public static PropertyDefinition Ios = new PropertyDefinition(nameof(Ios), typeof(Int64));


        /// <summary>
        /// Mac
        /// </summary>
        public static PropertyDefinition Mac = new PropertyDefinition(nameof(Mac), typeof(Int64));


        /// <summary>
        /// Windows
        /// </summary>
        public static PropertyDefinition Windows = new PropertyDefinition(nameof(Windows), typeof(Int64));


        /// <summary>
        /// ReportPeriod
        /// </summary>
        public static PropertyDefinition ReportPeriod = new PropertyDefinition(nameof(ReportPeriod), typeof(string));

    }


    /// <summary>
    /// PayloadResponseObjectSchema
    /// </summary>
    public class PayloadResponseObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// AppCatalogsObjectSchema
    /// </summary>
    public class AppCatalogsObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TeamsApps
        /// </summary>
        public static PropertyDefinition TeamsApps = new PropertyDefinition(nameof(TeamsApps), typeof(IList<TeamsApp>));

    }


    /// <summary>
    /// TeamsAppObjectSchema
    /// </summary>
    public class TeamsAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// DistributionMethod
        /// </summary>
        public static PropertyDefinition DistributionMethod = new PropertyDefinition(nameof(DistributionMethod), typeof(TeamsAppDistributionMethod));


        /// <summary>
        /// AppDefinitions
        /// </summary>
        public static PropertyDefinition AppDefinitions = new PropertyDefinition(nameof(AppDefinitions), typeof(IList<TeamsAppDefinition>));

    }


    /// <summary>
    /// TeamsTemplateObjectSchema
    /// </summary>
    public class TeamsTemplateObjectSchema : EntityObjectSchema
    {
    }


    /// <summary>
    /// TeamsCatalogAppObjectSchema
    /// </summary>
    public class TeamsCatalogAppObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));


        /// <summary>
        /// DistributionMethod
        /// </summary>
        public static PropertyDefinition DistributionMethod = new PropertyDefinition(nameof(DistributionMethod), typeof(TeamsAppDistributionMethod));

    }


    /// <summary>
    /// TeamsAppInstallationObjectSchema
    /// </summary>
    public class TeamsAppInstallationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TeamsApp
        /// </summary>
        public static PropertyDefinition TeamsApp = new PropertyDefinition(nameof(TeamsApp), typeof(TeamsApp));


        /// <summary>
        /// TeamsAppDefinition
        /// </summary>
        public static PropertyDefinition TeamsAppDefinition = new PropertyDefinition(nameof(TeamsAppDefinition), typeof(TeamsAppDefinition));

    }


    /// <summary>
    /// TeamsAsyncOperationObjectSchema
    /// </summary>
    public class TeamsAsyncOperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// OperationType
        /// </summary>
        public static PropertyDefinition OperationType = new PropertyDefinition(nameof(OperationType), typeof(TeamsAsyncOperationType));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(TeamsAsyncOperationStatus));


        /// <summary>
        /// LastActionDateTime
        /// </summary>
        public static PropertyDefinition LastActionDateTime = new PropertyDefinition(nameof(LastActionDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AttemptsCount
        /// </summary>
        public static PropertyDefinition AttemptsCount = new PropertyDefinition(nameof(AttemptsCount), typeof(int));


        /// <summary>
        /// TargetResourceId
        /// </summary>
        public static PropertyDefinition TargetResourceId = new PropertyDefinition(nameof(TargetResourceId), typeof(string));


        /// <summary>
        /// TargetResourceLocation
        /// </summary>
        public static PropertyDefinition TargetResourceLocation = new PropertyDefinition(nameof(TargetResourceLocation), typeof(string));


        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(OperationError));

    }


    /// <summary>
    /// TeamsAppDefinitionObjectSchema
    /// </summary>
    public class TeamsAppDefinitionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TeamsAppId
        /// </summary>
        public static PropertyDefinition TeamsAppId = new PropertyDefinition(nameof(TeamsAppId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// ChatMessageObjectSchema
    /// </summary>
    public class ChatMessageObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ReplyToId
        /// </summary>
        public static PropertyDefinition ReplyToId = new PropertyDefinition(nameof(ReplyToId), typeof(string));


        /// <summary>
        /// From
        /// </summary>
        public static PropertyDefinition From = new PropertyDefinition(nameof(From), typeof(IdentitySet));


        /// <summary>
        /// Etag
        /// </summary>
        public static PropertyDefinition Etag = new PropertyDefinition(nameof(Etag), typeof(string));


        /// <summary>
        /// MessageType
        /// </summary>
        public static PropertyDefinition MessageType = new PropertyDefinition(nameof(MessageType), typeof(ChatMessageType));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Deleted
        /// </summary>
        public static PropertyDefinition Deleted = new PropertyDefinition(nameof(Deleted), typeof(bool));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(string));


        /// <summary>
        /// Body
        /// </summary>
        public static PropertyDefinition Body = new PropertyDefinition(nameof(Body), typeof(ItemBody));


        /// <summary>
        /// Summary
        /// </summary>
        public static PropertyDefinition Summary = new PropertyDefinition(nameof(Summary), typeof(string));


        /// <summary>
        /// Attachments
        /// </summary>
        public static PropertyDefinition Attachments = new PropertyDefinition(nameof(Attachments), typeof(IList<ChatMessageAttachment>));


        /// <summary>
        /// Mentions
        /// </summary>
        public static PropertyDefinition Mentions = new PropertyDefinition(nameof(Mentions), typeof(IList<ChatMessageMention>));


        /// <summary>
        /// Importance
        /// </summary>
        public static PropertyDefinition Importance = new PropertyDefinition(nameof(Importance), typeof(ChatMessageImportance));


        /// <summary>
        /// PolicyViolation
        /// </summary>
        public static PropertyDefinition PolicyViolation = new PropertyDefinition(nameof(PolicyViolation), typeof(ChatMessagePolicyViolation));


        /// <summary>
        /// Reactions
        /// </summary>
        public static PropertyDefinition Reactions = new PropertyDefinition(nameof(Reactions), typeof(IList<ChatMessageReaction>));


        /// <summary>
        /// Locale
        /// </summary>
        public static PropertyDefinition Locale = new PropertyDefinition(nameof(Locale), typeof(string));


        /// <summary>
        /// Replies
        /// </summary>
        public static PropertyDefinition Replies = new PropertyDefinition(nameof(Replies), typeof(IList<ChatMessage>));

    }


    /// <summary>
    /// ChatThreadObjectSchema
    /// </summary>
    public class ChatThreadObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// RootMessage
        /// </summary>
        public static PropertyDefinition RootMessage = new PropertyDefinition(nameof(RootMessage), typeof(ChatMessage));

    }


    /// <summary>
    /// TeamsTabObjectSchema
    /// </summary>
    public class TeamsTabObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// TeamsAppId
        /// </summary>
        public static PropertyDefinition TeamsAppId = new PropertyDefinition(nameof(TeamsAppId), typeof(string));


        /// <summary>
        /// SortOrderIndex
        /// </summary>
        public static PropertyDefinition SortOrderIndex = new PropertyDefinition(nameof(SortOrderIndex), typeof(string));


        /// <summary>
        /// MessageId
        /// </summary>
        public static PropertyDefinition MessageId = new PropertyDefinition(nameof(MessageId), typeof(string));


        /// <summary>
        /// WebUrl
        /// </summary>
        public static PropertyDefinition WebUrl = new PropertyDefinition(nameof(WebUrl), typeof(string));


        /// <summary>
        /// Configuration
        /// </summary>
        public static PropertyDefinition Configuration = new PropertyDefinition(nameof(Configuration), typeof(TeamsTabConfiguration));


        /// <summary>
        /// TeamsApp
        /// </summary>
        public static PropertyDefinition TeamsApp = new PropertyDefinition(nameof(TeamsApp), typeof(TeamsApp));

    }


    /// <summary>
    /// IdentityProviderObjectSchema
    /// </summary>
    public class IdentityProviderObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// ClientId
        /// </summary>
        public static PropertyDefinition ClientId = new PropertyDefinition(nameof(ClientId), typeof(string));


        /// <summary>
        /// ClientSecret
        /// </summary>
        public static PropertyDefinition ClientSecret = new PropertyDefinition(nameof(ClientSecret), typeof(string));

    }


    /// <summary>
    /// SynchronizationJobObjectSchema
    /// </summary>
    public class SynchronizationJobObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TemplateId
        /// </summary>
        public static PropertyDefinition TemplateId = new PropertyDefinition(nameof(TemplateId), typeof(string));


        /// <summary>
        /// Schedule
        /// </summary>
        public static PropertyDefinition Schedule = new PropertyDefinition(nameof(Schedule), typeof(SynchronizationSchedule));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(SynchronizationStatus));


        /// <summary>
        /// Schema
        /// </summary>
        public static PropertyDefinition Schema = new PropertyDefinition(nameof(Schema), typeof(SynchronizationSchema));

    }


    /// <summary>
    /// SynchronizationTemplateObjectSchema
    /// </summary>
    public class SynchronizationTemplateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ApplicationId
        /// </summary>
        public static PropertyDefinition ApplicationId = new PropertyDefinition(nameof(ApplicationId), typeof(Guid));


        /// <summary>
        /// Default
        /// </summary>
        public static PropertyDefinition Default = new PropertyDefinition(nameof(Default), typeof(bool));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Discoverable
        /// </summary>
        public static PropertyDefinition Discoverable = new PropertyDefinition(nameof(Discoverable), typeof(bool));


        /// <summary>
        /// FactoryTag
        /// </summary>
        public static PropertyDefinition FactoryTag = new PropertyDefinition(nameof(FactoryTag), typeof(string));


        /// <summary>
        /// Metadata
        /// </summary>
        public static PropertyDefinition Metadata = new PropertyDefinition(nameof(Metadata), typeof(IList<MetadataEntry>));


        /// <summary>
        /// Schema
        /// </summary>
        public static PropertyDefinition Schema = new PropertyDefinition(nameof(Schema), typeof(SynchronizationSchema));

    }


    /// <summary>
    /// SynchronizationSchemaObjectSchema
    /// </summary>
    public class SynchronizationSchemaObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Directories
        /// </summary>
        public static PropertyDefinition Directories = new PropertyDefinition(nameof(Directories), typeof(IList<DirectoryDefinition>));


        /// <summary>
        /// SynchronizationRules
        /// </summary>
        public static PropertyDefinition SynchronizationRules = new PropertyDefinition(nameof(SynchronizationRules), typeof(IList<SynchronizationRule>));


        /// <summary>
        /// Version
        /// </summary>
        public static PropertyDefinition Version = new PropertyDefinition(nameof(Version), typeof(string));

    }


    /// <summary>
    /// AttributeMappingFunctionSchemaObjectSchema
    /// </summary>
    public class AttributeMappingFunctionSchemaObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Parameters
        /// </summary>
        public static PropertyDefinition Parameters = new PropertyDefinition(nameof(Parameters), typeof(IList<AttributeMappingParameterSchema>));

    }


    /// <summary>
    /// FilterOperatorSchemaObjectSchema
    /// </summary>
    public class FilterOperatorSchemaObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Arity
        /// </summary>
        public static PropertyDefinition Arity = new PropertyDefinition(nameof(Arity), typeof(ScopeOperatorType));


        /// <summary>
        /// MultivaluedComparisonType
        /// </summary>
        public static PropertyDefinition MultivaluedComparisonType = new PropertyDefinition(nameof(MultivaluedComparisonType), typeof(ScopeOperatorMultiValuedComparisonType));


        /// <summary>
        /// SupportedAttributeTypes
        /// </summary>
        public static PropertyDefinition SupportedAttributeTypes = new PropertyDefinition(nameof(SupportedAttributeTypes), typeof(IList<AttributeType>));

    }


    /// <summary>
    /// EducationRootObjectSchema
    /// </summary>
    public class EducationRootObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SynchronizationProfiles
        /// </summary>
        public static PropertyDefinition SynchronizationProfiles = new PropertyDefinition(nameof(SynchronizationProfiles), typeof(IList<EducationSynchronizationProfile>));


        /// <summary>
        /// Classes
        /// </summary>
        public static PropertyDefinition Classes = new PropertyDefinition(nameof(Classes), typeof(IList<EducationClass>));


        /// <summary>
        /// Schools
        /// </summary>
        public static PropertyDefinition Schools = new PropertyDefinition(nameof(Schools), typeof(IList<EducationSchool>));


        /// <summary>
        /// Users
        /// </summary>
        public static PropertyDefinition Users = new PropertyDefinition(nameof(Users), typeof(IList<EducationUser>));


        /// <summary>
        /// Me
        /// </summary>
        public static PropertyDefinition Me = new PropertyDefinition(nameof(Me), typeof(EducationUser));

    }


    /// <summary>
    /// EducationSynchronizationProfileObjectSchema
    /// </summary>
    public class EducationSynchronizationProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// DataProvider
        /// </summary>
        public static PropertyDefinition DataProvider = new PropertyDefinition(nameof(DataProvider), typeof(EducationSynchronizationDataProvider));


        /// <summary>
        /// IdentitySynchronizationConfiguration
        /// </summary>
        public static PropertyDefinition IdentitySynchronizationConfiguration = new PropertyDefinition(nameof(IdentitySynchronizationConfiguration), typeof(EducationIdentitySynchronizationConfiguration));


        /// <summary>
        /// LicensesToAssign
        /// </summary>
        public static PropertyDefinition LicensesToAssign = new PropertyDefinition(nameof(LicensesToAssign), typeof(IList<EducationSynchronizationLicenseAssignment>));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(EducationSynchronizationProfileState));


        /// <summary>
        /// HandleSpecialCharacterConstraint
        /// </summary>
        public static PropertyDefinition HandleSpecialCharacterConstraint = new PropertyDefinition(nameof(HandleSpecialCharacterConstraint), typeof(bool));


        /// <summary>
        /// TermStartDate
        /// </summary>
        public static PropertyDefinition TermStartDate = new PropertyDefinition(nameof(TermStartDate), typeof(string));


        /// <summary>
        /// TermEndDate
        /// </summary>
        public static PropertyDefinition TermEndDate = new PropertyDefinition(nameof(TermEndDate), typeof(string));


        /// <summary>
        /// DateFormat
        /// </summary>
        public static PropertyDefinition DateFormat = new PropertyDefinition(nameof(DateFormat), typeof(string));


        /// <summary>
        /// Errors
        /// </summary>
        public static PropertyDefinition Errors = new PropertyDefinition(nameof(Errors), typeof(IList<EducationSynchronizationError>));


        /// <summary>
        /// ProfileStatus
        /// </summary>
        public static PropertyDefinition ProfileStatus = new PropertyDefinition(nameof(ProfileStatus), typeof(EducationSynchronizationProfileStatus));

    }


    /// <summary>
    /// EducationClassObjectSchema
    /// </summary>
    public class EducationClassObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// MailNickname
        /// </summary>
        public static PropertyDefinition MailNickname = new PropertyDefinition(nameof(MailNickname), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// ClassCode
        /// </summary>
        public static PropertyDefinition ClassCode = new PropertyDefinition(nameof(ClassCode), typeof(string));


        /// <summary>
        /// ExternalName
        /// </summary>
        public static PropertyDefinition ExternalName = new PropertyDefinition(nameof(ExternalName), typeof(string));


        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// ExternalSource
        /// </summary>
        public static PropertyDefinition ExternalSource = new PropertyDefinition(nameof(ExternalSource), typeof(EducationExternalSource));


        /// <summary>
        /// Term
        /// </summary>
        public static PropertyDefinition Term = new PropertyDefinition(nameof(Term), typeof(EducationTerm));


        /// <summary>
        /// Schools
        /// </summary>
        public static PropertyDefinition Schools = new PropertyDefinition(nameof(Schools), typeof(IList<EducationSchool>));


        /// <summary>
        /// Members
        /// </summary>
        public static PropertyDefinition Members = new PropertyDefinition(nameof(Members), typeof(IList<EducationUser>));


        /// <summary>
        /// Teachers
        /// </summary>
        public static PropertyDefinition Teachers = new PropertyDefinition(nameof(Teachers), typeof(IList<EducationUser>));


        /// <summary>
        /// Group
        /// </summary>
        public static PropertyDefinition Group = new PropertyDefinition(nameof(Group), typeof(Group));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<EducationAssignment>));

    }


    /// <summary>
    /// EducationOrganizationObjectSchema
    /// </summary>
    public class EducationOrganizationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// ExternalSource
        /// </summary>
        public static PropertyDefinition ExternalSource = new PropertyDefinition(nameof(ExternalSource), typeof(EducationExternalSource));

    }


    /// <summary>
    /// EducationSchoolObjectSchema
    /// </summary>
    public class EducationSchoolObjectSchema : EducationOrganizationObjectSchema
    {

        /// <summary>
        /// PrincipalEmail
        /// </summary>
        public static PropertyDefinition PrincipalEmail = new PropertyDefinition(nameof(PrincipalEmail), typeof(string));


        /// <summary>
        /// PrincipalName
        /// </summary>
        public static PropertyDefinition PrincipalName = new PropertyDefinition(nameof(PrincipalName), typeof(string));


        /// <summary>
        /// ExternalPrincipalId
        /// </summary>
        public static PropertyDefinition ExternalPrincipalId = new PropertyDefinition(nameof(ExternalPrincipalId), typeof(string));


        /// <summary>
        /// LowestGrade
        /// </summary>
        public static PropertyDefinition LowestGrade = new PropertyDefinition(nameof(LowestGrade), typeof(string));


        /// <summary>
        /// HighestGrade
        /// </summary>
        public static PropertyDefinition HighestGrade = new PropertyDefinition(nameof(HighestGrade), typeof(string));


        /// <summary>
        /// SchoolNumber
        /// </summary>
        public static PropertyDefinition SchoolNumber = new PropertyDefinition(nameof(SchoolNumber), typeof(string));


        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// Phone
        /// </summary>
        public static PropertyDefinition Phone = new PropertyDefinition(nameof(Phone), typeof(string));


        /// <summary>
        /// Fax
        /// </summary>
        public static PropertyDefinition Fax = new PropertyDefinition(nameof(Fax), typeof(string));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// Address
        /// </summary>
        public static PropertyDefinition Address = new PropertyDefinition(nameof(Address), typeof(PhysicalAddress));


        /// <summary>
        /// Classes
        /// </summary>
        public static PropertyDefinition Classes = new PropertyDefinition(nameof(Classes), typeof(IList<EducationClass>));


        /// <summary>
        /// Users
        /// </summary>
        public static PropertyDefinition Users = new PropertyDefinition(nameof(Users), typeof(IList<EducationUser>));


        /// <summary>
        /// AdministrativeUnit
        /// </summary>
        public static PropertyDefinition AdministrativeUnit = new PropertyDefinition(nameof(AdministrativeUnit), typeof(AdministrativeUnit));

    }


    /// <summary>
    /// EducationUserObjectSchema
    /// </summary>
    public class EducationUserObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// PrimaryRole
        /// </summary>
        public static PropertyDefinition PrimaryRole = new PropertyDefinition(nameof(PrimaryRole), typeof(EducationUserRole));


        /// <summary>
        /// MiddleName
        /// </summary>
        public static PropertyDefinition MiddleName = new PropertyDefinition(nameof(MiddleName), typeof(string));


        /// <summary>
        /// ExternalSource
        /// </summary>
        public static PropertyDefinition ExternalSource = new PropertyDefinition(nameof(ExternalSource), typeof(EducationExternalSource));


        /// <summary>
        /// ResidenceAddress
        /// </summary>
        public static PropertyDefinition ResidenceAddress = new PropertyDefinition(nameof(ResidenceAddress), typeof(PhysicalAddress));


        /// <summary>
        /// MailingAddress
        /// </summary>
        public static PropertyDefinition MailingAddress = new PropertyDefinition(nameof(MailingAddress), typeof(PhysicalAddress));


        /// <summary>
        /// Student
        /// </summary>
        public static PropertyDefinition Student = new PropertyDefinition(nameof(Student), typeof(EducationStudent));


        /// <summary>
        /// Teacher
        /// </summary>
        public static PropertyDefinition Teacher = new PropertyDefinition(nameof(Teacher), typeof(EducationTeacher));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// AccountEnabled
        /// </summary>
        public static PropertyDefinition AccountEnabled = new PropertyDefinition(nameof(AccountEnabled), typeof(bool));


        /// <summary>
        /// AssignedLicenses
        /// </summary>
        public static PropertyDefinition AssignedLicenses = new PropertyDefinition(nameof(AssignedLicenses), typeof(IList<AssignedLicense>));


        /// <summary>
        /// AssignedPlans
        /// </summary>
        public static PropertyDefinition AssignedPlans = new PropertyDefinition(nameof(AssignedPlans), typeof(IList<AssignedPlan>));


        /// <summary>
        /// BusinessPhones
        /// </summary>
        public static PropertyDefinition BusinessPhones = new PropertyDefinition(nameof(BusinessPhones), typeof(IList<String>));


        /// <summary>
        /// Department
        /// </summary>
        public static PropertyDefinition Department = new PropertyDefinition(nameof(Department), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// GivenName
        /// </summary>
        public static PropertyDefinition GivenName = new PropertyDefinition(nameof(GivenName), typeof(string));


        /// <summary>
        /// Mail
        /// </summary>
        public static PropertyDefinition Mail = new PropertyDefinition(nameof(Mail), typeof(string));


        /// <summary>
        /// MailNickname
        /// </summary>
        public static PropertyDefinition MailNickname = new PropertyDefinition(nameof(MailNickname), typeof(string));


        /// <summary>
        /// MobilePhone
        /// </summary>
        public static PropertyDefinition MobilePhone = new PropertyDefinition(nameof(MobilePhone), typeof(string));


        /// <summary>
        /// PasswordPolicies
        /// </summary>
        public static PropertyDefinition PasswordPolicies = new PropertyDefinition(nameof(PasswordPolicies), typeof(string));


        /// <summary>
        /// PasswordProfile
        /// </summary>
        public static PropertyDefinition PasswordProfile = new PropertyDefinition(nameof(PasswordProfile), typeof(PasswordProfile));


        /// <summary>
        /// OfficeLocation
        /// </summary>
        public static PropertyDefinition OfficeLocation = new PropertyDefinition(nameof(OfficeLocation), typeof(string));


        /// <summary>
        /// PreferredLanguage
        /// </summary>
        public static PropertyDefinition PreferredLanguage = new PropertyDefinition(nameof(PreferredLanguage), typeof(string));


        /// <summary>
        /// ProvisionedPlans
        /// </summary>
        public static PropertyDefinition ProvisionedPlans = new PropertyDefinition(nameof(ProvisionedPlans), typeof(IList<ProvisionedPlan>));


        /// <summary>
        /// RefreshTokensValidFromDateTime
        /// </summary>
        public static PropertyDefinition RefreshTokensValidFromDateTime = new PropertyDefinition(nameof(RefreshTokensValidFromDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ShowInAddressList
        /// </summary>
        public static PropertyDefinition ShowInAddressList = new PropertyDefinition(nameof(ShowInAddressList), typeof(bool));


        /// <summary>
        /// Surname
        /// </summary>
        public static PropertyDefinition Surname = new PropertyDefinition(nameof(Surname), typeof(string));


        /// <summary>
        /// UsageLocation
        /// </summary>
        public static PropertyDefinition UsageLocation = new PropertyDefinition(nameof(UsageLocation), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// UserType
        /// </summary>
        public static PropertyDefinition UserType = new PropertyDefinition(nameof(UserType), typeof(string));


        /// <summary>
        /// Schools
        /// </summary>
        public static PropertyDefinition Schools = new PropertyDefinition(nameof(Schools), typeof(IList<EducationSchool>));


        /// <summary>
        /// Classes
        /// </summary>
        public static PropertyDefinition Classes = new PropertyDefinition(nameof(Classes), typeof(IList<EducationClass>));


        /// <summary>
        /// User
        /// </summary>
        public static PropertyDefinition User = new PropertyDefinition(nameof(User), typeof(User));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<EducationAssignment>));

    }


    /// <summary>
    /// EducationSynchronizationErrorObjectSchema
    /// </summary>
    public class EducationSynchronizationErrorObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// EntryType
        /// </summary>
        public static PropertyDefinition EntryType = new PropertyDefinition(nameof(EntryType), typeof(string));


        /// <summary>
        /// ErrorCode
        /// </summary>
        public static PropertyDefinition ErrorCode = new PropertyDefinition(nameof(ErrorCode), typeof(string));


        /// <summary>
        /// ErrorMessage
        /// </summary>
        public static PropertyDefinition ErrorMessage = new PropertyDefinition(nameof(ErrorMessage), typeof(string));


        /// <summary>
        /// JoiningValue
        /// </summary>
        public static PropertyDefinition JoiningValue = new PropertyDefinition(nameof(JoiningValue), typeof(string));


        /// <summary>
        /// RecordedDateTime
        /// </summary>
        public static PropertyDefinition RecordedDateTime = new PropertyDefinition(nameof(RecordedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ReportableIdentifier
        /// </summary>
        public static PropertyDefinition ReportableIdentifier = new PropertyDefinition(nameof(ReportableIdentifier), typeof(string));

    }


    /// <summary>
    /// EducationSynchronizationProfileStatusObjectSchema
    /// </summary>
    public class EducationSynchronizationProfileStatusObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(EducationSynchronizationStatus));


        /// <summary>
        /// LastSynchronizationDateTime
        /// </summary>
        public static PropertyDefinition LastSynchronizationDateTime = new PropertyDefinition(nameof(LastSynchronizationDateTime), typeof(DateTimeOffset));

    }


    /// <summary>
    /// EducationAssignmentObjectSchema
    /// </summary>
    public class EducationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ClassId
        /// </summary>
        public static PropertyDefinition ClassId = new PropertyDefinition(nameof(ClassId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Instructions
        /// </summary>
        public static PropertyDefinition Instructions = new PropertyDefinition(nameof(Instructions), typeof(EducationItemBody));


        /// <summary>
        /// DueDateTime
        /// </summary>
        public static PropertyDefinition DueDateTime = new PropertyDefinition(nameof(DueDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AssignDateTime
        /// </summary>
        public static PropertyDefinition AssignDateTime = new PropertyDefinition(nameof(AssignDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// AssignedDateTime
        /// </summary>
        public static PropertyDefinition AssignedDateTime = new PropertyDefinition(nameof(AssignedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Grading
        /// </summary>
        public static PropertyDefinition Grading = new PropertyDefinition(nameof(Grading), typeof(EducationAssignmentGradeType));


        /// <summary>
        /// AssignTo
        /// </summary>
        public static PropertyDefinition AssignTo = new PropertyDefinition(nameof(AssignTo), typeof(EducationAssignmentRecipient));


        /// <summary>
        /// AllowLateSubmissions
        /// </summary>
        public static PropertyDefinition AllowLateSubmissions = new PropertyDefinition(nameof(AllowLateSubmissions), typeof(bool));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(IdentitySet));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastModifiedBy
        /// </summary>
        public static PropertyDefinition LastModifiedBy = new PropertyDefinition(nameof(LastModifiedBy), typeof(IdentitySet));


        /// <summary>
        /// AllowStudentsToAddResourcesToSubmission
        /// </summary>
        public static PropertyDefinition AllowStudentsToAddResourcesToSubmission = new PropertyDefinition(nameof(AllowStudentsToAddResourcesToSubmission), typeof(bool));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(EducationAssignmentStatus));


        /// <summary>
        /// Resources
        /// </summary>
        public static PropertyDefinition Resources = new PropertyDefinition(nameof(Resources), typeof(IList<EducationAssignmentResource>));


        /// <summary>
        /// Submissions
        /// </summary>
        public static PropertyDefinition Submissions = new PropertyDefinition(nameof(Submissions), typeof(IList<EducationSubmission>));

    }


    /// <summary>
    /// EducationAssignmentResourceObjectSchema
    /// </summary>
    public class EducationAssignmentResourceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DistributeForStudentWork
        /// </summary>
        public static PropertyDefinition DistributeForStudentWork = new PropertyDefinition(nameof(DistributeForStudentWork), typeof(bool));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(EducationResource));

    }


    /// <summary>
    /// EducationSubmissionObjectSchema
    /// </summary>
    public class EducationSubmissionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Recipient
        /// </summary>
        public static PropertyDefinition Recipient = new PropertyDefinition(nameof(Recipient), typeof(EducationSubmissionRecipient));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(EducationSubmissionStatus));


        /// <summary>
        /// SubmittedBy
        /// </summary>
        public static PropertyDefinition SubmittedBy = new PropertyDefinition(nameof(SubmittedBy), typeof(IdentitySet));


        /// <summary>
        /// SubmittedDateTime
        /// </summary>
        public static PropertyDefinition SubmittedDateTime = new PropertyDefinition(nameof(SubmittedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// UnsubmittedBy
        /// </summary>
        public static PropertyDefinition UnsubmittedBy = new PropertyDefinition(nameof(UnsubmittedBy), typeof(IdentitySet));


        /// <summary>
        /// UnsubmittedDateTime
        /// </summary>
        public static PropertyDefinition UnsubmittedDateTime = new PropertyDefinition(nameof(UnsubmittedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ReleasedBy
        /// </summary>
        public static PropertyDefinition ReleasedBy = new PropertyDefinition(nameof(ReleasedBy), typeof(IdentitySet));


        /// <summary>
        /// ReleasedDateTime
        /// </summary>
        public static PropertyDefinition ReleasedDateTime = new PropertyDefinition(nameof(ReleasedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ReturnedBy
        /// </summary>
        public static PropertyDefinition ReturnedBy = new PropertyDefinition(nameof(ReturnedBy), typeof(IdentitySet));


        /// <summary>
        /// ReturnedDateTime
        /// </summary>
        public static PropertyDefinition ReturnedDateTime = new PropertyDefinition(nameof(ReturnedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Grade
        /// </summary>
        public static PropertyDefinition Grade = new PropertyDefinition(nameof(Grade), typeof(EducationAssignmentGrade));


        /// <summary>
        /// Feedback
        /// </summary>
        public static PropertyDefinition Feedback = new PropertyDefinition(nameof(Feedback), typeof(EducationFeedback));


        /// <summary>
        /// ResourcesFolderUrl
        /// </summary>
        public static PropertyDefinition ResourcesFolderUrl = new PropertyDefinition(nameof(ResourcesFolderUrl), typeof(string));


        /// <summary>
        /// Resources
        /// </summary>
        public static PropertyDefinition Resources = new PropertyDefinition(nameof(Resources), typeof(IList<EducationSubmissionResource>));


        /// <summary>
        /// SubmittedResources
        /// </summary>
        public static PropertyDefinition SubmittedResources = new PropertyDefinition(nameof(SubmittedResources), typeof(IList<EducationSubmissionResource>));

    }


    /// <summary>
    /// EducationSubmissionResourceObjectSchema
    /// </summary>
    public class EducationSubmissionResourceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(EducationResource));


        /// <summary>
        /// AssignmentResourceUrl
        /// </summary>
        public static PropertyDefinition AssignmentResourceUrl = new PropertyDefinition(nameof(AssignmentResourceUrl), typeof(string));

    }


    /// <summary>
    /// AppleVppTokenTroubleshootingEventObjectSchema
    /// </summary>
    public class AppleVppTokenTroubleshootingEventObjectSchema : DeviceManagementTroubleshootingEventObjectSchema
    {

        /// <summary>
        /// TokenId
        /// </summary>
        public static PropertyDefinition TokenId = new PropertyDefinition(nameof(TokenId), typeof(string));

    }


    /// <summary>
    /// EnrollmentTroubleshootingEventObjectSchema
    /// </summary>
    public class EnrollmentTroubleshootingEventObjectSchema : DeviceManagementTroubleshootingEventObjectSchema
    {

        /// <summary>
        /// ManagedDeviceIdentifier
        /// </summary>
        public static PropertyDefinition ManagedDeviceIdentifier = new PropertyDefinition(nameof(ManagedDeviceIdentifier), typeof(string));


        /// <summary>
        /// OperatingSystem
        /// </summary>
        public static PropertyDefinition OperatingSystem = new PropertyDefinition(nameof(OperatingSystem), typeof(string));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// DeviceId
        /// </summary>
        public static PropertyDefinition DeviceId = new PropertyDefinition(nameof(DeviceId), typeof(string));


        /// <summary>
        /// EnrollmentType
        /// </summary>
        public static PropertyDefinition EnrollmentType = new PropertyDefinition(nameof(EnrollmentType), typeof(DeviceEnrollmentType));


        /// <summary>
        /// FailureCategory
        /// </summary>
        public static PropertyDefinition FailureCategory = new PropertyDefinition(nameof(FailureCategory), typeof(DeviceEnrollmentFailureReason));


        /// <summary>
        /// FailureReason
        /// </summary>
        public static PropertyDefinition FailureReason = new PropertyDefinition(nameof(FailureReason), typeof(string));

    }


    /// <summary>
    /// DataClassificationServiceObjectSchema
    /// </summary>
    public class DataClassificationServiceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SensitiveTypes
        /// </summary>
        public static PropertyDefinition SensitiveTypes = new PropertyDefinition(nameof(SensitiveTypes), typeof(IList<SensitiveType>));


        /// <summary>
        /// Jobs
        /// </summary>
        public static PropertyDefinition Jobs = new PropertyDefinition(nameof(Jobs), typeof(IList<JobResponseBase>));


        /// <summary>
        /// ClassifyText
        /// </summary>
        public static PropertyDefinition ClassifyText = new PropertyDefinition(nameof(ClassifyText), typeof(IList<TextClassificationRequest>));


        /// <summary>
        /// ClassifyFile
        /// </summary>
        public static PropertyDefinition ClassifyFile = new PropertyDefinition(nameof(ClassifyFile), typeof(IList<FileClassificationRequest>));

    }


    /// <summary>
    /// SensitiveTypeObjectSchema
    /// </summary>
    public class SensitiveTypeObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// RulePackageId
        /// </summary>
        public static PropertyDefinition RulePackageId = new PropertyDefinition(nameof(RulePackageId), typeof(string));


        /// <summary>
        /// RulePackageType
        /// </summary>
        public static PropertyDefinition RulePackageType = new PropertyDefinition(nameof(RulePackageType), typeof(string));


        /// <summary>
        /// PublisherName
        /// </summary>
        public static PropertyDefinition PublisherName = new PropertyDefinition(nameof(PublisherName), typeof(string));


        /// <summary>
        /// State
        /// </summary>
        public static PropertyDefinition State = new PropertyDefinition(nameof(State), typeof(string));

    }


    /// <summary>
    /// JobResponseBaseObjectSchema
    /// </summary>
    public class JobResponseBaseObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// TenantId
        /// </summary>
        public static PropertyDefinition TenantId = new PropertyDefinition(nameof(TenantId), typeof(string));


        /// <summary>
        /// CreationDateTime
        /// </summary>
        public static PropertyDefinition CreationDateTime = new PropertyDefinition(nameof(CreationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Error
        /// </summary>
        public static PropertyDefinition Error = new PropertyDefinition(nameof(Error), typeof(CaasError));

    }


    /// <summary>
    /// TextClassificationRequestObjectSchema
    /// </summary>
    public class TextClassificationRequestObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Text
        /// </summary>
        public static PropertyDefinition Text = new PropertyDefinition(nameof(Text), typeof(string));


        /// <summary>
        /// SensitiveTypeIds
        /// </summary>
        public static PropertyDefinition SensitiveTypeIds = new PropertyDefinition(nameof(SensitiveTypeIds), typeof(IList<String>));

    }


    /// <summary>
    /// FileClassificationRequestObjectSchema
    /// </summary>
    public class FileClassificationRequestObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// File
        /// </summary>
        public static PropertyDefinition File = new PropertyDefinition(nameof(File), typeof(string));


        /// <summary>
        /// SensitiveTypeIds
        /// </summary>
        public static PropertyDefinition SensitiveTypeIds = new PropertyDefinition(nameof(SensitiveTypeIds), typeof(IList<String>));

    }


    /// <summary>
    /// ClassificationJobResponseObjectSchema
    /// </summary>
    public class ClassificationJobResponseObjectSchema : JobResponseBaseObjectSchema
    {

        /// <summary>
        /// Result
        /// </summary>
        public static PropertyDefinition Result = new PropertyDefinition(nameof(Result), typeof(DetectedSensitiveContentWrapper));

    }


    /// <summary>
    /// DataPolicyOperationObjectSchema
    /// </summary>
    public class DataPolicyOperationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CompletedDateTime
        /// </summary>
        public static PropertyDefinition CompletedDateTime = new PropertyDefinition(nameof(CompletedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(DataPolicyOperationStatus));


        /// <summary>
        /// StorageLocation
        /// </summary>
        public static PropertyDefinition StorageLocation = new PropertyDefinition(nameof(StorageLocation), typeof(string));


        /// <summary>
        /// UserId
        /// </summary>
        public static PropertyDefinition UserId = new PropertyDefinition(nameof(UserId), typeof(string));


        /// <summary>
        /// SubmittedDateTime
        /// </summary>
        public static PropertyDefinition SubmittedDateTime = new PropertyDefinition(nameof(SubmittedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Progress
        /// </summary>
        public static PropertyDefinition Progress = new PropertyDefinition(nameof(Progress), typeof(Double));

    }


    /// <summary>
    /// ChatObjectSchema
    /// </summary>
    public class ChatObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Topic
        /// </summary>
        public static PropertyDefinition Topic = new PropertyDefinition(nameof(Topic), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastUpdatedDateTime
        /// </summary>
        public static PropertyDefinition LastUpdatedDateTime = new PropertyDefinition(nameof(LastUpdatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Messages
        /// </summary>
        public static PropertyDefinition Messages = new PropertyDefinition(nameof(Messages), typeof(IList<ChatMessage>));

    }


    /// <summary>
    /// AgreementObjectSchema
    /// </summary>
    public class AgreementObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// IsViewingBeforeAcceptanceRequired
        /// </summary>
        public static PropertyDefinition IsViewingBeforeAcceptanceRequired = new PropertyDefinition(nameof(IsViewingBeforeAcceptanceRequired), typeof(bool));


        /// <summary>
        /// Files
        /// </summary>
        public static PropertyDefinition Files = new PropertyDefinition(nameof(Files), typeof(IList<AgreementFile>));

    }


    /// <summary>
    /// AgreementFileObjectSchema
    /// </summary>
    public class AgreementFileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Language
        /// </summary>
        public static PropertyDefinition Language = new PropertyDefinition(nameof(Language), typeof(string));


        /// <summary>
        /// FileName
        /// </summary>
        public static PropertyDefinition FileName = new PropertyDefinition(nameof(FileName), typeof(string));


        /// <summary>
        /// FileData
        /// </summary>
        public static PropertyDefinition FileData = new PropertyDefinition(nameof(FileData), typeof(AgreementFileData));


        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));

    }


    /// <summary>
    /// SecurityObjectSchema
    /// </summary>
    public class SecurityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Alerts
        /// </summary>
        public static PropertyDefinition Alerts = new PropertyDefinition(nameof(Alerts), typeof(IList<Alert>));


        /// <summary>
        /// CloudAppSecurityProfiles
        /// </summary>
        public static PropertyDefinition CloudAppSecurityProfiles = new PropertyDefinition(nameof(CloudAppSecurityProfiles), typeof(IList<CloudAppSecurityProfile>));


        /// <summary>
        /// DomainSecurityProfiles
        /// </summary>
        public static PropertyDefinition DomainSecurityProfiles = new PropertyDefinition(nameof(DomainSecurityProfiles), typeof(IList<DomainSecurityProfile>));


        /// <summary>
        /// FileSecurityProfiles
        /// </summary>
        public static PropertyDefinition FileSecurityProfiles = new PropertyDefinition(nameof(FileSecurityProfiles), typeof(IList<FileSecurityProfile>));


        /// <summary>
        /// HostSecurityProfiles
        /// </summary>
        public static PropertyDefinition HostSecurityProfiles = new PropertyDefinition(nameof(HostSecurityProfiles), typeof(IList<HostSecurityProfile>));


        /// <summary>
        /// IpSecurityProfiles
        /// </summary>
        public static PropertyDefinition IpSecurityProfiles = new PropertyDefinition(nameof(IpSecurityProfiles), typeof(IList<IpSecurityProfile>));


        /// <summary>
        /// ProviderTenantSettings
        /// </summary>
        public static PropertyDefinition ProviderTenantSettings = new PropertyDefinition(nameof(ProviderTenantSettings), typeof(IList<ProviderTenantSetting>));


        /// <summary>
        /// SecureScoreControlProfiles
        /// </summary>
        public static PropertyDefinition SecureScoreControlProfiles = new PropertyDefinition(nameof(SecureScoreControlProfiles), typeof(IList<SecureScoreControlProfile>));


        /// <summary>
        /// SecureScores
        /// </summary>
        public static PropertyDefinition SecureScores = new PropertyDefinition(nameof(SecureScores), typeof(IList<SecureScore>));


        /// <summary>
        /// TiIndicators
        /// </summary>
        public static PropertyDefinition TiIndicators = new PropertyDefinition(nameof(TiIndicators), typeof(IList<TiIndicator>));


        /// <summary>
        /// UserSecurityProfiles
        /// </summary>
        public static PropertyDefinition UserSecurityProfiles = new PropertyDefinition(nameof(UserSecurityProfiles), typeof(IList<UserSecurityProfile>));

    }


    /// <summary>
    /// AlertObjectSchema
    /// </summary>
    public class AlertObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActivityGroupName
        /// </summary>
        public static PropertyDefinition ActivityGroupName = new PropertyDefinition(nameof(ActivityGroupName), typeof(string));


        /// <summary>
        /// AssignedTo
        /// </summary>
        public static PropertyDefinition AssignedTo = new PropertyDefinition(nameof(AssignedTo), typeof(string));


        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// Category
        /// </summary>
        public static PropertyDefinition Category = new PropertyDefinition(nameof(Category), typeof(string));


        /// <summary>
        /// ClosedDateTime
        /// </summary>
        public static PropertyDefinition ClosedDateTime = new PropertyDefinition(nameof(ClosedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CloudAppStates
        /// </summary>
        public static PropertyDefinition CloudAppStates = new PropertyDefinition(nameof(CloudAppStates), typeof(IList<CloudAppSecurityState>));


        /// <summary>
        /// Comments
        /// </summary>
        public static PropertyDefinition Comments = new PropertyDefinition(nameof(Comments), typeof(IList<String>));


        /// <summary>
        /// Confidence
        /// </summary>
        public static PropertyDefinition Confidence = new PropertyDefinition(nameof(Confidence), typeof(int));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DetectionIds
        /// </summary>
        public static PropertyDefinition DetectionIds = new PropertyDefinition(nameof(DetectionIds), typeof(IList<String>));


        /// <summary>
        /// EventDateTime
        /// </summary>
        public static PropertyDefinition EventDateTime = new PropertyDefinition(nameof(EventDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Feedback
        /// </summary>
        public static PropertyDefinition Feedback = new PropertyDefinition(nameof(Feedback), typeof(AlertFeedback));


        /// <summary>
        /// FileStates
        /// </summary>
        public static PropertyDefinition FileStates = new PropertyDefinition(nameof(FileStates), typeof(IList<FileSecurityState>));


        /// <summary>
        /// HostStates
        /// </summary>
        public static PropertyDefinition HostStates = new PropertyDefinition(nameof(HostStates), typeof(IList<HostSecurityState>));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MalwareStates
        /// </summary>
        public static PropertyDefinition MalwareStates = new PropertyDefinition(nameof(MalwareStates), typeof(IList<MalwareState>));


        /// <summary>
        /// NetworkConnections
        /// </summary>
        public static PropertyDefinition NetworkConnections = new PropertyDefinition(nameof(NetworkConnections), typeof(IList<NetworkConnection>));


        /// <summary>
        /// Processes
        /// </summary>
        public static PropertyDefinition Processes = new PropertyDefinition(nameof(Processes), typeof(IList<Process>));


        /// <summary>
        /// RecommendedActions
        /// </summary>
        public static PropertyDefinition RecommendedActions = new PropertyDefinition(nameof(RecommendedActions), typeof(IList<String>));


        /// <summary>
        /// RegistryKeyStates
        /// </summary>
        public static PropertyDefinition RegistryKeyStates = new PropertyDefinition(nameof(RegistryKeyStates), typeof(IList<RegistryKeyState>));


        /// <summary>
        /// Severity
        /// </summary>
        public static PropertyDefinition Severity = new PropertyDefinition(nameof(Severity), typeof(AlertSeverity));


        /// <summary>
        /// SourceMaterials
        /// </summary>
        public static PropertyDefinition SourceMaterials = new PropertyDefinition(nameof(SourceMaterials), typeof(IList<String>));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(AlertStatus));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// Triggers
        /// </summary>
        public static PropertyDefinition Triggers = new PropertyDefinition(nameof(Triggers), typeof(IList<AlertTrigger>));


        /// <summary>
        /// UserStates
        /// </summary>
        public static PropertyDefinition UserStates = new PropertyDefinition(nameof(UserStates), typeof(IList<UserSecurityState>));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));


        /// <summary>
        /// VulnerabilityStates
        /// </summary>
        public static PropertyDefinition VulnerabilityStates = new PropertyDefinition(nameof(VulnerabilityStates), typeof(IList<VulnerabilityState>));

    }


    /// <summary>
    /// CloudAppSecurityProfileObjectSchema
    /// </summary>
    public class CloudAppSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DeploymentPackageUrl
        /// </summary>
        public static PropertyDefinition DeploymentPackageUrl = new PropertyDefinition(nameof(DeploymentPackageUrl), typeof(string));


        /// <summary>
        /// DestinationServiceName
        /// </summary>
        public static PropertyDefinition DestinationServiceName = new PropertyDefinition(nameof(DestinationServiceName), typeof(string));


        /// <summary>
        /// IsSigned
        /// </summary>
        public static PropertyDefinition IsSigned = new PropertyDefinition(nameof(IsSigned), typeof(bool));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Manifest
        /// </summary>
        public static PropertyDefinition Manifest = new PropertyDefinition(nameof(Manifest), typeof(string));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// PermissionsRequired
        /// </summary>
        public static PropertyDefinition PermissionsRequired = new PropertyDefinition(nameof(PermissionsRequired), typeof(ApplicationPermissionsRequired));


        /// <summary>
        /// Platform
        /// </summary>
        public static PropertyDefinition Platform = new PropertyDefinition(nameof(Platform), typeof(string));


        /// <summary>
        /// PolicyName
        /// </summary>
        public static PropertyDefinition PolicyName = new PropertyDefinition(nameof(PolicyName), typeof(string));


        /// <summary>
        /// Publisher
        /// </summary>
        public static PropertyDefinition Publisher = new PropertyDefinition(nameof(Publisher), typeof(string));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// DomainSecurityProfileObjectSchema
    /// </summary>
    public class DomainSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActivityGroupNames
        /// </summary>
        public static PropertyDefinition ActivityGroupNames = new PropertyDefinition(nameof(ActivityGroupNames), typeof(IList<String>));


        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// CountHits
        /// </summary>
        public static PropertyDefinition CountHits = new PropertyDefinition(nameof(CountHits), typeof(int));


        /// <summary>
        /// CountInOrg
        /// </summary>
        public static PropertyDefinition CountInOrg = new PropertyDefinition(nameof(CountInOrg), typeof(int));


        /// <summary>
        /// DomainCategories
        /// </summary>
        public static PropertyDefinition DomainCategories = new PropertyDefinition(nameof(DomainCategories), typeof(IList<ReputationCategory>));


        /// <summary>
        /// DomainRegisteredDateTime
        /// </summary>
        public static PropertyDefinition DomainRegisteredDateTime = new PropertyDefinition(nameof(DomainRegisteredDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FirstSeenDateTime
        /// </summary>
        public static PropertyDefinition FirstSeenDateTime = new PropertyDefinition(nameof(FirstSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSeenDateTime
        /// </summary>
        public static PropertyDefinition LastSeenDateTime = new PropertyDefinition(nameof(LastSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Name
        /// </summary>
        public static PropertyDefinition Name = new PropertyDefinition(nameof(Name), typeof(string));


        /// <summary>
        /// Registrant
        /// </summary>
        public static PropertyDefinition Registrant = new PropertyDefinition(nameof(Registrant), typeof(DomainRegistrant));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// FileSecurityProfileObjectSchema
    /// </summary>
    public class FileSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActivityGroupNames
        /// </summary>
        public static PropertyDefinition ActivityGroupNames = new PropertyDefinition(nameof(ActivityGroupNames), typeof(IList<String>));


        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// CertificateThumbprint
        /// </summary>
        public static PropertyDefinition CertificateThumbprint = new PropertyDefinition(nameof(CertificateThumbprint), typeof(string));


        /// <summary>
        /// Extensions
        /// </summary>
        public static PropertyDefinition Extensions = new PropertyDefinition(nameof(Extensions), typeof(IList<String>));


        /// <summary>
        /// FileType
        /// </summary>
        public static PropertyDefinition FileType = new PropertyDefinition(nameof(FileType), typeof(string));


        /// <summary>
        /// FirstSeenDateTime
        /// </summary>
        public static PropertyDefinition FirstSeenDateTime = new PropertyDefinition(nameof(FirstSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Hashes
        /// </summary>
        public static PropertyDefinition Hashes = new PropertyDefinition(nameof(Hashes), typeof(IList<FileHash>));


        /// <summary>
        /// LastSeenDateTime
        /// </summary>
        public static PropertyDefinition LastSeenDateTime = new PropertyDefinition(nameof(LastSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MalwareStates
        /// </summary>
        public static PropertyDefinition MalwareStates = new PropertyDefinition(nameof(MalwareStates), typeof(IList<MalwareState>));


        /// <summary>
        /// Names
        /// </summary>
        public static PropertyDefinition Names = new PropertyDefinition(nameof(Names), typeof(IList<String>));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Size
        /// </summary>
        public static PropertyDefinition Size = new PropertyDefinition(nameof(Size), typeof(Int64));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));


        /// <summary>
        /// VulnerabilityStates
        /// </summary>
        public static PropertyDefinition VulnerabilityStates = new PropertyDefinition(nameof(VulnerabilityStates), typeof(IList<VulnerabilityState>));

    }


    /// <summary>
    /// HostSecurityProfileObjectSchema
    /// </summary>
    public class HostSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// FirstSeenDateTime
        /// </summary>
        public static PropertyDefinition FirstSeenDateTime = new PropertyDefinition(nameof(FirstSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Fqdn
        /// </summary>
        public static PropertyDefinition Fqdn = new PropertyDefinition(nameof(Fqdn), typeof(string));


        /// <summary>
        /// IsAzureAdJoined
        /// </summary>
        public static PropertyDefinition IsAzureAdJoined = new PropertyDefinition(nameof(IsAzureAdJoined), typeof(bool));


        /// <summary>
        /// IsAzureAdRegistered
        /// </summary>
        public static PropertyDefinition IsAzureAdRegistered = new PropertyDefinition(nameof(IsAzureAdRegistered), typeof(bool));


        /// <summary>
        /// IsHybridAzureDomainJoined
        /// </summary>
        public static PropertyDefinition IsHybridAzureDomainJoined = new PropertyDefinition(nameof(IsHybridAzureDomainJoined), typeof(bool));


        /// <summary>
        /// LastSeenDateTime
        /// </summary>
        public static PropertyDefinition LastSeenDateTime = new PropertyDefinition(nameof(LastSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LogonUsers
        /// </summary>
        public static PropertyDefinition LogonUsers = new PropertyDefinition(nameof(LogonUsers), typeof(IList<LogonUser>));


        /// <summary>
        /// NetBiosName
        /// </summary>
        public static PropertyDefinition NetBiosName = new PropertyDefinition(nameof(NetBiosName), typeof(string));


        /// <summary>
        /// NetworkInterfaces
        /// </summary>
        public static PropertyDefinition NetworkInterfaces = new PropertyDefinition(nameof(NetworkInterfaces), typeof(IList<NetworkInterface>));


        /// <summary>
        /// Os
        /// </summary>
        public static PropertyDefinition Os = new PropertyDefinition(nameof(Os), typeof(string));


        /// <summary>
        /// OsVersion
        /// </summary>
        public static PropertyDefinition OsVersion = new PropertyDefinition(nameof(OsVersion), typeof(string));


        /// <summary>
        /// ParentHost
        /// </summary>
        public static PropertyDefinition ParentHost = new PropertyDefinition(nameof(ParentHost), typeof(string));


        /// <summary>
        /// RelatedHostIds
        /// </summary>
        public static PropertyDefinition RelatedHostIds = new PropertyDefinition(nameof(RelatedHostIds), typeof(IList<String>));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// IpSecurityProfileObjectSchema
    /// </summary>
    public class IpSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActivityGroupNames
        /// </summary>
        public static PropertyDefinition ActivityGroupNames = new PropertyDefinition(nameof(ActivityGroupNames), typeof(IList<String>));


        /// <summary>
        /// Address
        /// </summary>
        public static PropertyDefinition Address = new PropertyDefinition(nameof(Address), typeof(string));


        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// CountHits
        /// </summary>
        public static PropertyDefinition CountHits = new PropertyDefinition(nameof(CountHits), typeof(int));


        /// <summary>
        /// CountHosts
        /// </summary>
        public static PropertyDefinition CountHosts = new PropertyDefinition(nameof(CountHosts), typeof(int));


        /// <summary>
        /// FirstSeenDateTime
        /// </summary>
        public static PropertyDefinition FirstSeenDateTime = new PropertyDefinition(nameof(FirstSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IpCategories
        /// </summary>
        public static PropertyDefinition IpCategories = new PropertyDefinition(nameof(IpCategories), typeof(IList<IpCategory>));


        /// <summary>
        /// IpReferenceData
        /// </summary>
        public static PropertyDefinition IpReferenceData = new PropertyDefinition(nameof(IpReferenceData), typeof(IList<IpReferenceData>));


        /// <summary>
        /// LastSeenDateTime
        /// </summary>
        public static PropertyDefinition LastSeenDateTime = new PropertyDefinition(nameof(LastSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// ProviderTenantSettingObjectSchema
    /// </summary>
    public class ProviderTenantSettingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// Enabled
        /// </summary>
        public static PropertyDefinition Enabled = new PropertyDefinition(nameof(Enabled), typeof(bool));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Provider
        /// </summary>
        public static PropertyDefinition Provider = new PropertyDefinition(nameof(Provider), typeof(string));


        /// <summary>
        /// Vendor
        /// </summary>
        public static PropertyDefinition Vendor = new PropertyDefinition(nameof(Vendor), typeof(string));

    }


    /// <summary>
    /// SecureScoreControlProfileObjectSchema
    /// </summary>
    public class SecureScoreControlProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActionType
        /// </summary>
        public static PropertyDefinition ActionType = new PropertyDefinition(nameof(ActionType), typeof(string));


        /// <summary>
        /// ActionUrl
        /// </summary>
        public static PropertyDefinition ActionUrl = new PropertyDefinition(nameof(ActionUrl), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// ComplianceInformation
        /// </summary>
        public static PropertyDefinition ComplianceInformation = new PropertyDefinition(nameof(ComplianceInformation), typeof(IList<ComplianceInformation>));


        /// <summary>
        /// ControlCategory
        /// </summary>
        public static PropertyDefinition ControlCategory = new PropertyDefinition(nameof(ControlCategory), typeof(string));


        /// <summary>
        /// ControlStateUpdates
        /// </summary>
        public static PropertyDefinition ControlStateUpdates = new PropertyDefinition(nameof(ControlStateUpdates), typeof(IList<SecureScoreControlStateUpdate>));


        /// <summary>
        /// Deprecated
        /// </summary>
        public static PropertyDefinition Deprecated = new PropertyDefinition(nameof(Deprecated), typeof(bool));


        /// <summary>
        /// ImplementationCost
        /// </summary>
        public static PropertyDefinition ImplementationCost = new PropertyDefinition(nameof(ImplementationCost), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MaxScore
        /// </summary>
        public static PropertyDefinition MaxScore = new PropertyDefinition(nameof(MaxScore), typeof(Double));


        /// <summary>
        /// Rank
        /// </summary>
        public static PropertyDefinition Rank = new PropertyDefinition(nameof(Rank), typeof(int));


        /// <summary>
        /// Remediation
        /// </summary>
        public static PropertyDefinition Remediation = new PropertyDefinition(nameof(Remediation), typeof(string));


        /// <summary>
        /// RemediationImpact
        /// </summary>
        public static PropertyDefinition RemediationImpact = new PropertyDefinition(nameof(RemediationImpact), typeof(string));


        /// <summary>
        /// Service
        /// </summary>
        public static PropertyDefinition Service = new PropertyDefinition(nameof(Service), typeof(string));


        /// <summary>
        /// Threats
        /// </summary>
        public static PropertyDefinition Threats = new PropertyDefinition(nameof(Threats), typeof(IList<String>));


        /// <summary>
        /// Tier
        /// </summary>
        public static PropertyDefinition Tier = new PropertyDefinition(nameof(Tier), typeof(string));


        /// <summary>
        /// Title
        /// </summary>
        public static PropertyDefinition Title = new PropertyDefinition(nameof(Title), typeof(string));


        /// <summary>
        /// UserImpact
        /// </summary>
        public static PropertyDefinition UserImpact = new PropertyDefinition(nameof(UserImpact), typeof(string));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// SecureScoreObjectSchema
    /// </summary>
    public class SecureScoreObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ActiveUserCount
        /// </summary>
        public static PropertyDefinition ActiveUserCount = new PropertyDefinition(nameof(ActiveUserCount), typeof(int));


        /// <summary>
        /// AverageComparativeScores
        /// </summary>
        public static PropertyDefinition AverageComparativeScores = new PropertyDefinition(nameof(AverageComparativeScores), typeof(IList<AverageComparativeScore>));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// ControlScores
        /// </summary>
        public static PropertyDefinition ControlScores = new PropertyDefinition(nameof(ControlScores), typeof(IList<ControlScore>));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CurrentScore
        /// </summary>
        public static PropertyDefinition CurrentScore = new PropertyDefinition(nameof(CurrentScore), typeof(Double));


        /// <summary>
        /// EnabledServices
        /// </summary>
        public static PropertyDefinition EnabledServices = new PropertyDefinition(nameof(EnabledServices), typeof(IList<String>));


        /// <summary>
        /// LicensedUserCount
        /// </summary>
        public static PropertyDefinition LicensedUserCount = new PropertyDefinition(nameof(LicensedUserCount), typeof(int));


        /// <summary>
        /// MaxScore
        /// </summary>
        public static PropertyDefinition MaxScore = new PropertyDefinition(nameof(MaxScore), typeof(Double));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));

    }


    /// <summary>
    /// TiIndicatorObjectSchema
    /// </summary>
    public class TiIndicatorObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Action
        /// </summary>
        public static PropertyDefinition Action = new PropertyDefinition(nameof(Action), typeof(TiAction));


        /// <summary>
        /// ActivityGroupNames
        /// </summary>
        public static PropertyDefinition ActivityGroupNames = new PropertyDefinition(nameof(ActivityGroupNames), typeof(IList<String>));


        /// <summary>
        /// AdditionalInformation
        /// </summary>
        public static PropertyDefinition AdditionalInformation = new PropertyDefinition(nameof(AdditionalInformation), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// Confidence
        /// </summary>
        public static PropertyDefinition Confidence = new PropertyDefinition(nameof(Confidence), typeof(int));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DiamondModel
        /// </summary>
        public static PropertyDefinition DiamondModel = new PropertyDefinition(nameof(DiamondModel), typeof(DiamondModel));


        /// <summary>
        /// EmailEncoding
        /// </summary>
        public static PropertyDefinition EmailEncoding = new PropertyDefinition(nameof(EmailEncoding), typeof(string));


        /// <summary>
        /// EmailLanguage
        /// </summary>
        public static PropertyDefinition EmailLanguage = new PropertyDefinition(nameof(EmailLanguage), typeof(string));


        /// <summary>
        /// EmailRecipient
        /// </summary>
        public static PropertyDefinition EmailRecipient = new PropertyDefinition(nameof(EmailRecipient), typeof(string));


        /// <summary>
        /// EmailSenderAddress
        /// </summary>
        public static PropertyDefinition EmailSenderAddress = new PropertyDefinition(nameof(EmailSenderAddress), typeof(string));


        /// <summary>
        /// EmailSenderName
        /// </summary>
        public static PropertyDefinition EmailSenderName = new PropertyDefinition(nameof(EmailSenderName), typeof(string));


        /// <summary>
        /// EmailSourceDomain
        /// </summary>
        public static PropertyDefinition EmailSourceDomain = new PropertyDefinition(nameof(EmailSourceDomain), typeof(string));


        /// <summary>
        /// EmailSourceIpAddress
        /// </summary>
        public static PropertyDefinition EmailSourceIpAddress = new PropertyDefinition(nameof(EmailSourceIpAddress), typeof(string));


        /// <summary>
        /// EmailSubject
        /// </summary>
        public static PropertyDefinition EmailSubject = new PropertyDefinition(nameof(EmailSubject), typeof(string));


        /// <summary>
        /// EmailXMailer
        /// </summary>
        public static PropertyDefinition EmailXMailer = new PropertyDefinition(nameof(EmailXMailer), typeof(string));


        /// <summary>
        /// ExpirationDateTime
        /// </summary>
        public static PropertyDefinition ExpirationDateTime = new PropertyDefinition(nameof(ExpirationDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// FileCompileDateTime
        /// </summary>
        public static PropertyDefinition FileCompileDateTime = new PropertyDefinition(nameof(FileCompileDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FileCreatedDateTime
        /// </summary>
        public static PropertyDefinition FileCreatedDateTime = new PropertyDefinition(nameof(FileCreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// FileHashType
        /// </summary>
        public static PropertyDefinition FileHashType = new PropertyDefinition(nameof(FileHashType), typeof(FileHashType));


        /// <summary>
        /// FileHashValue
        /// </summary>
        public static PropertyDefinition FileHashValue = new PropertyDefinition(nameof(FileHashValue), typeof(string));


        /// <summary>
        /// FileMutexName
        /// </summary>
        public static PropertyDefinition FileMutexName = new PropertyDefinition(nameof(FileMutexName), typeof(string));


        /// <summary>
        /// FileName
        /// </summary>
        public static PropertyDefinition FileName = new PropertyDefinition(nameof(FileName), typeof(string));


        /// <summary>
        /// FilePacker
        /// </summary>
        public static PropertyDefinition FilePacker = new PropertyDefinition(nameof(FilePacker), typeof(string));


        /// <summary>
        /// FilePath
        /// </summary>
        public static PropertyDefinition FilePath = new PropertyDefinition(nameof(FilePath), typeof(string));


        /// <summary>
        /// FileSize
        /// </summary>
        public static PropertyDefinition FileSize = new PropertyDefinition(nameof(FileSize), typeof(Int64));


        /// <summary>
        /// FileType
        /// </summary>
        public static PropertyDefinition FileType = new PropertyDefinition(nameof(FileType), typeof(string));


        /// <summary>
        /// HostName
        /// </summary>
        public static PropertyDefinition HostName = new PropertyDefinition(nameof(HostName), typeof(string));


        /// <summary>
        /// IngestedDateTime
        /// </summary>
        public static PropertyDefinition IngestedDateTime = new PropertyDefinition(nameof(IngestedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// IsActive
        /// </summary>
        public static PropertyDefinition IsActive = new PropertyDefinition(nameof(IsActive), typeof(bool));


        /// <summary>
        /// KillChain
        /// </summary>
        public static PropertyDefinition KillChain = new PropertyDefinition(nameof(KillChain), typeof(IList<String>));


        /// <summary>
        /// KnownFalsePositives
        /// </summary>
        public static PropertyDefinition KnownFalsePositives = new PropertyDefinition(nameof(KnownFalsePositives), typeof(string));


        /// <summary>
        /// LastReportedDateTime
        /// </summary>
        public static PropertyDefinition LastReportedDateTime = new PropertyDefinition(nameof(LastReportedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MalwareFamilyNames
        /// </summary>
        public static PropertyDefinition MalwareFamilyNames = new PropertyDefinition(nameof(MalwareFamilyNames), typeof(IList<String>));


        /// <summary>
        /// NetworkCidrBlock
        /// </summary>
        public static PropertyDefinition NetworkCidrBlock = new PropertyDefinition(nameof(NetworkCidrBlock), typeof(string));


        /// <summary>
        /// NetworkDestinationAsn
        /// </summary>
        public static PropertyDefinition NetworkDestinationAsn = new PropertyDefinition(nameof(NetworkDestinationAsn), typeof(int));


        /// <summary>
        /// NetworkDestinationCidrBlock
        /// </summary>
        public static PropertyDefinition NetworkDestinationCidrBlock = new PropertyDefinition(nameof(NetworkDestinationCidrBlock), typeof(string));


        /// <summary>
        /// NetworkDestinationIPv4
        /// </summary>
        public static PropertyDefinition NetworkDestinationIPv4 = new PropertyDefinition(nameof(NetworkDestinationIPv4), typeof(string));


        /// <summary>
        /// NetworkDestinationIPv6
        /// </summary>
        public static PropertyDefinition NetworkDestinationIPv6 = new PropertyDefinition(nameof(NetworkDestinationIPv6), typeof(string));


        /// <summary>
        /// NetworkDestinationPort
        /// </summary>
        public static PropertyDefinition NetworkDestinationPort = new PropertyDefinition(nameof(NetworkDestinationPort), typeof(int));


        /// <summary>
        /// NetworkIPv4
        /// </summary>
        public static PropertyDefinition NetworkIPv4 = new PropertyDefinition(nameof(NetworkIPv4), typeof(string));


        /// <summary>
        /// NetworkIPv6
        /// </summary>
        public static PropertyDefinition NetworkIPv6 = new PropertyDefinition(nameof(NetworkIPv6), typeof(string));


        /// <summary>
        /// NetworkPort
        /// </summary>
        public static PropertyDefinition NetworkPort = new PropertyDefinition(nameof(NetworkPort), typeof(int));


        /// <summary>
        /// NetworkProtocol
        /// </summary>
        public static PropertyDefinition NetworkProtocol = new PropertyDefinition(nameof(NetworkProtocol), typeof(int));


        /// <summary>
        /// NetworkSourceAsn
        /// </summary>
        public static PropertyDefinition NetworkSourceAsn = new PropertyDefinition(nameof(NetworkSourceAsn), typeof(int));


        /// <summary>
        /// NetworkSourceCidrBlock
        /// </summary>
        public static PropertyDefinition NetworkSourceCidrBlock = new PropertyDefinition(nameof(NetworkSourceCidrBlock), typeof(string));


        /// <summary>
        /// NetworkSourceIPv4
        /// </summary>
        public static PropertyDefinition NetworkSourceIPv4 = new PropertyDefinition(nameof(NetworkSourceIPv4), typeof(string));


        /// <summary>
        /// NetworkSourceIPv6
        /// </summary>
        public static PropertyDefinition NetworkSourceIPv6 = new PropertyDefinition(nameof(NetworkSourceIPv6), typeof(string));


        /// <summary>
        /// NetworkSourcePort
        /// </summary>
        public static PropertyDefinition NetworkSourcePort = new PropertyDefinition(nameof(NetworkSourcePort), typeof(int));


        /// <summary>
        /// PassiveOnly
        /// </summary>
        public static PropertyDefinition PassiveOnly = new PropertyDefinition(nameof(PassiveOnly), typeof(bool));


        /// <summary>
        /// Severity
        /// </summary>
        public static PropertyDefinition Severity = new PropertyDefinition(nameof(Severity), typeof(int));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// TargetProduct
        /// </summary>
        public static PropertyDefinition TargetProduct = new PropertyDefinition(nameof(TargetProduct), typeof(string));


        /// <summary>
        /// ThreatType
        /// </summary>
        public static PropertyDefinition ThreatType = new PropertyDefinition(nameof(ThreatType), typeof(string));


        /// <summary>
        /// TlpLevel
        /// </summary>
        public static PropertyDefinition TlpLevel = new PropertyDefinition(nameof(TlpLevel), typeof(TlpLevel));


        /// <summary>
        /// Url
        /// </summary>
        public static PropertyDefinition Url = new PropertyDefinition(nameof(Url), typeof(string));


        /// <summary>
        /// UserAgent
        /// </summary>
        public static PropertyDefinition UserAgent = new PropertyDefinition(nameof(UserAgent), typeof(string));

    }


    /// <summary>
    /// UserSecurityProfileObjectSchema
    /// </summary>
    public class UserSecurityProfileObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AadUserDisplayName
        /// </summary>
        public static PropertyDefinition AadUserDisplayName = new PropertyDefinition(nameof(AadUserDisplayName), typeof(string));


        /// <summary>
        /// AadUserId
        /// </summary>
        public static PropertyDefinition AadUserId = new PropertyDefinition(nameof(AadUserId), typeof(string));


        /// <summary>
        /// AccountAliases
        /// </summary>
        public static PropertyDefinition AccountAliases = new PropertyDefinition(nameof(AccountAliases), typeof(IList<AccountAlias>));


        /// <summary>
        /// AccountInstance
        /// </summary>
        public static PropertyDefinition AccountInstance = new PropertyDefinition(nameof(AccountInstance), typeof(int));


        /// <summary>
        /// AccountService
        /// </summary>
        public static PropertyDefinition AccountService = new PropertyDefinition(nameof(AccountService), typeof(string));


        /// <summary>
        /// AccountStatus
        /// </summary>
        public static PropertyDefinition AccountStatus = new PropertyDefinition(nameof(AccountStatus), typeof(AccountStatus));


        /// <summary>
        /// AzureSubscriptionId
        /// </summary>
        public static PropertyDefinition AzureSubscriptionId = new PropertyDefinition(nameof(AzureSubscriptionId), typeof(string));


        /// <summary>
        /// AzureTenantId
        /// </summary>
        public static PropertyDefinition AzureTenantId = new PropertyDefinition(nameof(AzureTenantId), typeof(string));


        /// <summary>
        /// DomainName
        /// </summary>
        public static PropertyDefinition DomainName = new PropertyDefinition(nameof(DomainName), typeof(string));


        /// <summary>
        /// FirstSeenDateTime
        /// </summary>
        public static PropertyDefinition FirstSeenDateTime = new PropertyDefinition(nameof(FirstSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastSeenDateTime
        /// </summary>
        public static PropertyDefinition LastSeenDateTime = new PropertyDefinition(nameof(LastSeenDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastVpnClientIp
        /// </summary>
        public static PropertyDefinition LastVpnClientIp = new PropertyDefinition(nameof(LastVpnClientIp), typeof(string));


        /// <summary>
        /// MfaEnabled
        /// </summary>
        public static PropertyDefinition MfaEnabled = new PropertyDefinition(nameof(MfaEnabled), typeof(bool));


        /// <summary>
        /// RiskScore
        /// </summary>
        public static PropertyDefinition RiskScore = new PropertyDefinition(nameof(RiskScore), typeof(string));


        /// <summary>
        /// Tags
        /// </summary>
        public static PropertyDefinition Tags = new PropertyDefinition(nameof(Tags), typeof(IList<String>));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));


        /// <summary>
        /// VendorInformation
        /// </summary>
        public static PropertyDefinition VendorInformation = new PropertyDefinition(nameof(VendorInformation), typeof(SecurityVendorInformation));


        /// <summary>
        /// VpnClientId
        /// </summary>
        public static PropertyDefinition VpnClientId = new PropertyDefinition(nameof(VpnClientId), typeof(string));

    }


    /// <summary>
    /// BookingNamedEntityObjectSchema
    /// </summary>
    public class BookingNamedEntityObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// BookingAppointmentObjectSchema
    /// </summary>
    public class BookingAppointmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// SelfServiceAppointmentId
        /// </summary>
        public static PropertyDefinition SelfServiceAppointmentId = new PropertyDefinition(nameof(SelfServiceAppointmentId), typeof(string));


        /// <summary>
        /// CustomerId
        /// </summary>
        public static PropertyDefinition CustomerId = new PropertyDefinition(nameof(CustomerId), typeof(string));


        /// <summary>
        /// CustomerName
        /// </summary>
        public static PropertyDefinition CustomerName = new PropertyDefinition(nameof(CustomerName), typeof(string));


        /// <summary>
        /// CustomerEmailAddress
        /// </summary>
        public static PropertyDefinition CustomerEmailAddress = new PropertyDefinition(nameof(CustomerEmailAddress), typeof(string));


        /// <summary>
        /// CustomerPhone
        /// </summary>
        public static PropertyDefinition CustomerPhone = new PropertyDefinition(nameof(CustomerPhone), typeof(string));


        /// <summary>
        /// CustomerLocation
        /// </summary>
        public static PropertyDefinition CustomerLocation = new PropertyDefinition(nameof(CustomerLocation), typeof(Location));


        /// <summary>
        /// CustomerNotes
        /// </summary>
        public static PropertyDefinition CustomerNotes = new PropertyDefinition(nameof(CustomerNotes), typeof(string));


        /// <summary>
        /// ServiceId
        /// </summary>
        public static PropertyDefinition ServiceId = new PropertyDefinition(nameof(ServiceId), typeof(string));


        /// <summary>
        /// ServiceName
        /// </summary>
        public static PropertyDefinition ServiceName = new PropertyDefinition(nameof(ServiceName), typeof(string));


        /// <summary>
        /// Start
        /// </summary>
        public static PropertyDefinition Start = new PropertyDefinition(nameof(Start), typeof(DateTimeTimeZone));


        /// <summary>
        /// End
        /// </summary>
        public static PropertyDefinition End = new PropertyDefinition(nameof(End), typeof(DateTimeTimeZone));


        /// <summary>
        /// Duration
        /// </summary>
        public static PropertyDefinition Duration = new PropertyDefinition(nameof(Duration), typeof(TimeSpan));


        /// <summary>
        /// PreBuffer
        /// </summary>
        public static PropertyDefinition PreBuffer = new PropertyDefinition(nameof(PreBuffer), typeof(TimeSpan));


        /// <summary>
        /// PostBuffer
        /// </summary>
        public static PropertyDefinition PostBuffer = new PropertyDefinition(nameof(PostBuffer), typeof(TimeSpan));


        /// <summary>
        /// ServiceLocation
        /// </summary>
        public static PropertyDefinition ServiceLocation = new PropertyDefinition(nameof(ServiceLocation), typeof(Location));


        /// <summary>
        /// PriceType
        /// </summary>
        public static PropertyDefinition PriceType = new PropertyDefinition(nameof(PriceType), typeof(BookingPriceType));


        /// <summary>
        /// Price
        /// </summary>
        public static PropertyDefinition Price = new PropertyDefinition(nameof(Price), typeof(Double));


        /// <summary>
        /// ServiceNotes
        /// </summary>
        public static PropertyDefinition ServiceNotes = new PropertyDefinition(nameof(ServiceNotes), typeof(string));


        /// <summary>
        /// Reminders
        /// </summary>
        public static PropertyDefinition Reminders = new PropertyDefinition(nameof(Reminders), typeof(IList<BookingReminder>));


        /// <summary>
        /// OptOutOfCustomerEmail
        /// </summary>
        public static PropertyDefinition OptOutOfCustomerEmail = new PropertyDefinition(nameof(OptOutOfCustomerEmail), typeof(bool));


        /// <summary>
        /// StaffMemberIds
        /// </summary>
        public static PropertyDefinition StaffMemberIds = new PropertyDefinition(nameof(StaffMemberIds), typeof(IList<String>));


        /// <summary>
        /// InvoiceAmount
        /// </summary>
        public static PropertyDefinition InvoiceAmount = new PropertyDefinition(nameof(InvoiceAmount), typeof(Double));


        /// <summary>
        /// InvoiceDate
        /// </summary>
        public static PropertyDefinition InvoiceDate = new PropertyDefinition(nameof(InvoiceDate), typeof(DateTimeTimeZone));


        /// <summary>
        /// InvoiceId
        /// </summary>
        public static PropertyDefinition InvoiceId = new PropertyDefinition(nameof(InvoiceId), typeof(string));


        /// <summary>
        /// InvoiceStatus
        /// </summary>
        public static PropertyDefinition InvoiceStatus = new PropertyDefinition(nameof(InvoiceStatus), typeof(BookingInvoiceStatus));


        /// <summary>
        /// InvoiceUrl
        /// </summary>
        public static PropertyDefinition InvoiceUrl = new PropertyDefinition(nameof(InvoiceUrl), typeof(string));

    }


    /// <summary>
    /// BookingBusinessObjectSchema
    /// </summary>
    public class BookingBusinessObjectSchema : BookingNamedEntityObjectSchema
    {

        /// <summary>
        /// BusinessType
        /// </summary>
        public static PropertyDefinition BusinessType = new PropertyDefinition(nameof(BusinessType), typeof(string));


        /// <summary>
        /// Address
        /// </summary>
        public static PropertyDefinition Address = new PropertyDefinition(nameof(Address), typeof(PhysicalAddress));


        /// <summary>
        /// Phone
        /// </summary>
        public static PropertyDefinition Phone = new PropertyDefinition(nameof(Phone), typeof(string));


        /// <summary>
        /// Email
        /// </summary>
        public static PropertyDefinition Email = new PropertyDefinition(nameof(Email), typeof(string));


        /// <summary>
        /// WebSiteUrl
        /// </summary>
        public static PropertyDefinition WebSiteUrl = new PropertyDefinition(nameof(WebSiteUrl), typeof(string));


        /// <summary>
        /// DefaultCurrencyIso
        /// </summary>
        public static PropertyDefinition DefaultCurrencyIso = new PropertyDefinition(nameof(DefaultCurrencyIso), typeof(string));


        /// <summary>
        /// BusinessHours
        /// </summary>
        public static PropertyDefinition BusinessHours = new PropertyDefinition(nameof(BusinessHours), typeof(IList<BookingWorkHours>));


        /// <summary>
        /// SchedulingPolicy
        /// </summary>
        public static PropertyDefinition SchedulingPolicy = new PropertyDefinition(nameof(SchedulingPolicy), typeof(BookingSchedulingPolicy));


        /// <summary>
        /// IsPublished
        /// </summary>
        public static PropertyDefinition IsPublished = new PropertyDefinition(nameof(IsPublished), typeof(bool));


        /// <summary>
        /// PublicUrl
        /// </summary>
        public static PropertyDefinition PublicUrl = new PropertyDefinition(nameof(PublicUrl), typeof(string));


        /// <summary>
        /// Appointments
        /// </summary>
        public static PropertyDefinition Appointments = new PropertyDefinition(nameof(Appointments), typeof(IList<BookingAppointment>));


        /// <summary>
        /// CalendarView
        /// </summary>
        public static PropertyDefinition CalendarView = new PropertyDefinition(nameof(CalendarView), typeof(IList<BookingAppointment>));


        /// <summary>
        /// Customers
        /// </summary>
        public static PropertyDefinition Customers = new PropertyDefinition(nameof(Customers), typeof(IList<BookingCustomer>));


        /// <summary>
        /// Services
        /// </summary>
        public static PropertyDefinition Services = new PropertyDefinition(nameof(Services), typeof(IList<BookingService>));


        /// <summary>
        /// StaffMembers
        /// </summary>
        public static PropertyDefinition StaffMembers = new PropertyDefinition(nameof(StaffMembers), typeof(IList<BookingStaffMember>));

    }


    /// <summary>
    /// BookingPersonObjectSchema
    /// </summary>
    public class BookingPersonObjectSchema : BookingNamedEntityObjectSchema
    {

        /// <summary>
        /// EmailAddress
        /// </summary>
        public static PropertyDefinition EmailAddress = new PropertyDefinition(nameof(EmailAddress), typeof(string));

    }


    /// <summary>
    /// BookingCustomerObjectSchema
    /// </summary>
    public class BookingCustomerObjectSchema : BookingPersonObjectSchema
    {
    }


    /// <summary>
    /// BookingServiceObjectSchema
    /// </summary>
    public class BookingServiceObjectSchema : BookingNamedEntityObjectSchema
    {

        /// <summary>
        /// DefaultDuration
        /// </summary>
        public static PropertyDefinition DefaultDuration = new PropertyDefinition(nameof(DefaultDuration), typeof(TimeSpan));


        /// <summary>
        /// DefaultLocation
        /// </summary>
        public static PropertyDefinition DefaultLocation = new PropertyDefinition(nameof(DefaultLocation), typeof(Location));


        /// <summary>
        /// DefaultPrice
        /// </summary>
        public static PropertyDefinition DefaultPrice = new PropertyDefinition(nameof(DefaultPrice), typeof(Double));


        /// <summary>
        /// DefaultPriceType
        /// </summary>
        public static PropertyDefinition DefaultPriceType = new PropertyDefinition(nameof(DefaultPriceType), typeof(BookingPriceType));


        /// <summary>
        /// DefaultReminders
        /// </summary>
        public static PropertyDefinition DefaultReminders = new PropertyDefinition(nameof(DefaultReminders), typeof(IList<BookingReminder>));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// IsHiddenFromCustomers
        /// </summary>
        public static PropertyDefinition IsHiddenFromCustomers = new PropertyDefinition(nameof(IsHiddenFromCustomers), typeof(bool));


        /// <summary>
        /// Notes
        /// </summary>
        public static PropertyDefinition Notes = new PropertyDefinition(nameof(Notes), typeof(string));


        /// <summary>
        /// PreBuffer
        /// </summary>
        public static PropertyDefinition PreBuffer = new PropertyDefinition(nameof(PreBuffer), typeof(TimeSpan));


        /// <summary>
        /// PostBuffer
        /// </summary>
        public static PropertyDefinition PostBuffer = new PropertyDefinition(nameof(PostBuffer), typeof(TimeSpan));


        /// <summary>
        /// SchedulingPolicy
        /// </summary>
        public static PropertyDefinition SchedulingPolicy = new PropertyDefinition(nameof(SchedulingPolicy), typeof(BookingSchedulingPolicy));


        /// <summary>
        /// StaffMemberIds
        /// </summary>
        public static PropertyDefinition StaffMemberIds = new PropertyDefinition(nameof(StaffMemberIds), typeof(IList<String>));

    }


    /// <summary>
    /// BookingStaffMemberObjectSchema
    /// </summary>
    public class BookingStaffMemberObjectSchema : BookingPersonObjectSchema
    {

        /// <summary>
        /// AvailabilityIsAffectedByPersonalCalendar
        /// </summary>
        public static PropertyDefinition AvailabilityIsAffectedByPersonalCalendar = new PropertyDefinition(nameof(AvailabilityIsAffectedByPersonalCalendar), typeof(bool));


        /// <summary>
        /// ColorIndex
        /// </summary>
        public static PropertyDefinition ColorIndex = new PropertyDefinition(nameof(ColorIndex), typeof(int));


        /// <summary>
        /// Role
        /// </summary>
        public static PropertyDefinition Role = new PropertyDefinition(nameof(Role), typeof(BookingStaffRole));


        /// <summary>
        /// UseBusinessHours
        /// </summary>
        public static PropertyDefinition UseBusinessHours = new PropertyDefinition(nameof(UseBusinessHours), typeof(bool));


        /// <summary>
        /// WorkingHours
        /// </summary>
        public static PropertyDefinition WorkingHours = new PropertyDefinition(nameof(WorkingHours), typeof(IList<BookingWorkHours>));

    }


    /// <summary>
    /// BookingCurrencyObjectSchema
    /// </summary>
    public class BookingCurrencyObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Symbol
        /// </summary>
        public static PropertyDefinition Symbol = new PropertyDefinition(nameof(Symbol), typeof(string));

    }


    /// <summary>
    /// PrivilegedAccessObjectSchema
    /// </summary>
    public class PrivilegedAccessObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Resources
        /// </summary>
        public static PropertyDefinition Resources = new PropertyDefinition(nameof(Resources), typeof(IList<GovernanceResource>));


        /// <summary>
        /// RoleDefinitions
        /// </summary>
        public static PropertyDefinition RoleDefinitions = new PropertyDefinition(nameof(RoleDefinitions), typeof(IList<GovernanceRoleDefinition>));


        /// <summary>
        /// RoleAssignments
        /// </summary>
        public static PropertyDefinition RoleAssignments = new PropertyDefinition(nameof(RoleAssignments), typeof(IList<GovernanceRoleAssignment>));


        /// <summary>
        /// RoleAssignmentRequests
        /// </summary>
        public static PropertyDefinition RoleAssignmentRequests = new PropertyDefinition(nameof(RoleAssignmentRequests), typeof(IList<GovernanceRoleAssignmentRequest>));


        /// <summary>
        /// RoleSettings
        /// </summary>
        public static PropertyDefinition RoleSettings = new PropertyDefinition(nameof(RoleSettings), typeof(IList<GovernanceRoleSetting>));

    }


    /// <summary>
    /// GovernanceResourceObjectSchema
    /// </summary>
    public class GovernanceResourceObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// RegisteredDateTime
        /// </summary>
        public static PropertyDefinition RegisteredDateTime = new PropertyDefinition(nameof(RegisteredDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// RegisteredRoot
        /// </summary>
        public static PropertyDefinition RegisteredRoot = new PropertyDefinition(nameof(RegisteredRoot), typeof(string));


        /// <summary>
        /// Parent
        /// </summary>
        public static PropertyDefinition Parent = new PropertyDefinition(nameof(Parent), typeof(GovernanceResource));


        /// <summary>
        /// RoleDefinitions
        /// </summary>
        public static PropertyDefinition RoleDefinitions = new PropertyDefinition(nameof(RoleDefinitions), typeof(IList<GovernanceRoleDefinition>));


        /// <summary>
        /// RoleAssignments
        /// </summary>
        public static PropertyDefinition RoleAssignments = new PropertyDefinition(nameof(RoleAssignments), typeof(IList<GovernanceRoleAssignment>));


        /// <summary>
        /// RoleAssignmentRequests
        /// </summary>
        public static PropertyDefinition RoleAssignmentRequests = new PropertyDefinition(nameof(RoleAssignmentRequests), typeof(IList<GovernanceRoleAssignmentRequest>));


        /// <summary>
        /// RoleSettings
        /// </summary>
        public static PropertyDefinition RoleSettings = new PropertyDefinition(nameof(RoleSettings), typeof(IList<GovernanceRoleSetting>));

    }


    /// <summary>
    /// GovernanceRoleDefinitionObjectSchema
    /// </summary>
    public class GovernanceRoleDefinitionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// TemplateId
        /// </summary>
        public static PropertyDefinition TemplateId = new PropertyDefinition(nameof(TemplateId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(GovernanceResource));


        /// <summary>
        /// RoleSetting
        /// </summary>
        public static PropertyDefinition RoleSetting = new PropertyDefinition(nameof(RoleSetting), typeof(GovernanceRoleSetting));

    }


    /// <summary>
    /// GovernanceRoleAssignmentObjectSchema
    /// </summary>
    public class GovernanceRoleAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// RoleDefinitionId
        /// </summary>
        public static PropertyDefinition RoleDefinitionId = new PropertyDefinition(nameof(RoleDefinitionId), typeof(string));


        /// <summary>
        /// SubjectId
        /// </summary>
        public static PropertyDefinition SubjectId = new PropertyDefinition(nameof(SubjectId), typeof(string));


        /// <summary>
        /// LinkedEligibleRoleAssignmentId
        /// </summary>
        public static PropertyDefinition LinkedEligibleRoleAssignmentId = new PropertyDefinition(nameof(LinkedEligibleRoleAssignmentId), typeof(string));


        /// <summary>
        /// ExternalId
        /// </summary>
        public static PropertyDefinition ExternalId = new PropertyDefinition(nameof(ExternalId), typeof(string));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// MemberType
        /// </summary>
        public static PropertyDefinition MemberType = new PropertyDefinition(nameof(MemberType), typeof(string));


        /// <summary>
        /// AssignmentState
        /// </summary>
        public static PropertyDefinition AssignmentState = new PropertyDefinition(nameof(AssignmentState), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(GovernanceResource));


        /// <summary>
        /// RoleDefinition
        /// </summary>
        public static PropertyDefinition RoleDefinition = new PropertyDefinition(nameof(RoleDefinition), typeof(GovernanceRoleDefinition));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(GovernanceSubject));


        /// <summary>
        /// LinkedEligibleRoleAssignment
        /// </summary>
        public static PropertyDefinition LinkedEligibleRoleAssignment = new PropertyDefinition(nameof(LinkedEligibleRoleAssignment), typeof(GovernanceRoleAssignment));

    }


    /// <summary>
    /// GovernanceRoleAssignmentRequestObjectSchema
    /// </summary>
    public class GovernanceRoleAssignmentRequestObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// RoleDefinitionId
        /// </summary>
        public static PropertyDefinition RoleDefinitionId = new PropertyDefinition(nameof(RoleDefinitionId), typeof(string));


        /// <summary>
        /// SubjectId
        /// </summary>
        public static PropertyDefinition SubjectId = new PropertyDefinition(nameof(SubjectId), typeof(string));


        /// <summary>
        /// LinkedEligibleRoleAssignmentId
        /// </summary>
        public static PropertyDefinition LinkedEligibleRoleAssignmentId = new PropertyDefinition(nameof(LinkedEligibleRoleAssignmentId), typeof(string));


        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// AssignmentState
        /// </summary>
        public static PropertyDefinition AssignmentState = new PropertyDefinition(nameof(AssignmentState), typeof(string));


        /// <summary>
        /// RequestedDateTime
        /// </summary>
        public static PropertyDefinition RequestedDateTime = new PropertyDefinition(nameof(RequestedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Reason
        /// </summary>
        public static PropertyDefinition Reason = new PropertyDefinition(nameof(Reason), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(GovernanceRoleAssignmentRequestStatus));


        /// <summary>
        /// Schedule
        /// </summary>
        public static PropertyDefinition Schedule = new PropertyDefinition(nameof(Schedule), typeof(GovernanceSchedule));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(GovernanceResource));


        /// <summary>
        /// RoleDefinition
        /// </summary>
        public static PropertyDefinition RoleDefinition = new PropertyDefinition(nameof(RoleDefinition), typeof(GovernanceRoleDefinition));


        /// <summary>
        /// Subject
        /// </summary>
        public static PropertyDefinition Subject = new PropertyDefinition(nameof(Subject), typeof(GovernanceSubject));

    }


    /// <summary>
    /// GovernanceRoleSettingObjectSchema
    /// </summary>
    public class GovernanceRoleSettingObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ResourceId
        /// </summary>
        public static PropertyDefinition ResourceId = new PropertyDefinition(nameof(ResourceId), typeof(string));


        /// <summary>
        /// RoleDefinitionId
        /// </summary>
        public static PropertyDefinition RoleDefinitionId = new PropertyDefinition(nameof(RoleDefinitionId), typeof(string));


        /// <summary>
        /// IsDefault
        /// </summary>
        public static PropertyDefinition IsDefault = new PropertyDefinition(nameof(IsDefault), typeof(bool));


        /// <summary>
        /// LastUpdatedDateTime
        /// </summary>
        public static PropertyDefinition LastUpdatedDateTime = new PropertyDefinition(nameof(LastUpdatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// LastUpdatedBy
        /// </summary>
        public static PropertyDefinition LastUpdatedBy = new PropertyDefinition(nameof(LastUpdatedBy), typeof(string));


        /// <summary>
        /// AdminEligibleSettings
        /// </summary>
        public static PropertyDefinition AdminEligibleSettings = new PropertyDefinition(nameof(AdminEligibleSettings), typeof(IList<GovernanceRuleSetting>));


        /// <summary>
        /// AdminMemberSettings
        /// </summary>
        public static PropertyDefinition AdminMemberSettings = new PropertyDefinition(nameof(AdminMemberSettings), typeof(IList<GovernanceRuleSetting>));


        /// <summary>
        /// UserEligibleSettings
        /// </summary>
        public static PropertyDefinition UserEligibleSettings = new PropertyDefinition(nameof(UserEligibleSettings), typeof(IList<GovernanceRuleSetting>));


        /// <summary>
        /// UserMemberSettings
        /// </summary>
        public static PropertyDefinition UserMemberSettings = new PropertyDefinition(nameof(UserMemberSettings), typeof(IList<GovernanceRuleSetting>));


        /// <summary>
        /// RoleDefinition
        /// </summary>
        public static PropertyDefinition RoleDefinition = new PropertyDefinition(nameof(RoleDefinition), typeof(GovernanceRoleDefinition));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(GovernanceResource));

    }


    /// <summary>
    /// GovernanceSubjectObjectSchema
    /// </summary>
    public class GovernanceSubjectObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Type
        /// </summary>
        public static PropertyDefinition Type = new PropertyDefinition(nameof(Type), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// PrincipalName
        /// </summary>
        public static PropertyDefinition PrincipalName = new PropertyDefinition(nameof(PrincipalName), typeof(string));


        /// <summary>
        /// Email
        /// </summary>
        public static PropertyDefinition Email = new PropertyDefinition(nameof(Email), typeof(string));

    }


    /// <summary>
    /// AccessReviewObjectSchema
    /// </summary>
    public class AccessReviewObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// StartDateTime
        /// </summary>
        public static PropertyDefinition StartDateTime = new PropertyDefinition(nameof(StartDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// EndDateTime
        /// </summary>
        public static PropertyDefinition EndDateTime = new PropertyDefinition(nameof(EndDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// CreatedBy
        /// </summary>
        public static PropertyDefinition CreatedBy = new PropertyDefinition(nameof(CreatedBy), typeof(UserIdentity));


        /// <summary>
        /// BusinessFlowTemplateId
        /// </summary>
        public static PropertyDefinition BusinessFlowTemplateId = new PropertyDefinition(nameof(BusinessFlowTemplateId), typeof(string));


        /// <summary>
        /// ReviewerType
        /// </summary>
        public static PropertyDefinition ReviewerType = new PropertyDefinition(nameof(ReviewerType), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Settings
        /// </summary>
        public static PropertyDefinition Settings = new PropertyDefinition(nameof(Settings), typeof(AccessReviewSettings));


        /// <summary>
        /// ReviewedEntity
        /// </summary>
        public static PropertyDefinition ReviewedEntity = new PropertyDefinition(nameof(ReviewedEntity), typeof(Identity));


        /// <summary>
        /// Reviewers
        /// </summary>
        public static PropertyDefinition Reviewers = new PropertyDefinition(nameof(Reviewers), typeof(IList<AccessReviewReviewer>));


        /// <summary>
        /// Decisions
        /// </summary>
        public static PropertyDefinition Decisions = new PropertyDefinition(nameof(Decisions), typeof(IList<AccessReviewDecision>));


        /// <summary>
        /// MyDecisions
        /// </summary>
        public static PropertyDefinition MyDecisions = new PropertyDefinition(nameof(MyDecisions), typeof(IList<AccessReviewDecision>));


        /// <summary>
        /// Instances
        /// </summary>
        public static PropertyDefinition Instances = new PropertyDefinition(nameof(Instances), typeof(IList<AccessReview>));

    }


    /// <summary>
    /// AccessReviewReviewerObjectSchema
    /// </summary>
    public class AccessReviewReviewerObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// UserPrincipalName
        /// </summary>
        public static PropertyDefinition UserPrincipalName = new PropertyDefinition(nameof(UserPrincipalName), typeof(string));

    }


    /// <summary>
    /// AccessReviewDecisionObjectSchema
    /// </summary>
    public class AccessReviewDecisionObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// AccessReviewId
        /// </summary>
        public static PropertyDefinition AccessReviewId = new PropertyDefinition(nameof(AccessReviewId), typeof(string));


        /// <summary>
        /// ReviewedBy
        /// </summary>
        public static PropertyDefinition ReviewedBy = new PropertyDefinition(nameof(ReviewedBy), typeof(UserIdentity));


        /// <summary>
        /// ReviewedDateTime
        /// </summary>
        public static PropertyDefinition ReviewedDateTime = new PropertyDefinition(nameof(ReviewedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ReviewResult
        /// </summary>
        public static PropertyDefinition ReviewResult = new PropertyDefinition(nameof(ReviewResult), typeof(string));


        /// <summary>
        /// Justification
        /// </summary>
        public static PropertyDefinition Justification = new PropertyDefinition(nameof(Justification), typeof(string));


        /// <summary>
        /// AppliedBy
        /// </summary>
        public static PropertyDefinition AppliedBy = new PropertyDefinition(nameof(AppliedBy), typeof(UserIdentity));


        /// <summary>
        /// AppliedDateTime
        /// </summary>
        public static PropertyDefinition AppliedDateTime = new PropertyDefinition(nameof(AppliedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// ApplyResult
        /// </summary>
        public static PropertyDefinition ApplyResult = new PropertyDefinition(nameof(ApplyResult), typeof(string));


        /// <summary>
        /// AccessRecommendation
        /// </summary>
        public static PropertyDefinition AccessRecommendation = new PropertyDefinition(nameof(AccessRecommendation), typeof(string));

    }


    /// <summary>
    /// BusinessFlowTemplateObjectSchema
    /// </summary>
    public class BusinessFlowTemplateObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// ProgramObjectSchema
    /// </summary>
    public class ProgramObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// Controls
        /// </summary>
        public static PropertyDefinition Controls = new PropertyDefinition(nameof(Controls), typeof(IList<ProgramControl>));

    }


    /// <summary>
    /// ProgramControlObjectSchema
    /// </summary>
    public class ProgramControlObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ControlId
        /// </summary>
        public static PropertyDefinition ControlId = new PropertyDefinition(nameof(ControlId), typeof(string));


        /// <summary>
        /// ProgramId
        /// </summary>
        public static PropertyDefinition ProgramId = new PropertyDefinition(nameof(ProgramId), typeof(string));


        /// <summary>
        /// ControlTypeId
        /// </summary>
        public static PropertyDefinition ControlTypeId = new PropertyDefinition(nameof(ControlTypeId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Status
        /// </summary>
        public static PropertyDefinition Status = new PropertyDefinition(nameof(Status), typeof(string));


        /// <summary>
        /// Owner
        /// </summary>
        public static PropertyDefinition Owner = new PropertyDefinition(nameof(Owner), typeof(UserIdentity));


        /// <summary>
        /// Resource
        /// </summary>
        public static PropertyDefinition Resource = new PropertyDefinition(nameof(Resource), typeof(ProgramResource));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Program
        /// </summary>
        public static PropertyDefinition Program = new PropertyDefinition(nameof(Program), typeof(Program));

    }


    /// <summary>
    /// ProgramControlTypeObjectSchema
    /// </summary>
    public class ProgramControlTypeObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// ControlTypeGroupId
        /// </summary>
        public static PropertyDefinition ControlTypeGroupId = new PropertyDefinition(nameof(ControlTypeGroupId), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));

    }


    /// <summary>
    /// OfficeConfigurationObjectSchema
    /// </summary>
    public class OfficeConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// TenantCheckinStatuses
        /// </summary>
        public static PropertyDefinition TenantCheckinStatuses = new PropertyDefinition(nameof(TenantCheckinStatuses), typeof(IList<OfficeClientCheckinStatus>));


        /// <summary>
        /// TenantUserCheckinSummary
        /// </summary>
        public static PropertyDefinition TenantUserCheckinSummary = new PropertyDefinition(nameof(TenantUserCheckinSummary), typeof(OfficeUserCheckinSummary));


        /// <summary>
        /// ClientConfigurations
        /// </summary>
        public static PropertyDefinition ClientConfigurations = new PropertyDefinition(nameof(ClientConfigurations), typeof(IList<OfficeClientConfiguration>));

    }


    /// <summary>
    /// OfficeClientConfigurationObjectSchema
    /// </summary>
    public class OfficeClientConfigurationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// UserPreferencePayload
        /// </summary>
        public static PropertyDefinition UserPreferencePayload = new PropertyDefinition(nameof(UserPreferencePayload), typeof(string));


        /// <summary>
        /// PolicyPayload
        /// </summary>
        public static PropertyDefinition PolicyPayload = new PropertyDefinition(nameof(PolicyPayload), typeof(string));


        /// <summary>
        /// Description
        /// </summary>
        public static PropertyDefinition Description = new PropertyDefinition(nameof(Description), typeof(string));


        /// <summary>
        /// DisplayName
        /// </summary>
        public static PropertyDefinition DisplayName = new PropertyDefinition(nameof(DisplayName), typeof(string));


        /// <summary>
        /// Priority
        /// </summary>
        public static PropertyDefinition Priority = new PropertyDefinition(nameof(Priority), typeof(int));


        /// <summary>
        /// UserCheckinSummary
        /// </summary>
        public static PropertyDefinition UserCheckinSummary = new PropertyDefinition(nameof(UserCheckinSummary), typeof(OfficeUserCheckinSummary));


        /// <summary>
        /// CheckinStatuses
        /// </summary>
        public static PropertyDefinition CheckinStatuses = new PropertyDefinition(nameof(CheckinStatuses), typeof(IList<OfficeClientCheckinStatus>));


        /// <summary>
        /// Assignments
        /// </summary>
        public static PropertyDefinition Assignments = new PropertyDefinition(nameof(Assignments), typeof(IList<OfficeClientConfigurationAssignment>));

    }


    /// <summary>
    /// OfficeClientConfigurationAssignmentObjectSchema
    /// </summary>
    public class OfficeClientConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(OfficeConfigurationAssignmentTarget));

    }


    /// <summary>
    /// WindowsOfficeClientConfigurationObjectSchema
    /// </summary>
    public class WindowsOfficeClientConfigurationObjectSchema : OfficeClientConfigurationObjectSchema
    {
    }


    /// <summary>
    /// WindowsOfficeClientSecurityConfigurationObjectSchema
    /// </summary>
    public class WindowsOfficeClientSecurityConfigurationObjectSchema : OfficeClientConfigurationObjectSchema
    {
    }


    /// <summary>
    /// GroupPolicyDefinitionValueObjectSchema
    /// </summary>
    public class GroupPolicyDefinitionValueObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Enabled
        /// </summary>
        public static PropertyDefinition Enabled = new PropertyDefinition(nameof(Enabled), typeof(bool));


        /// <summary>
        /// ConfigurationType
        /// </summary>
        public static PropertyDefinition ConfigurationType = new PropertyDefinition(nameof(ConfigurationType), typeof(GroupPolicyConfigurationType));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// PresentationValues
        /// </summary>
        public static PropertyDefinition PresentationValues = new PropertyDefinition(nameof(PresentationValues), typeof(IList<GroupPolicyPresentationValue>));


        /// <summary>
        /// Definition
        /// </summary>
        public static PropertyDefinition Definition = new PropertyDefinition(nameof(Definition), typeof(GroupPolicyDefinition));

    }


    /// <summary>
    /// GroupPolicyConfigurationAssignmentObjectSchema
    /// </summary>
    public class GroupPolicyConfigurationAssignmentObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Target
        /// </summary>
        public static PropertyDefinition Target = new PropertyDefinition(nameof(Target), typeof(DeviceAndAppManagementAssignmentTarget));

    }


    /// <summary>
    /// GroupPolicyPresentationValueObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// CreatedDateTime
        /// </summary>
        public static PropertyDefinition CreatedDateTime = new PropertyDefinition(nameof(CreatedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// DefinitionValue
        /// </summary>
        public static PropertyDefinition DefinitionValue = new PropertyDefinition(nameof(DefinitionValue), typeof(GroupPolicyDefinitionValue));


        /// <summary>
        /// Presentation
        /// </summary>
        public static PropertyDefinition Presentation = new PropertyDefinition(nameof(Presentation), typeof(GroupPolicyPresentation));

    }


    /// <summary>
    /// GroupPolicyPresentationObjectSchema
    /// </summary>
    public class GroupPolicyPresentationObjectSchema : EntityObjectSchema
    {

        /// <summary>
        /// Label
        /// </summary>
        public static PropertyDefinition Label = new PropertyDefinition(nameof(Label), typeof(string));


        /// <summary>
        /// LastModifiedDateTime
        /// </summary>
        public static PropertyDefinition LastModifiedDateTime = new PropertyDefinition(nameof(LastModifiedDateTime), typeof(DateTimeOffset));


        /// <summary>
        /// Definition
        /// </summary>
        public static PropertyDefinition Definition = new PropertyDefinition(nameof(Definition), typeof(GroupPolicyDefinition));

    }


    /// <summary>
    /// GroupPolicyPresentationCheckBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationCheckBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultChecked
        /// </summary>
        public static PropertyDefinition DefaultChecked = new PropertyDefinition(nameof(DefaultChecked), typeof(bool));

    }


    /// <summary>
    /// GroupPolicyPresentationComboBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationComboBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultValue
        /// </summary>
        public static PropertyDefinition DefaultValue = new PropertyDefinition(nameof(DefaultValue), typeof(string));


        /// <summary>
        /// Suggestions
        /// </summary>
        public static PropertyDefinition Suggestions = new PropertyDefinition(nameof(Suggestions), typeof(IList<String>));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// MaxLength
        /// </summary>
        public static PropertyDefinition MaxLength = new PropertyDefinition(nameof(MaxLength), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationDecimalTextBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationDecimalTextBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultValue
        /// </summary>
        public static PropertyDefinition DefaultValue = new PropertyDefinition(nameof(DefaultValue), typeof(Int64));


        /// <summary>
        /// Spin
        /// </summary>
        public static PropertyDefinition Spin = new PropertyDefinition(nameof(Spin), typeof(bool));


        /// <summary>
        /// SpinStep
        /// </summary>
        public static PropertyDefinition SpinStep = new PropertyDefinition(nameof(SpinStep), typeof(Int64));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// MinValue
        /// </summary>
        public static PropertyDefinition MinValue = new PropertyDefinition(nameof(MinValue), typeof(Int64));


        /// <summary>
        /// MaxValue
        /// </summary>
        public static PropertyDefinition MaxValue = new PropertyDefinition(nameof(MaxValue), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationDropdownListObjectSchema
    /// </summary>
    public class GroupPolicyPresentationDropdownListObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultItem
        /// </summary>
        public static PropertyDefinition DefaultItem = new PropertyDefinition(nameof(DefaultItem), typeof(GroupPolicyPresentationDropdownListItem));


        /// <summary>
        /// Items
        /// </summary>
        public static PropertyDefinition Items = new PropertyDefinition(nameof(Items), typeof(IList<GroupPolicyPresentationDropdownListItem>));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));

    }


    /// <summary>
    /// GroupPolicyPresentationListBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationListBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// ExplicitValue
        /// </summary>
        public static PropertyDefinition ExplicitValue = new PropertyDefinition(nameof(ExplicitValue), typeof(bool));

    }


    /// <summary>
    /// GroupPolicyPresentationLongDecimalTextBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationLongDecimalTextBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultValue
        /// </summary>
        public static PropertyDefinition DefaultValue = new PropertyDefinition(nameof(DefaultValue), typeof(Int64));


        /// <summary>
        /// Spin
        /// </summary>
        public static PropertyDefinition Spin = new PropertyDefinition(nameof(Spin), typeof(bool));


        /// <summary>
        /// SpinStep
        /// </summary>
        public static PropertyDefinition SpinStep = new PropertyDefinition(nameof(SpinStep), typeof(Int64));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// MinValue
        /// </summary>
        public static PropertyDefinition MinValue = new PropertyDefinition(nameof(MinValue), typeof(Int64));


        /// <summary>
        /// MaxValue
        /// </summary>
        public static PropertyDefinition MaxValue = new PropertyDefinition(nameof(MaxValue), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationMultiTextBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationMultiTextBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// MaxLength
        /// </summary>
        public static PropertyDefinition MaxLength = new PropertyDefinition(nameof(MaxLength), typeof(Int64));


        /// <summary>
        /// MaxStrings
        /// </summary>
        public static PropertyDefinition MaxStrings = new PropertyDefinition(nameof(MaxStrings), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationTextObjectSchema
    /// </summary>
    public class GroupPolicyPresentationTextObjectSchema : GroupPolicyPresentationObjectSchema
    {
    }


    /// <summary>
    /// GroupPolicyPresentationTextBoxObjectSchema
    /// </summary>
    public class GroupPolicyPresentationTextBoxObjectSchema : GroupPolicyPresentationObjectSchema
    {

        /// <summary>
        /// DefaultValue
        /// </summary>
        public static PropertyDefinition DefaultValue = new PropertyDefinition(nameof(DefaultValue), typeof(string));


        /// <summary>
        /// Required
        /// </summary>
        public static PropertyDefinition Required = new PropertyDefinition(nameof(Required), typeof(bool));


        /// <summary>
        /// MaxLength
        /// </summary>
        public static PropertyDefinition MaxLength = new PropertyDefinition(nameof(MaxLength), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationValueBooleanObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueBooleanObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(bool));

    }


    /// <summary>
    /// GroupPolicyPresentationValueDecimalObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueDecimalObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationValueListObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueListObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(IList<KeyValuePair>));

    }


    /// <summary>
    /// GroupPolicyPresentationValueLongDecimalObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueLongDecimalObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(Int64));

    }


    /// <summary>
    /// GroupPolicyPresentationValueMultiTextObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueMultiTextObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Values
        /// </summary>
        public static PropertyDefinition Values = new PropertyDefinition(nameof(Values), typeof(IList<String>));

    }


    /// <summary>
    /// GroupPolicyPresentationValueTextObjectSchema
    /// </summary>
    public class GroupPolicyPresentationValueTextObjectSchema : GroupPolicyPresentationValueObjectSchema
    {

        /// <summary>
        /// Value
        /// </summary>
        public static PropertyDefinition Value = new PropertyDefinition(nameof(Value), typeof(string));

    }

}
